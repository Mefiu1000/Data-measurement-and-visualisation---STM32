
BMP_MSP_SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e758  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e4  0800e8f8  0800e8f8  0001e8f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0dc  0800f0dc  000202e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f0dc  0800f0dc  0001f0dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f0e4  0800f0e4  000202e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0e4  0800f0e4  0001f0e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f0e8  0800f0e8  0001f0e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  0800f0ec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000800  200002e0  0800f3cc  000202e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ae0  0800f3cc  00020ae0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a221  00000000  00000000  00020310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f19  00000000  00000000  0003a531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001560  00000000  00000000  0003e450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b8  00000000  00000000  0003f9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b242  00000000  00000000  00040d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dadd  00000000  00000000  0005bfaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093e8b  00000000  00000000  00079a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010d912  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068f4  00000000  00000000  0010d964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002e0 	.word	0x200002e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e8e0 	.word	0x0800e8e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002e4 	.word	0x200002e4
 80001dc:	0800e8e0 	.word	0x0800e8e0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <Read8bit>:
uint16_t T1, P1; 				// zmienne przechowujace rejestry z odczytanymi temp
int16_t T2, T3, P2, P3, P4, P5, P6, P7, P8, P9;
int32_t  t_fine;

static uint8_t Read8bit(uint8_t Register)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af04      	add	r7, sp, #16
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
	uint8_t Value;

	HAL_I2C_Mem_Read(BMP_I2C, ((BMP280_ADDRESS) << 1), Register, 1, &Value, 1, 1000);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <Read8bit+0x34>)
 8000fa8:	6818      	ldr	r0, [r3, #0]
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb2:	9302      	str	r3, [sp, #8]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	f107 030f 	add.w	r3, r7, #15
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	21ec      	movs	r1, #236	; 0xec
 8000fc2:	f003 fe5d 	bl	8004c80 <HAL_I2C_Mem_Read>

	return Value;
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200002fc 	.word	0x200002fc

08000fd4 <Write8bit>:

static void Write8bit(uint8_t Register, uint8_t Value)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af04      	add	r7, sp, #16
 8000fda:	4603      	mov	r3, r0
 8000fdc:	460a      	mov	r2, r1
 8000fde:	71fb      	strb	r3, [r7, #7]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Write(BMP_I2C, ((BMP280_ADDRESS) << 1), Register, 1, &Value, 1, 1000);
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <Write8bit+0x38>)
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff0:	9302      	str	r3, [sp, #8]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	1dbb      	adds	r3, r7, #6
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	21ec      	movs	r1, #236	; 0xec
 8000ffe:	f003 fd45 	bl	8004a8c <HAL_I2C_Mem_Write>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200002fc 	.word	0x200002fc

08001010 <Read16bit>:

static uint16_t Read16bit(uint8_t Register)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af04      	add	r7, sp, #16
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
	uint8_t Value[2]; //tablica dwuelementowa zamiast uint16_t bo funkcja hal czyta 8bitowe dane

	HAL_I2C_Mem_Read(BMP_I2C, ((BMP280_ADDRESS) << 1), Register, 1, Value, 2, 1000);
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <Read16bit+0x44>)
 800101c:	6818      	ldr	r0, [r3, #0]
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	b29a      	uxth	r2, r3
 8001022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	2302      	movs	r3, #2
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	21ec      	movs	r1, #236	; 0xec
 8001036:	f003 fe23 	bl	8004c80 <HAL_I2C_Mem_Read>

	return (Value[0] | (Value[1] << 8));
 800103a:	7b3b      	ldrb	r3, [r7, #12]
 800103c:	b21a      	sxth	r2, r3
 800103e:	7b7b      	ldrb	r3, [r7, #13]
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	b21b      	sxth	r3, r3
 8001044:	4313      	orrs	r3, r2
 8001046:	b21b      	sxth	r3, r3
 8001048:	b29b      	uxth	r3, r3
}
 800104a:	4618      	mov	r0, r3
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200002fc 	.word	0x200002fc

08001058 <Read24bit>:

static uint32_t Read24bit(uint8_t Register)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af04      	add	r7, sp, #16
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
	uint8_t Value[3]; //tablica 3- elementowa zamiast uint32_t

	HAL_I2C_Mem_Read(BMP_I2C, ((BMP280_ADDRESS) << 1), Register, 1, Value, 3, 1000);
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <Read24bit+0x44>)
 8001064:	6818      	ldr	r0, [r3, #0]
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	b29a      	uxth	r2, r3
 800106a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106e:	9302      	str	r3, [sp, #8]
 8001070:	2303      	movs	r3, #3
 8001072:	9301      	str	r3, [sp, #4]
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	2301      	movs	r3, #1
 800107c:	21ec      	movs	r1, #236	; 0xec
 800107e:	f003 fdff 	bl	8004c80 <HAL_I2C_Mem_Read>

	return (Value[2] | (Value[1] << 8) | (Value[0] << 16));
 8001082:	7bbb      	ldrb	r3, [r7, #14]
 8001084:	461a      	mov	r2, r3
 8001086:	7b7b      	ldrb	r3, [r7, #13]
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	431a      	orrs	r2, r3
 800108c:	7b3b      	ldrb	r3, [r7, #12]
 800108e:	041b      	lsls	r3, r3, #16
 8001090:	4313      	orrs	r3, r2
}
 8001092:	4618      	mov	r0, r3
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	200002fc 	.word	0x200002fc

080010a0 <BMP280_SetMode>:

//Funkcja odpowiadajaca za ustawienie trybu pracy
void BMP280_SetMode(uint8_t Mode)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
	uint8_t CTRL; //zmienna pomocnicza do przechowania rejestru control

	if(Mode > 3)
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2b03      	cmp	r3, #3
 80010ae:	d901      	bls.n	80010b4 <BMP280_SetMode+0x14>
		Mode = 3;
 80010b0:	2303      	movs	r3, #3
 80010b2:	71fb      	strb	r3, [r7, #7]

	CTRL = Read8bit(BMP280_Ctrl_Meas);
 80010b4:	20f4      	movs	r0, #244	; 0xf4
 80010b6:	f7ff ff71 	bl	8000f9c <Read8bit>
 80010ba:	4603      	mov	r3, r0
 80010bc:	73fb      	strb	r3, [r7, #15]
	CTRL = CTRL & 0xFC; // xxxx xx00, zerowanie 2 najmlodszych bitow
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	f023 0303 	bic.w	r3, r3, #3
 80010c4:	73fb      	strb	r3, [r7, #15]
	CTRL |= Mode;
 80010c6:	7bfa      	ldrb	r2, [r7, #15]
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	73fb      	strb	r3, [r7, #15]

	Write8bit(BMP280_Ctrl_Meas, CTRL);
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	4619      	mov	r1, r3
 80010d2:	20f4      	movs	r0, #244	; 0xf4
 80010d4:	f7ff ff7e 	bl	8000fd4 <Write8bit>
}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <BMP280_SetTemperature>:

void BMP280_SetTemperature(uint8_t Temperature)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	uint8_t CTRL; //zmienna pomocnicza do przechowania rejestru control

	if(Temperature > 5)
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2b05      	cmp	r3, #5
 80010ee:	d901      	bls.n	80010f4 <BMP280_SetTemperature+0x14>
		Temperature = 5;
 80010f0:	2305      	movs	r3, #5
 80010f2:	71fb      	strb	r3, [r7, #7]

	CTRL = Read8bit(BMP280_Ctrl_Meas);
 80010f4:	20f4      	movs	r0, #244	; 0xf4
 80010f6:	f7ff ff51 	bl	8000f9c <Read8bit>
 80010fa:	4603      	mov	r3, r0
 80010fc:	73fb      	strb	r3, [r7, #15]
	CTRL = CTRL & 0x1F; // 000x xxxx, zerowanie bitow 5,6,7
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	f003 031f 	and.w	r3, r3, #31
 8001104:	73fb      	strb	r3, [r7, #15]
	CTRL |= (Temperature << 5);
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	015b      	lsls	r3, r3, #5
 800110a:	b25a      	sxtb	r2, r3
 800110c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001110:	4313      	orrs	r3, r2
 8001112:	b25b      	sxtb	r3, r3
 8001114:	73fb      	strb	r3, [r7, #15]

	Write8bit(BMP280_Ctrl_Meas, CTRL);
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	4619      	mov	r1, r3
 800111a:	20f4      	movs	r0, #244	; 0xf4
 800111c:	f7ff ff5a 	bl	8000fd4 <Write8bit>
}
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <BMP280_SetPressure>:

void BMP280_SetPressure(uint8_t Pressure)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
	uint8_t CTRL; //zmienna pomocnicza do przechowania rejestru control

	if(Pressure > 5)
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	2b05      	cmp	r3, #5
 8001136:	d901      	bls.n	800113c <BMP280_SetPressure+0x14>
		Pressure = 5;
 8001138:	2305      	movs	r3, #5
 800113a:	71fb      	strb	r3, [r7, #7]

	CTRL = Read8bit(BMP280_Ctrl_Meas);
 800113c:	20f4      	movs	r0, #244	; 0xf4
 800113e:	f7ff ff2d 	bl	8000f9c <Read8bit>
 8001142:	4603      	mov	r3, r0
 8001144:	73fb      	strb	r3, [r7, #15]
	CTRL = CTRL & 0xE3; // xxx000xx, zerowanie bitow 4,3,2
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	f023 031c 	bic.w	r3, r3, #28
 800114c:	73fb      	strb	r3, [r7, #15]
	CTRL |= (Pressure << 2);
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	b25a      	sxtb	r2, r3
 8001154:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001158:	4313      	orrs	r3, r2
 800115a:	b25b      	sxtb	r3, r3
 800115c:	73fb      	strb	r3, [r7, #15]

	Write8bit(BMP280_Ctrl_Meas, CTRL);
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	4619      	mov	r1, r3
 8001162:	20f4      	movs	r0, #244	; 0xf4
 8001164:	f7ff ff36 	bl	8000fd4 <Write8bit>
}
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <BMP280_ReadTemperature>:

float BMP280_ReadTemperature(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
	int32_t var1, var2, T, adc_T;

	//odczytanie rejestru z temp
	adc_T = (int32_t) Read24bit(BMP280_Temp_Data);
 8001176:	20fa      	movs	r0, #250	; 0xfa
 8001178:	f7ff ff6e 	bl	8001058 <Read24bit>
 800117c:	4603      	mov	r3, r0
 800117e:	60fb      	str	r3, [r7, #12]
	adc_T >>= 4;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	111b      	asrs	r3, r3, #4
 8001184:	60fb      	str	r3, [r7, #12]

	//algorytm kompensujacy z dokumentacji

	var1 = ((((adc_T >> 3) - ((int32_t) (T1) << 1))) * ((int32_t) (T2))) >> 11;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	10da      	asrs	r2, r3, #3
 800118a:	4b21      	ldr	r3, [pc, #132]	; (8001210 <BMP280_ReadTemperature+0xa0>)
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	4a20      	ldr	r2, [pc, #128]	; (8001214 <BMP280_ReadTemperature+0xa4>)
 8001194:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001198:	fb02 f303 	mul.w	r3, r2, r3
 800119c:	12db      	asrs	r3, r3, #11
 800119e:	60bb      	str	r3, [r7, #8]
	var2 = (((((adc_T >> 4) - ((int32_t) (T1))) * ((adc_T >> 4) - ((int32_t) (T1)))) >> 12) * ((int32_t) (T3))) >> 14;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	111b      	asrs	r3, r3, #4
 80011a4:	4a1a      	ldr	r2, [pc, #104]	; (8001210 <BMP280_ReadTemperature+0xa0>)
 80011a6:	8812      	ldrh	r2, [r2, #0]
 80011a8:	1a9b      	subs	r3, r3, r2
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	1112      	asrs	r2, r2, #4
 80011ae:	4918      	ldr	r1, [pc, #96]	; (8001210 <BMP280_ReadTemperature+0xa0>)
 80011b0:	8809      	ldrh	r1, [r1, #0]
 80011b2:	1a52      	subs	r2, r2, r1
 80011b4:	fb02 f303 	mul.w	r3, r2, r3
 80011b8:	131b      	asrs	r3, r3, #12
 80011ba:	4a17      	ldr	r2, [pc, #92]	; (8001218 <BMP280_ReadTemperature+0xa8>)
 80011bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011c0:	fb02 f303 	mul.w	r3, r2, r3
 80011c4:	139b      	asrs	r3, r3, #14
 80011c6:	607b      	str	r3, [r7, #4]
	t_fine = var1 + var2;
 80011c8:	68ba      	ldr	r2, [r7, #8]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	4a13      	ldr	r2, [pc, #76]	; (800121c <BMP280_ReadTemperature+0xac>)
 80011d0:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8; //  Output value of “5123” equals 51.23
 80011d2:	4b12      	ldr	r3, [pc, #72]	; (800121c <BMP280_ReadTemperature+0xac>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	3380      	adds	r3, #128	; 0x80
 80011de:	121b      	asrs	r3, r3, #8
 80011e0:	603b      	str	r3, [r7, #0]
	return (float) (T / 100.0); //  change it to instantly equal 51.23
 80011e2:	6838      	ldr	r0, [r7, #0]
 80011e4:	f7ff f9a6 	bl	8000534 <__aeabi_i2d>
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <BMP280_ReadTemperature+0xb0>)
 80011ee:	f7ff fb35 	bl	800085c <__aeabi_ddiv>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4610      	mov	r0, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	f7ff fcfd 	bl	8000bf8 <__aeabi_d2f>
 80011fe:	4603      	mov	r3, r0
 8001200:	ee07 3a90 	vmov	s15, r3
}
 8001204:	eeb0 0a67 	vmov.f32	s0, s15
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000300 	.word	0x20000300
 8001214:	20000304 	.word	0x20000304
 8001218:	20000306 	.word	0x20000306
 800121c:	20000318 	.word	0x20000318
 8001220:	40590000 	.word	0x40590000

08001224 <BMP280_ReadPressureTemp>:

uint8_t BMP280_ReadPressureTemp(float *P, float *T)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
	int32_t var1, var2, adc_P;
	uint32_t p;

	*T = BMP280_ReadTemperature(); //odczyt temperatury
 800122e:	f7ff ff9f 	bl	8001170 <BMP280_ReadTemperature>
 8001232:	eef0 7a40 	vmov.f32	s15, s0
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	edc3 7a00 	vstr	s15, [r3]
	//odczytanie rejestru z cisnieniem
	adc_P = (int32_t) Read24bit(BMP280_Press_Data);
 800123c:	20f7      	movs	r0, #247	; 0xf7
 800123e:	f7ff ff0b 	bl	8001058 <Read24bit>
 8001242:	4603      	mov	r3, r0
 8001244:	613b      	str	r3, [r7, #16]
	adc_P >>= 4;
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	111b      	asrs	r3, r3, #4
 800124a:	613b      	str	r3, [r7, #16]

	//algorytm kompensujacy z dokumentacji

	var1 = (((int32_t) t_fine) >> 1) - (int32_t) 64000;
 800124c:	4b51      	ldr	r3, [pc, #324]	; (8001394 <BMP280_ReadPressureTemp+0x170>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	105b      	asrs	r3, r3, #1
 8001252:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8001256:	60fb      	str	r3, [r7, #12]
	var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * ((int32_t) (P6));
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	109b      	asrs	r3, r3, #2
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	1092      	asrs	r2, r2, #2
 8001260:	fb02 f303 	mul.w	r3, r2, r3
 8001264:	12db      	asrs	r3, r3, #11
 8001266:	4a4c      	ldr	r2, [pc, #304]	; (8001398 <BMP280_ReadPressureTemp+0x174>)
 8001268:	f9b2 2000 	ldrsh.w	r2, [r2]
 800126c:	fb02 f303 	mul.w	r3, r2, r3
 8001270:	60bb      	str	r3, [r7, #8]
	var2 = var2 + ((var1 * ((int32_t) (P5))) << 1);
 8001272:	4b4a      	ldr	r3, [pc, #296]	; (800139c <BMP280_ReadPressureTemp+0x178>)
 8001274:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001278:	461a      	mov	r2, r3
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	fb02 f303 	mul.w	r3, r2, r3
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	4413      	add	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
	var2 = (var2 >> 2) + (((int32_t) (P4)) << 16);
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	109a      	asrs	r2, r3, #2
 800128c:	4b44      	ldr	r3, [pc, #272]	; (80013a0 <BMP280_ReadPressureTemp+0x17c>)
 800128e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001292:	041b      	lsls	r3, r3, #16
 8001294:	4413      	add	r3, r2
 8001296:	60bb      	str	r3, [r7, #8]
	var1 = ((((P3) * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((((int32_t) (P2)) * var1) >> 1)) >> 18;
 8001298:	4b42      	ldr	r3, [pc, #264]	; (80013a4 <BMP280_ReadPressureTemp+0x180>)
 800129a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800129e:	4619      	mov	r1, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	109b      	asrs	r3, r3, #2
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	1092      	asrs	r2, r2, #2
 80012a8:	fb02 f303 	mul.w	r3, r2, r3
 80012ac:	135b      	asrs	r3, r3, #13
 80012ae:	fb01 f303 	mul.w	r3, r1, r3
 80012b2:	10da      	asrs	r2, r3, #3
 80012b4:	4b3c      	ldr	r3, [pc, #240]	; (80013a8 <BMP280_ReadPressureTemp+0x184>)
 80012b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ba:	4619      	mov	r1, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	fb01 f303 	mul.w	r3, r1, r3
 80012c2:	105b      	asrs	r3, r3, #1
 80012c4:	4413      	add	r3, r2
 80012c6:	149b      	asrs	r3, r3, #18
 80012c8:	60fb      	str	r3, [r7, #12]
	var1 = ((((32768 + var1)) * ((int32_t) (P1))) >> 15);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80012d0:	4a36      	ldr	r2, [pc, #216]	; (80013ac <BMP280_ReadPressureTemp+0x188>)
 80012d2:	8812      	ldrh	r2, [r2, #0]
 80012d4:	fb02 f303 	mul.w	r3, r2, r3
 80012d8:	13db      	asrs	r3, r3, #15
 80012da:	60fb      	str	r3, [r7, #12]

	if(var1 == 0)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <BMP280_ReadPressureTemp+0xc2>
	{
		return 0; // avoid exception caused by division by zero
 80012e2:	2300      	movs	r3, #0
 80012e4:	e052      	b.n	800138c <BMP280_ReadPressureTemp+0x168>
	}
	p = (((uint32_t) (((int32_t) 1048576) - adc_P) - (var2 >> 12))) * 3125;
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	131b      	asrs	r3, r3, #12
 80012ea:	461a      	mov	r2, r3
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4413      	add	r3, r2
 80012f0:	4a2f      	ldr	r2, [pc, #188]	; (80013b0 <BMP280_ReadPressureTemp+0x18c>)
 80012f2:	fb02 f303 	mul.w	r3, r2, r3
 80012f6:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 80012fa:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 80012fe:	617b      	str	r3, [r7, #20]
	if(p < 0x80000000)
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	2b00      	cmp	r3, #0
 8001304:	db06      	blt.n	8001314 <BMP280_ReadPressureTemp+0xf0>
	{
		p = (p << 1) / ((uint32_t) var1);
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	005a      	lsls	r2, r3, #1
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	e005      	b.n	8001320 <BMP280_ReadPressureTemp+0xfc>
	}
	else
	{
		p = (p / (uint32_t) var1) * 2;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	fbb2 f3f3 	udiv	r3, r2, r3
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	617b      	str	r3, [r7, #20]
	}
	var1 = (((int32_t) (P9)) * ((int32_t) (((p >> 3) * (p >> 3)) >> 13))) >> 12;
 8001320:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <BMP280_ReadPressureTemp+0x190>)
 8001322:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001326:	4619      	mov	r1, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	08db      	lsrs	r3, r3, #3
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	08d2      	lsrs	r2, r2, #3
 8001330:	fb02 f303 	mul.w	r3, r2, r3
 8001334:	0b5b      	lsrs	r3, r3, #13
 8001336:	fb01 f303 	mul.w	r3, r1, r3
 800133a:	131b      	asrs	r3, r3, #12
 800133c:	60fb      	str	r3, [r7, #12]
	var2 = (((int32_t) (p >> 2)) * ((int32_t) (P8))) >> 13;
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	089b      	lsrs	r3, r3, #2
 8001342:	461a      	mov	r2, r3
 8001344:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <BMP280_ReadPressureTemp+0x194>)
 8001346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800134a:	fb02 f303 	mul.w	r3, r2, r3
 800134e:	135b      	asrs	r3, r3, #13
 8001350:	60bb      	str	r3, [r7, #8]
	p = (uint32_t) ((int32_t) p + ((var1 + var2 + (P7)) >> 4)); //  Output value of “96386” equals 96386 Pa = 963,86 hPa
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	4413      	add	r3, r2
 8001358:	4a18      	ldr	r2, [pc, #96]	; (80013bc <BMP280_ReadPressureTemp+0x198>)
 800135a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800135e:	4413      	add	r3, r2
 8001360:	111a      	asrs	r2, r3, #4
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	4413      	add	r3, r2
 8001366:	617b      	str	r3, [r7, #20]
	*P = (float) (p / 100.0); //  change it to instantly equal 963,86 hPa
 8001368:	6978      	ldr	r0, [r7, #20]
 800136a:	f7ff f8d3 	bl	8000514 <__aeabi_ui2d>
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <BMP280_ReadPressureTemp+0x19c>)
 8001374:	f7ff fa72 	bl	800085c <__aeabi_ddiv>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	f7ff fc3a 	bl	8000bf8 <__aeabi_d2f>
 8001384:	4602      	mov	r2, r0
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	601a      	str	r2, [r3, #0]

	return 0;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000318 	.word	0x20000318
 8001398:	20000310 	.word	0x20000310
 800139c:	2000030e 	.word	0x2000030e
 80013a0:	2000030c 	.word	0x2000030c
 80013a4:	2000030a 	.word	0x2000030a
 80013a8:	20000308 	.word	0x20000308
 80013ac:	20000302 	.word	0x20000302
 80013b0:	fffff3cb 	.word	0xfffff3cb
 80013b4:	20000316 	.word	0x20000316
 80013b8:	20000314 	.word	0x20000314
 80013bc:	20000312 	.word	0x20000312
 80013c0:	40590000 	.word	0x40590000

080013c4 <BMP280_Init>:

uint8_t BMP280_Init( I2C_HandleTypeDef *I2C) //wskaznik na i2c
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	uint8_t Chip_ID;

	BMP_I2C = I2C;
 80013cc:	4a37      	ldr	r2, [pc, #220]	; (80014ac <BMP280_Init+0xe8>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6013      	str	r3, [r2, #0]

	Chip_ID = Read8bit(BMP280_Chip_ID);
 80013d2:	20d0      	movs	r0, #208	; 0xd0
 80013d4:	f7ff fde2 	bl	8000f9c <Read8bit>
 80013d8:	4603      	mov	r3, r0
 80013da:	73fb      	strb	r3, [r7, #15]

	if(Chip_ID != 0x58) //taka wartosc ma sie znajdowac pod tym rejestrem czyt. dok.
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	2b58      	cmp	r3, #88	; 0x58
 80013e0:	d001      	beq.n	80013e6 <BMP280_Init+0x22>
	{
		return 1; //oznaczenie bledu
 80013e2:	2301      	movs	r3, #1
 80013e4:	e05d      	b.n	80014a2 <BMP280_Init+0xde>
	}

	//Odczytanie rejestrow configuracyjnych
	T1 = Read16bit(BMP280_DIG_T1);
 80013e6:	2088      	movs	r0, #136	; 0x88
 80013e8:	f7ff fe12 	bl	8001010 <Read16bit>
 80013ec:	4603      	mov	r3, r0
 80013ee:	461a      	mov	r2, r3
 80013f0:	4b2f      	ldr	r3, [pc, #188]	; (80014b0 <BMP280_Init+0xec>)
 80013f2:	801a      	strh	r2, [r3, #0]
	T2 = Read16bit(BMP280_DIG_T2);
 80013f4:	208a      	movs	r0, #138	; 0x8a
 80013f6:	f7ff fe0b 	bl	8001010 <Read16bit>
 80013fa:	4603      	mov	r3, r0
 80013fc:	b21a      	sxth	r2, r3
 80013fe:	4b2d      	ldr	r3, [pc, #180]	; (80014b4 <BMP280_Init+0xf0>)
 8001400:	801a      	strh	r2, [r3, #0]
	T3 = Read16bit(BMP280_DIG_T3);
 8001402:	208c      	movs	r0, #140	; 0x8c
 8001404:	f7ff fe04 	bl	8001010 <Read16bit>
 8001408:	4603      	mov	r3, r0
 800140a:	b21a      	sxth	r2, r3
 800140c:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <BMP280_Init+0xf4>)
 800140e:	801a      	strh	r2, [r3, #0]
	P1 = Read16bit(BMP280_DIG_P1);
 8001410:	208e      	movs	r0, #142	; 0x8e
 8001412:	f7ff fdfd 	bl	8001010 <Read16bit>
 8001416:	4603      	mov	r3, r0
 8001418:	461a      	mov	r2, r3
 800141a:	4b28      	ldr	r3, [pc, #160]	; (80014bc <BMP280_Init+0xf8>)
 800141c:	801a      	strh	r2, [r3, #0]
	P2 = Read16bit(BMP280_DIG_P2);
 800141e:	2090      	movs	r0, #144	; 0x90
 8001420:	f7ff fdf6 	bl	8001010 <Read16bit>
 8001424:	4603      	mov	r3, r0
 8001426:	b21a      	sxth	r2, r3
 8001428:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <BMP280_Init+0xfc>)
 800142a:	801a      	strh	r2, [r3, #0]
	P3 = Read16bit(BMP280_DIG_P3);
 800142c:	2092      	movs	r0, #146	; 0x92
 800142e:	f7ff fdef 	bl	8001010 <Read16bit>
 8001432:	4603      	mov	r3, r0
 8001434:	b21a      	sxth	r2, r3
 8001436:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <BMP280_Init+0x100>)
 8001438:	801a      	strh	r2, [r3, #0]
	P4 = Read16bit(BMP280_DIG_P4);
 800143a:	2094      	movs	r0, #148	; 0x94
 800143c:	f7ff fde8 	bl	8001010 <Read16bit>
 8001440:	4603      	mov	r3, r0
 8001442:	b21a      	sxth	r2, r3
 8001444:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <BMP280_Init+0x104>)
 8001446:	801a      	strh	r2, [r3, #0]
	P5 = Read16bit(BMP280_DIG_P5);
 8001448:	2096      	movs	r0, #150	; 0x96
 800144a:	f7ff fde1 	bl	8001010 <Read16bit>
 800144e:	4603      	mov	r3, r0
 8001450:	b21a      	sxth	r2, r3
 8001452:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <BMP280_Init+0x108>)
 8001454:	801a      	strh	r2, [r3, #0]
	P6 = Read16bit(BMP280_DIG_P6);
 8001456:	2098      	movs	r0, #152	; 0x98
 8001458:	f7ff fdda 	bl	8001010 <Read16bit>
 800145c:	4603      	mov	r3, r0
 800145e:	b21a      	sxth	r2, r3
 8001460:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <BMP280_Init+0x10c>)
 8001462:	801a      	strh	r2, [r3, #0]
	P7 = Read16bit(BMP280_DIG_P7);
 8001464:	209a      	movs	r0, #154	; 0x9a
 8001466:	f7ff fdd3 	bl	8001010 <Read16bit>
 800146a:	4603      	mov	r3, r0
 800146c:	b21a      	sxth	r2, r3
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <BMP280_Init+0x110>)
 8001470:	801a      	strh	r2, [r3, #0]
	P8 = Read16bit(BMP280_DIG_P8);
 8001472:	209c      	movs	r0, #156	; 0x9c
 8001474:	f7ff fdcc 	bl	8001010 <Read16bit>
 8001478:	4603      	mov	r3, r0
 800147a:	b21a      	sxth	r2, r3
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <BMP280_Init+0x114>)
 800147e:	801a      	strh	r2, [r3, #0]
	P9 = Read16bit(BMP280_DIG_P9);
 8001480:	209e      	movs	r0, #158	; 0x9e
 8001482:	f7ff fdc5 	bl	8001010 <Read16bit>
 8001486:	4603      	mov	r3, r0
 8001488:	b21a      	sxth	r2, r3
 800148a:	4b14      	ldr	r3, [pc, #80]	; (80014dc <BMP280_Init+0x118>)
 800148c:	801a      	strh	r2, [r3, #0]

	BMP280_SetTemperature(BMP280_Temp_16Bit);
 800148e:	2001      	movs	r0, #1
 8001490:	f7ff fe26 	bl	80010e0 <BMP280_SetTemperature>
	BMP280_SetPressure(BMP280_Press_16Bit);
 8001494:	2001      	movs	r0, #1
 8001496:	f7ff fe47 	bl	8001128 <BMP280_SetPressure>
	BMP280_SetMode(BMP280_NormalMode);
 800149a:	2003      	movs	r0, #3
 800149c:	f7ff fe00 	bl	80010a0 <BMP280_SetMode>

	return 0;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200002fc 	.word	0x200002fc
 80014b0:	20000300 	.word	0x20000300
 80014b4:	20000304 	.word	0x20000304
 80014b8:	20000306 	.word	0x20000306
 80014bc:	20000302 	.word	0x20000302
 80014c0:	20000308 	.word	0x20000308
 80014c4:	2000030a 	.word	0x2000030a
 80014c8:	2000030c 	.word	0x2000030c
 80014cc:	2000030e 	.word	0x2000030e
 80014d0:	20000310 	.word	0x20000310
 80014d4:	20000312 	.word	0x20000312
 80014d8:	20000314 	.word	0x20000314
 80014dc:	20000316 	.word	0x20000316

080014e0 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t *font;
uint8_t font_size = 2;

void GFX_SetFont(const uint8_t *font_t)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	font = font_t;
 80014e8:	4a04      	ldr	r2, [pc, #16]	; (80014fc <GFX_SetFont+0x1c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6013      	str	r3, [r2, #0]
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	2000031c 	.word	0x2000031c

08001500 <GFX_SetFontSize>:

void GFX_SetFontSize(uint8_t size_t)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
	if(size_t != 0)
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d002      	beq.n	8001516 <GFX_SetFontSize+0x16>
		font_size = size_t;
 8001510:	4a04      	ldr	r2, [pc, #16]	; (8001524 <GFX_SetFontSize+0x24>)
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	7013      	strb	r3, [r2, #0]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000000 	.word	0x20000000

08001528 <GFX_DrawChar>:
	return font_size;
}

void GFX_DrawChar(int x, int y, char chr, uint16_t color)

{
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b089      	sub	sp, #36	; 0x24
 800152c:	af02      	add	r7, sp, #8
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	4611      	mov	r1, r2
 8001534:	461a      	mov	r2, r3
 8001536:	460b      	mov	r3, r1
 8001538:	71fb      	strb	r3, [r7, #7]
 800153a:	4613      	mov	r3, r2
 800153c:	80bb      	strh	r3, [r7, #4]
	if(chr > 0x7E)
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	2b7e      	cmp	r3, #126	; 0x7e
 8001542:	d867      	bhi.n	8001614 <GFX_DrawChar+0xec>
		return; // chr > '~'

	for(uint8_t i = 0; i < font[1]; i++) // Each column (Width)
 8001544:	2300      	movs	r3, #0
 8001546:	75fb      	strb	r3, [r7, #23]
 8001548:	e05c      	b.n	8001604 <GFX_DrawChar+0xdc>
	{
		uint8_t line = (uint8_t) font[(chr - 0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 800154a:	4b34      	ldr	r3, [pc, #208]	; (800161c <GFX_DrawChar+0xf4>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	3b20      	subs	r3, #32
 8001552:	4932      	ldr	r1, [pc, #200]	; (800161c <GFX_DrawChar+0xf4>)
 8001554:	6809      	ldr	r1, [r1, #0]
 8001556:	3101      	adds	r1, #1
 8001558:	7809      	ldrb	r1, [r1, #0]
 800155a:	fb03 f101 	mul.w	r1, r3, r1
 800155e:	7dfb      	ldrb	r3, [r7, #23]
 8001560:	440b      	add	r3, r1
 8001562:	3302      	adds	r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	75bb      	strb	r3, [r7, #22]

		for(int8_t j = 0; j < font[0]; j++, line >>= 1) // For each pixel in column
 800156a:	2300      	movs	r3, #0
 800156c:	757b      	strb	r3, [r7, #21]
 800156e:	e03f      	b.n	80015f0 <GFX_DrawChar+0xc8>
		{
			if(line & 1) // Check last pixel in line
 8001570:	7dbb      	ldrb	r3, [r7, #22]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b00      	cmp	r3, #0
 8001578:	d031      	beq.n	80015de <GFX_DrawChar+0xb6>
			{
				if(font_size == 1)
 800157a:	4b29      	ldr	r3, [pc, #164]	; (8001620 <GFX_DrawChar+0xf8>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d113      	bne.n	80015aa <GFX_DrawChar+0x82>
					GFX_DrawPixel(x + i, y + j, color); // Draw this pixel
 8001582:	7dfb      	ldrb	r3, [r7, #23]
 8001584:	b29a      	uxth	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	b29b      	uxth	r3, r3
 800158a:	4413      	add	r3, r2
 800158c:	b29b      	uxth	r3, r3
 800158e:	b218      	sxth	r0, r3
 8001590:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001594:	b29a      	uxth	r2, r3
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	b29b      	uxth	r3, r3
 800159a:	4413      	add	r3, r2
 800159c:	b29b      	uxth	r3, r3
 800159e:	b21b      	sxth	r3, r3
 80015a0:	88ba      	ldrh	r2, [r7, #4]
 80015a2:	4619      	mov	r1, r3
 80015a4:	f000 fba6 	bl	8001cf4 <TFT_Draw_Pixel>
 80015a8:	e019      	b.n	80015de <GFX_DrawChar+0xb6>
				else
					GFX_DrawFillRectangle(x + i * font_size, y + j * font_size, font_size, font_size, color); // Or bigger pixel
 80015aa:	7dfb      	ldrb	r3, [r7, #23]
 80015ac:	4a1c      	ldr	r2, [pc, #112]	; (8001620 <GFX_DrawChar+0xf8>)
 80015ae:	7812      	ldrb	r2, [r2, #0]
 80015b0:	fb03 f202 	mul.w	r2, r3, r2
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	18d0      	adds	r0, r2, r3
 80015b8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80015bc:	4a18      	ldr	r2, [pc, #96]	; (8001620 <GFX_DrawChar+0xf8>)
 80015be:	7812      	ldrb	r2, [r2, #0]
 80015c0:	fb03 f202 	mul.w	r2, r3, r2
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	18d1      	adds	r1, r2, r3
 80015c8:	4b15      	ldr	r3, [pc, #84]	; (8001620 <GFX_DrawChar+0xf8>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	4b14      	ldr	r3, [pc, #80]	; (8001620 <GFX_DrawChar+0xf8>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b29c      	uxth	r4, r3
 80015d4:	88bb      	ldrh	r3, [r7, #4]
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	4623      	mov	r3, r4
 80015da:	f000 f97f 	bl	80018dc <GFX_DrawFillRectangle>
		for(int8_t j = 0; j < font[0]; j++, line >>= 1) // For each pixel in column
 80015de:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	3301      	adds	r3, #1
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	757b      	strb	r3, [r7, #21]
 80015ea:	7dbb      	ldrb	r3, [r7, #22]
 80015ec:	085b      	lsrs	r3, r3, #1
 80015ee:	75bb      	strb	r3, [r7, #22]
 80015f0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80015f4:	4a09      	ldr	r2, [pc, #36]	; (800161c <GFX_DrawChar+0xf4>)
 80015f6:	6812      	ldr	r2, [r2, #0]
 80015f8:	7812      	ldrb	r2, [r2, #0]
 80015fa:	4293      	cmp	r3, r2
 80015fc:	dbb8      	blt.n	8001570 <GFX_DrawChar+0x48>
	for(uint8_t i = 0; i < font[1]; i++) // Each column (Width)
 80015fe:	7dfb      	ldrb	r3, [r7, #23]
 8001600:	3301      	adds	r3, #1
 8001602:	75fb      	strb	r3, [r7, #23]
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <GFX_DrawChar+0xf4>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	3301      	adds	r3, #1
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	7dfa      	ldrb	r2, [r7, #23]
 800160e:	429a      	cmp	r2, r3
 8001610:	d39b      	bcc.n	800154a <GFX_DrawChar+0x22>
 8001612:	e000      	b.n	8001616 <GFX_DrawChar+0xee>
		return; // chr > '~'
 8001614:	bf00      	nop
			}
		}
	}
}
 8001616:	371c      	adds	r7, #28
 8001618:	46bd      	mov	sp, r7
 800161a:	bd90      	pop	{r4, r7, pc}
 800161c:	2000031c 	.word	0x2000031c
 8001620:	20000000 	.word	0x20000000

08001624 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char *str, uint16_t color)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	807b      	strh	r3, [r7, #2]
	int x_tmp = x;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 800163c:	e015      	b.n	800166a <GFX_DrawString+0x46>
	{
		GFX_DrawChar(x_tmp, y, znak, color); // Draw current char
 800163e:	887b      	ldrh	r3, [r7, #2]
 8001640:	7cfa      	ldrb	r2, [r7, #19]
 8001642:	68b9      	ldr	r1, [r7, #8]
 8001644:	6978      	ldr	r0, [r7, #20]
 8001646:	f7ff ff6f 	bl	8001528 <GFX_DrawChar>

		x_tmp += ((uint8_t) font[1] * font_size) + 1; // Move X drawing pointer do char width + 1 (space)
 800164a:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <GFX_DrawString+0x5c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	3301      	adds	r3, #1
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	461a      	mov	r2, r3
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <GFX_DrawString+0x60>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	fb02 f303 	mul.w	r3, r2, r3
 800165c:	3301      	adds	r3, #1
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	4413      	add	r3, r2
 8001662:	617b      	str	r3, [r7, #20]

		znak = *str; // Next char
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	1c5a      	adds	r2, r3, #1
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1e3      	bne.n	800163e <GFX_DrawString+0x1a>
	}
}
 8001676:	bf00      	nop
 8001678:	bf00      	nop
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	2000031c 	.word	0x2000031c
 8001684:	20000000 	.word	0x20000000

08001688 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint16_t color)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08c      	sub	sp, #48	; 0x30
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
 8001694:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80016a0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	1acb      	subs	r3, r1, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	bfb8      	it	lt
 80016ae:	425b      	neglt	r3, r3
 80016b0:	429a      	cmp	r2, r3
 80016b2:	bfcc      	ite	gt
 80016b4:	2301      	movgt	r3, #1
 80016b6:	2300      	movle	r3, #0
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	857b      	strh	r3, [r7, #42]	; 0x2a

	if(steep)
 80016bc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d00b      	beq.n	80016dc <GFX_WriteLine+0x54>
	{
		_swap_int(x_start, y_start);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	60bb      	str	r3, [r7, #8]
		_swap_int(x_end, y_end);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	623b      	str	r3, [r7, #32]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	603b      	str	r3, [r7, #0]
	}

	if(x_start > x_end)
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	dd0b      	ble.n	80016fc <GFX_WriteLine+0x74>
	{
		_swap_int(x_start, x_end);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	61fb      	str	r3, [r7, #28]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	607b      	str	r3, [r7, #4]
		_swap_int(y_start, y_end);
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	61bb      	str	r3, [r7, #24]
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	603b      	str	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x_end - x_start;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	b29a      	uxth	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	b29b      	uxth	r3, r3
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	b29b      	uxth	r3, r3
 8001708:	82fb      	strh	r3, [r7, #22]
	dy = abs(y_end - y_start);
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	bfb8      	it	lt
 8001714:	425b      	neglt	r3, r3
 8001716:	82bb      	strh	r3, [r7, #20]

	int16_t err = dx / 2;
 8001718:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800171c:	0fda      	lsrs	r2, r3, #31
 800171e:	4413      	add	r3, r2
 8001720:	105b      	asrs	r3, r3, #1
 8001722:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t ystep;

	if(y_start < y_end)
 8001724:	68ba      	ldr	r2, [r7, #8]
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	da02      	bge.n	8001732 <GFX_WriteLine+0xaa>
	{
		ystep = 1;
 800172c:	2301      	movs	r3, #1
 800172e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001730:	e02e      	b.n	8001790 <GFX_WriteLine+0x108>
	}
	else
	{
		ystep = -1;
 8001732:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001736:	85bb      	strh	r3, [r7, #44]	; 0x2c
	}

	for(; x_start <= x_end; x_start++)
 8001738:	e02a      	b.n	8001790 <GFX_WriteLine+0x108>
	{
		if(steep)
 800173a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800173e:	2b00      	cmp	r3, #0
 8001740:	d008      	beq.n	8001754 <GFX_WriteLine+0xcc>
		{
			GFX_DrawPixel(y_start, x_start, color);
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	b21b      	sxth	r3, r3
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	b211      	sxth	r1, r2
 800174a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800174c:	4618      	mov	r0, r3
 800174e:	f000 fad1 	bl	8001cf4 <TFT_Draw_Pixel>
 8001752:	e007      	b.n	8001764 <GFX_WriteLine+0xdc>
		}
		else
		{
			GFX_DrawPixel(x_start, y_start, color);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	b21b      	sxth	r3, r3
 8001758:	68ba      	ldr	r2, [r7, #8]
 800175a:	b211      	sxth	r1, r2
 800175c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800175e:	4618      	mov	r0, r3
 8001760:	f000 fac8 	bl	8001cf4 <TFT_Draw_Pixel>
		}
		err -= dy;
 8001764:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001766:	8abb      	ldrh	r3, [r7, #20]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	b29b      	uxth	r3, r3
 800176c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if(err < 0)
 800176e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001772:	2b00      	cmp	r3, #0
 8001774:	da09      	bge.n	800178a <GFX_WriteLine+0x102>
		{
			y_start += ystep;
 8001776:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	4413      	add	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]
			err += dx;
 8001780:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001782:	8afb      	ldrh	r3, [r7, #22]
 8001784:	4413      	add	r3, r2
 8001786:	b29b      	uxth	r3, r3
 8001788:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(; x_start <= x_end; x_start++)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	3301      	adds	r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	429a      	cmp	r2, r3
 8001796:	ddd0      	ble.n	800173a <GFX_WriteLine+0xb2>
		}
	}
}
 8001798:	bf00      	nop
 800179a:	bf00      	nop
 800179c:	3730      	adds	r7, #48	; 0x30
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint16_t color)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b086      	sub	sp, #24
 80017a6:	af02      	add	r7, sp, #8
 80017a8:	60f8      	str	r0, [r7, #12]
 80017aa:	60b9      	str	r1, [r7, #8]
 80017ac:	607a      	str	r2, [r7, #4]
 80017ae:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start + h - 1, color);
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	1e5a      	subs	r2, r3, #1
 80017b8:	887b      	ldrh	r3, [r7, #2]
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	4613      	mov	r3, r2
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f7ff ff60 	bl	8001688 <GFX_WriteLine>
}
 80017c8:	bf00      	nop
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, uint16_t color)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af02      	add	r7, sp, #8
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
 80017dc:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start + w - 1, y_start, color);
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4413      	add	r3, r2
 80017e4:	1e5a      	subs	r2, r3, #1
 80017e6:	887b      	ldrh	r3, [r7, #2]
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	68b9      	ldr	r1, [r7, #8]
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f7ff ff4a 	bl	8001688 <GFX_WriteLine>
}
 80017f4:	bf00      	nop
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, uint16_t color)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af02      	add	r7, sp, #8
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
 8001808:	603b      	str	r3, [r7, #0]
	if(x_start == x_end)
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	429a      	cmp	r2, r3
 8001810:	d113      	bne.n	800183a <GFX_DrawLine+0x3e>
	{
		if(y_start > y_end)
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	dd05      	ble.n	8001826 <GFX_DrawLine+0x2a>
			_swap_int(y_start, y_end);
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	603b      	str	r3, [r7, #0]
		GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	1c5a      	adds	r2, r3, #1
 800182e:	8c3b      	ldrh	r3, [r7, #32]
 8001830:	68b9      	ldr	r1, [r7, #8]
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f7ff ffb5 	bl	80017a2 <GFX_DrawFastVLine>
	else
	{

		GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	}
}
 8001838:	e01f      	b.n	800187a <GFX_DrawLine+0x7e>
	else if(y_start == y_end)
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d113      	bne.n	800186a <GFX_DrawLine+0x6e>
		if(x_start > x_end)
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	429a      	cmp	r2, r3
 8001848:	dd05      	ble.n	8001856 <GFX_DrawLine+0x5a>
			_swap_int(x_start, x_end);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	607b      	str	r3, [r7, #4]
		GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	1c5a      	adds	r2, r3, #1
 800185e:	8c3b      	ldrh	r3, [r7, #32]
 8001860:	68b9      	ldr	r1, [r7, #8]
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f7ff ffb4 	bl	80017d0 <GFX_DrawFastHLine>
}
 8001868:	e007      	b.n	800187a <GFX_DrawLine+0x7e>
		GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 800186a:	8c3b      	ldrh	r3, [r7, #32]
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	68b9      	ldr	r1, [r7, #8]
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f7ff ff07 	bl	8001688 <GFX_WriteLine>
}
 800187a:	bf00      	nop
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <GFX_DrawRectangle>:
#endif
#if USING_RECTANGLE == 1
void GFX_DrawRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t color)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b084      	sub	sp, #16
 8001886:	af00      	add	r7, sp, #0
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	4611      	mov	r1, r2
 800188e:	461a      	mov	r2, r3
 8001890:	460b      	mov	r3, r1
 8001892:	80fb      	strh	r3, [r7, #6]
 8001894:	4613      	mov	r3, r2
 8001896:	80bb      	strh	r3, [r7, #4]

	GFX_DrawFastHLine(x, y, w, color);
 8001898:	88fa      	ldrh	r2, [r7, #6]
 800189a:	8b3b      	ldrh	r3, [r7, #24]
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	f7ff ff96 	bl	80017d0 <GFX_DrawFastHLine>
	GFX_DrawFastHLine(x, y + h - 1, w, color);
 80018a4:	88ba      	ldrh	r2, [r7, #4]
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	4413      	add	r3, r2
 80018aa:	1e59      	subs	r1, r3, #1
 80018ac:	88fa      	ldrh	r2, [r7, #6]
 80018ae:	8b3b      	ldrh	r3, [r7, #24]
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	f7ff ff8d 	bl	80017d0 <GFX_DrawFastHLine>
	GFX_DrawFastVLine(x, y, h, color);
 80018b6:	88ba      	ldrh	r2, [r7, #4]
 80018b8:	8b3b      	ldrh	r3, [r7, #24]
 80018ba:	68b9      	ldr	r1, [r7, #8]
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f7ff ff70 	bl	80017a2 <GFX_DrawFastVLine>
	GFX_DrawFastVLine(x + w - 1, y, h, color);
 80018c2:	88fa      	ldrh	r2, [r7, #6]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4413      	add	r3, r2
 80018c8:	1e58      	subs	r0, r3, #1
 80018ca:	88ba      	ldrh	r2, [r7, #4]
 80018cc:	8b3b      	ldrh	r3, [r7, #24]
 80018ce:	68b9      	ldr	r1, [r7, #8]
 80018d0:	f7ff ff67 	bl	80017a2 <GFX_DrawFastVLine>

}
 80018d4:	bf00      	nop
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <GFX_DrawFillRectangle>:
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t color)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	4611      	mov	r1, r2
 80018e8:	461a      	mov	r2, r3
 80018ea:	460b      	mov	r3, r1
 80018ec:	80fb      	strh	r3, [r7, #6]
 80018ee:	4613      	mov	r3, r2
 80018f0:	80bb      	strh	r3, [r7, #4]
	for(int i = x; i < x + w; i++)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	e008      	b.n	800190a <GFX_DrawFillRectangle+0x2e>
	{
		GFX_DrawFastVLine(i, y, h, color);
 80018f8:	88ba      	ldrh	r2, [r7, #4]
 80018fa:	8c3b      	ldrh	r3, [r7, #32]
 80018fc:	68b9      	ldr	r1, [r7, #8]
 80018fe:	6978      	ldr	r0, [r7, #20]
 8001900:	f7ff ff4f 	bl	80017a2 <GFX_DrawFastVLine>
	for(int i = x; i < x + w; i++)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	3301      	adds	r3, #1
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	88fa      	ldrh	r2, [r7, #6]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4413      	add	r3, r2
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	429a      	cmp	r2, r3
 8001914:	dbf0      	blt.n	80018f8 <GFX_DrawFillRectangle+0x1c>
	}

}
 8001916:	bf00      	nop
 8001918:	bf00      	nop
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <GFX_DrawCircle>:
#endif
#if USING_CIRCLE == 1
void GFX_DrawCircle(int x0, int y0, uint16_t r, uint16_t color)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	4611      	mov	r1, r2
 800192c:	461a      	mov	r2, r3
 800192e:	460b      	mov	r3, r1
 8001930:	80fb      	strh	r3, [r7, #6]
 8001932:	4613      	mov	r3, r2
 8001934:	80bb      	strh	r3, [r7, #4]
	int16_t f = 1 - r;
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	f1c3 0301 	rsb	r3, r3, #1
 800193c:	b29b      	uxth	r3, r3
 800193e:	83fb      	strh	r3, [r7, #30]
	int16_t ddF_x = 1;
 8001940:	2301      	movs	r3, #1
 8001942:	83bb      	strh	r3, [r7, #28]
	int16_t ddF_y = -2 * r;
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	461a      	mov	r2, r3
 8001948:	03d2      	lsls	r2, r2, #15
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	b29b      	uxth	r3, r3
 8001950:	837b      	strh	r3, [r7, #26]
	int16_t x = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	833b      	strh	r3, [r7, #24]
	int16_t y = r;
 8001956:	88fb      	ldrh	r3, [r7, #6]
 8001958:	82fb      	strh	r3, [r7, #22]

	GFX_DrawPixel(x0, y0 + r, color);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	b218      	sxth	r0, r3
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	b29a      	uxth	r2, r3
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	4413      	add	r3, r2
 8001966:	b29b      	uxth	r3, r3
 8001968:	b21b      	sxth	r3, r3
 800196a:	88ba      	ldrh	r2, [r7, #4]
 800196c:	4619      	mov	r1, r3
 800196e:	f000 f9c1 	bl	8001cf4 <TFT_Draw_Pixel>
	GFX_DrawPixel(x0, y0 - r, color);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	b218      	sxth	r0, r3
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	b29a      	uxth	r2, r3
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	b29b      	uxth	r3, r3
 8001980:	b21b      	sxth	r3, r3
 8001982:	88ba      	ldrh	r2, [r7, #4]
 8001984:	4619      	mov	r1, r3
 8001986:	f000 f9b5 	bl	8001cf4 <TFT_Draw_Pixel>
	GFX_DrawPixel(x0 + r, y0, color);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	b29a      	uxth	r2, r3
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	4413      	add	r3, r2
 8001992:	b29b      	uxth	r3, r3
 8001994:	b21b      	sxth	r3, r3
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	b211      	sxth	r1, r2
 800199a:	88ba      	ldrh	r2, [r7, #4]
 800199c:	4618      	mov	r0, r3
 800199e:	f000 f9a9 	bl	8001cf4 <TFT_Draw_Pixel>
	GFX_DrawPixel(x0 - r, y0, color);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	88fb      	ldrh	r3, [r7, #6]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	b211      	sxth	r1, r2
 80019b2:	88ba      	ldrh	r2, [r7, #4]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f000 f99d 	bl	8001cf4 <TFT_Draw_Pixel>

	while(x < y)
 80019ba:	e0a1      	b.n	8001b00 <GFX_DrawCircle+0x1e0>
	{
		if(f >= 0)
 80019bc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	db0e      	blt.n	80019e2 <GFX_DrawCircle+0xc2>
		{
			y--;
 80019c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	3b01      	subs	r3, #1
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	82fb      	strh	r3, [r7, #22]
			ddF_y += 2;
 80019d0:	8b7b      	ldrh	r3, [r7, #26]
 80019d2:	3302      	adds	r3, #2
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	837b      	strh	r3, [r7, #26]
			f += ddF_y;
 80019d8:	8bfa      	ldrh	r2, [r7, #30]
 80019da:	8b7b      	ldrh	r3, [r7, #26]
 80019dc:	4413      	add	r3, r2
 80019de:	b29b      	uxth	r3, r3
 80019e0:	83fb      	strh	r3, [r7, #30]
		}
		x++;
 80019e2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	3301      	adds	r3, #1
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	833b      	strh	r3, [r7, #24]
		ddF_x += 2;
 80019ee:	8bbb      	ldrh	r3, [r7, #28]
 80019f0:	3302      	adds	r3, #2
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	83bb      	strh	r3, [r7, #28]
		f += ddF_x;
 80019f6:	8bfa      	ldrh	r2, [r7, #30]
 80019f8:	8bbb      	ldrh	r3, [r7, #28]
 80019fa:	4413      	add	r3, r2
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	83fb      	strh	r3, [r7, #30]

		GFX_DrawPixel(x0 + x, y0 + y, color);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	8b3b      	ldrh	r3, [r7, #24]
 8001a06:	4413      	add	r3, r2
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	b218      	sxth	r0, r3
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	8afb      	ldrh	r3, [r7, #22]
 8001a12:	4413      	add	r3, r2
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	b21b      	sxth	r3, r3
 8001a18:	88ba      	ldrh	r2, [r7, #4]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f000 f96a 	bl	8001cf4 <TFT_Draw_Pixel>
		GFX_DrawPixel(x0 - x, y0 + y, color);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	8b3b      	ldrh	r3, [r7, #24]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	b218      	sxth	r0, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	8afb      	ldrh	r3, [r7, #22]
 8001a32:	4413      	add	r3, r2
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	b21b      	sxth	r3, r3
 8001a38:	88ba      	ldrh	r2, [r7, #4]
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f000 f95a 	bl	8001cf4 <TFT_Draw_Pixel>
		GFX_DrawPixel(x0 + x, y0 - y, color);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	8b3b      	ldrh	r3, [r7, #24]
 8001a46:	4413      	add	r3, r2
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	b218      	sxth	r0, r3
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	8afb      	ldrh	r3, [r7, #22]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	b21b      	sxth	r3, r3
 8001a58:	88ba      	ldrh	r2, [r7, #4]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f000 f94a 	bl	8001cf4 <TFT_Draw_Pixel>
		GFX_DrawPixel(x0 - x, y0 - y, color);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	8b3b      	ldrh	r3, [r7, #24]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	b218      	sxth	r0, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	8afb      	ldrh	r3, [r7, #22]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	b21b      	sxth	r3, r3
 8001a78:	88ba      	ldrh	r2, [r7, #4]
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	f000 f93a 	bl	8001cf4 <TFT_Draw_Pixel>
		GFX_DrawPixel(x0 + y, y0 + x, color);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	8afb      	ldrh	r3, [r7, #22]
 8001a86:	4413      	add	r3, r2
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	b218      	sxth	r0, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	8b3b      	ldrh	r3, [r7, #24]
 8001a92:	4413      	add	r3, r2
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	b21b      	sxth	r3, r3
 8001a98:	88ba      	ldrh	r2, [r7, #4]
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f000 f92a 	bl	8001cf4 <TFT_Draw_Pixel>
		GFX_DrawPixel(x0 - y, y0 + x, color);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	8afb      	ldrh	r3, [r7, #22]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	b218      	sxth	r0, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	8b3b      	ldrh	r3, [r7, #24]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	88ba      	ldrh	r2, [r7, #4]
 8001aba:	4619      	mov	r1, r3
 8001abc:	f000 f91a 	bl	8001cf4 <TFT_Draw_Pixel>
		GFX_DrawPixel(x0 + y, y0 - x, color);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	8afb      	ldrh	r3, [r7, #22]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	b218      	sxth	r0, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	8b3b      	ldrh	r3, [r7, #24]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	b21b      	sxth	r3, r3
 8001ad8:	88ba      	ldrh	r2, [r7, #4]
 8001ada:	4619      	mov	r1, r3
 8001adc:	f000 f90a 	bl	8001cf4 <TFT_Draw_Pixel>
		GFX_DrawPixel(x0 - y, y0 - x, color);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	8afb      	ldrh	r3, [r7, #22]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	b218      	sxth	r0, r3
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	8b3b      	ldrh	r3, [r7, #24]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	b21b      	sxth	r3, r3
 8001af8:	88ba      	ldrh	r2, [r7, #4]
 8001afa:	4619      	mov	r1, r3
 8001afc:	f000 f8fa 	bl	8001cf4 <TFT_Draw_Pixel>
	while(x < y)
 8001b00:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001b04:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	f6ff af57 	blt.w	80019bc <GFX_DrawCircle+0x9c>
	}

}
 8001b0e:	bf00      	nop
 8001b10:	bf00      	nop
 8001b12:	3720      	adds	r7, #32
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <Transmit_To_TFT>:
  ILI9341_DISPON  , 0x80,                // Display on
  0x00                                   // End of list
};

static void Transmit_To_TFT(uint8_t *Data, uint32_t Size)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(TFT_SPI, Data, Size, 1000);
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <Transmit_To_TFT+0x24>)
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	f005 fc79 	bl	8007426 <HAL_SPI_Transmit>
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000320 	.word	0x20000320

08001b40 <TFT_Send_Command>:

static void TFT_Send_Command(uint8_t Cmd)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(TFT_DC_RS_GPIO_Port, TFT_DC_RS_Pin, GPIO_PIN_RESET); //to send command
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b50:	4805      	ldr	r0, [pc, #20]	; (8001b68 <TFT_Send_Command+0x28>)
 8001b52:	f002 fe25 	bl	80047a0 <HAL_GPIO_WritePin>
	Transmit_To_TFT(&Cmd, 1);
 8001b56:	1dfb      	adds	r3, r7, #7
 8001b58:	2101      	movs	r1, #1
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ffdc 	bl	8001b18 <Transmit_To_TFT>
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40020400 	.word	0x40020400

08001b6c <Send_Command_Data>:

static void Send_Command_Data(uint8_t Cmd, uint8_t *Data, uint16_t Size)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	6039      	str	r1, [r7, #0]
 8001b76:	71fb      	strb	r3, [r7, #7]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(TFT_DC_RS_GPIO_Port, TFT_DC_RS_Pin, GPIO_PIN_RESET); //to send command
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b82:	480b      	ldr	r0, [pc, #44]	; (8001bb0 <Send_Command_Data+0x44>)
 8001b84:	f002 fe0c 	bl	80047a0 <HAL_GPIO_WritePin>
	Transmit_To_TFT(&Cmd, 1);
 8001b88:	1dfb      	adds	r3, r7, #7
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ffc3 	bl	8001b18 <Transmit_To_TFT>

	HAL_GPIO_WritePin(TFT_DC_RS_GPIO_Port, TFT_DC_RS_Pin, GPIO_PIN_SET); // to send data of Size amount
 8001b92:	2201      	movs	r2, #1
 8001b94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b98:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <Send_Command_Data+0x44>)
 8001b9a:	f002 fe01 	bl	80047a0 <HAL_GPIO_WritePin>
	Transmit_To_TFT(Data, Size);
 8001b9e:	88bb      	ldrh	r3, [r7, #4]
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	6838      	ldr	r0, [r7, #0]
 8001ba4:	f7ff ffb8 	bl	8001b18 <Transmit_To_TFT>
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40020400 	.word	0x40020400

08001bb4 <TFT_ILI9341_Set_Addr_Window>:

static void TFT_ILI9341_Set_Addr_Window(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h) //sets area of drawing
{
 8001bb4:	b590      	push	{r4, r7, lr}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4604      	mov	r4, r0
 8001bbc:	4608      	mov	r0, r1
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4623      	mov	r3, r4
 8001bc4:	80fb      	strh	r3, [r7, #6]
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	80bb      	strh	r3, [r7, #4]
 8001bca:	460b      	mov	r3, r1
 8001bcc:	807b      	strh	r3, [r7, #2]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	803b      	strh	r3, [r7, #0]
	uint8_t Data[4];
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8001bd2:	88fa      	ldrh	r2, [r7, #6]
 8001bd4:	887b      	ldrh	r3, [r7, #2]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	81fb      	strh	r3, [r7, #14]
 8001bde:	88ba      	ldrh	r2, [r7, #4]
 8001be0:	883b      	ldrh	r3, [r7, #0]
 8001be2:	4413      	add	r3, r2
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	3b01      	subs	r3, #1
 8001be8:	81bb      	strh	r3, [r7, #12]

	//8.2.20
	Data[0] = (x1 >> 8); //MSB
 8001bea:	88fb      	ldrh	r3, [r7, #6]
 8001bec:	0a1b      	lsrs	r3, r3, #8
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	723b      	strb	r3, [r7, #8]
	Data[1] = (x1 & 0xFF); //LSB
 8001bf4:	88fb      	ldrh	r3, [r7, #6]
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	727b      	strb	r3, [r7, #9]
	Data[2] = (x2 >> 8); //MSB
 8001bfa:	89fb      	ldrh	r3, [r7, #14]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	72bb      	strb	r3, [r7, #10]
	Data[3] = (x2 & 0xFF); //LSB
 8001c04:	89fb      	ldrh	r3, [r7, #14]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	72fb      	strb	r3, [r7, #11]
	Send_Command_Data(ILI9341_CASET, Data, 4); //columns
 8001c0a:	f107 0308 	add.w	r3, r7, #8
 8001c0e:	2204      	movs	r2, #4
 8001c10:	4619      	mov	r1, r3
 8001c12:	202a      	movs	r0, #42	; 0x2a
 8001c14:	f7ff ffaa 	bl	8001b6c <Send_Command_Data>

	Data[0] = (y1 >> 8);
 8001c18:	88bb      	ldrh	r3, [r7, #4]
 8001c1a:	0a1b      	lsrs	r3, r3, #8
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	723b      	strb	r3, [r7, #8]
	Data[1] = (y1 & 0xFF);
 8001c22:	88bb      	ldrh	r3, [r7, #4]
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	727b      	strb	r3, [r7, #9]
	Data[2] = (y2 >> 8);
 8001c28:	89bb      	ldrh	r3, [r7, #12]
 8001c2a:	0a1b      	lsrs	r3, r3, #8
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	72bb      	strb	r3, [r7, #10]
	Data[3] = (y2 & 0xFF);
 8001c32:	89bb      	ldrh	r3, [r7, #12]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	72fb      	strb	r3, [r7, #11]
	Send_Command_Data(ILI9341_PASET, Data, 4); //rows
 8001c38:	f107 0308 	add.w	r3, r7, #8
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	4619      	mov	r1, r3
 8001c40:	202b      	movs	r0, #43	; 0x2b
 8001c42:	f7ff ff93 	bl	8001b6c <Send_Command_Data>

}
 8001c46:	bf00      	nop
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd90      	pop	{r4, r7, pc}
	...

08001c50 <TFT_Clear_Screen>:

void TFT_Clear_Screen(uint16_t color)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	80fb      	strh	r3, [r7, #6]
	uint32_t Size = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT; //how long is data to send, how many pixels
 8001c5a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001c5e:	60fb      	str	r3, [r7, #12]
	TFT_ILI9341_Set_Addr_Window(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT); //set window to whole screen
 8001c60:	23f0      	movs	r3, #240	; 0xf0
 8001c62:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c66:	2100      	movs	r1, #0
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f7ff ffa3 	bl	8001bb4 <TFT_ILI9341_Set_Addr_Window>
	TFT_Send_Command(ILI9341_RAMWR); //send command to RAM
 8001c6e:	202c      	movs	r0, #44	; 0x2c
 8001c70:	f7ff ff66 	bl	8001b40 <TFT_Send_Command>

	HAL_GPIO_WritePin(TFT_DC_RS_GPIO_Port, TFT_DC_RS_Pin, GPIO_PIN_SET); //data mode
 8001c74:	2201      	movs	r2, #1
 8001c76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c7a:	481c      	ldr	r0, [pc, #112]	; (8001cec <TFT_Clear_Screen+0x9c>)
 8001c7c:	f002 fd90 	bl	80047a0 <HAL_GPIO_WritePin>
	while(Size > 0U)
 8001c80:	e023      	b.n	8001cca <TFT_Clear_Screen+0x7a>
	{
		/* Wait until TXE flag is set to send data */
		if(__HAL_SPI_GET_FLAG(TFT_SPI, SPI_FLAG_TXE))
 8001c82:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <TFT_Clear_Screen+0xa0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d11b      	bne.n	8001cca <TFT_Clear_Screen+0x7a>
		{
			*((__IO uint8_t*) &TFT_SPI->Instance->DR) = (color >> 8); //up 8 bits of pixel
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	0a1b      	lsrs	r3, r3, #8
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <TFT_Clear_Screen+0xa0>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	330c      	adds	r3, #12
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	701a      	strb	r2, [r3, #0]

			while(__HAL_SPI_GET_FLAG(TFT_SPI, SPI_FLAG_TXE) != SET); //wait until transfer is done i.e. 8 bits was sent
 8001ca4:	bf00      	nop
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <TFT_Clear_Screen+0xa0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d1f7      	bne.n	8001ca6 <TFT_Clear_Screen+0x56>

			*((__IO uint8_t*) &TFT_SPI->Instance->DR) = (color & 0xFF); // 2nd 8 bits of pixel
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <TFT_Clear_Screen+0xa0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	330c      	adds	r3, #12
 8001cbe:	88fa      	ldrh	r2, [r7, #6]
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	701a      	strb	r2, [r3, #0]
			Size--;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	60fb      	str	r3, [r7, #12]
	while(Size > 0U)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1d8      	bne.n	8001c82 <TFT_Clear_Screen+0x32>
		}
	}

	while(__HAL_SPI_GET_FLAG(TFT_SPI,SPI_FLAG_BSY) != RESET); //stay in loop until spi used by tft is used
 8001cd0:	bf00      	nop
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <TFT_Clear_Screen+0xa0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cde:	2b80      	cmp	r3, #128	; 0x80
 8001ce0:	d0f7      	beq.n	8001cd2 <TFT_Clear_Screen+0x82>
}
 8001ce2:	bf00      	nop
 8001ce4:	bf00      	nop
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40020400 	.word	0x40020400
 8001cf0:	20000320 	.word	0x20000320

08001cf4 <TFT_Draw_Pixel>:

void TFT_Draw_Pixel(int16_t x, int16_t y, uint16_t color)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	80fb      	strh	r3, [r7, #6]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	80bb      	strh	r3, [r7, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	807b      	strh	r3, [r7, #2]
	uint8_t Data[2];
	if((x >= 0) && (x <= ILI9341_TFTWIDTH) && (y >= 0) && (y <= ILI9341_TFTHEIGHT))
 8001d06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	db21      	blt.n	8001d52 <TFT_Draw_Pixel+0x5e>
 8001d0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d12:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001d16:	dc1c      	bgt.n	8001d52 <TFT_Draw_Pixel+0x5e>
 8001d18:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	db18      	blt.n	8001d52 <TFT_Draw_Pixel+0x5e>
 8001d20:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d24:	2bf0      	cmp	r3, #240	; 0xf0
 8001d26:	dc14      	bgt.n	8001d52 <TFT_Draw_Pixel+0x5e>
	{
		TFT_ILI9341_Set_Addr_Window(x, y, 1, 1); //ustaw rozmiar okna pixel
 8001d28:	88f8      	ldrh	r0, [r7, #6]
 8001d2a:	88b9      	ldrh	r1, [r7, #4]
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f7ff ff40 	bl	8001bb4 <TFT_ILI9341_Set_Addr_Window>
		Data[0] = (color >> 8);
 8001d34:	887b      	ldrh	r3, [r7, #2]
 8001d36:	0a1b      	lsrs	r3, r3, #8
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	733b      	strb	r3, [r7, #12]
		Data[1] = (color & 0xFF);
 8001d3e:	887b      	ldrh	r3, [r7, #2]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	737b      	strb	r3, [r7, #13]
		Send_Command_Data(ILI9341_RAMWR, Data, 2); //write to Ram and set color
 8001d44:	f107 030c 	add.w	r3, r7, #12
 8001d48:	2202      	movs	r2, #2
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	202c      	movs	r0, #44	; 0x2c
 8001d4e:	f7ff ff0d 	bl	8001b6c <Send_Command_Data>
	}
}
 8001d52:	bf00      	nop
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <TFT_Set_Rotation>:

void TFT_Set_Rotation(uint8_t Rotation)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	d820      	bhi.n	8001dae <TFT_Set_Rotation+0x52>
		return; // can't be higher than 3

	switch(Rotation)
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d816      	bhi.n	8001da0 <TFT_Set_Rotation+0x44>
 8001d72:	a201      	add	r2, pc, #4	; (adr r2, 8001d78 <TFT_Set_Rotation+0x1c>)
 8001d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d78:	08001d89 	.word	0x08001d89
 8001d7c:	08001d8f 	.word	0x08001d8f
 8001d80:	08001d95 	.word	0x08001d95
 8001d84:	08001d9b 	.word	0x08001d9b
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001d88:	2348      	movs	r3, #72	; 0x48
 8001d8a:	71fb      	strb	r3, [r7, #7]
		break;
 8001d8c:	e008      	b.n	8001da0 <TFT_Set_Rotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8001d8e:	2328      	movs	r3, #40	; 0x28
 8001d90:	71fb      	strb	r3, [r7, #7]
		break;
 8001d92:	e005      	b.n	8001da0 <TFT_Set_Rotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8001d94:	2388      	movs	r3, #136	; 0x88
 8001d96:	71fb      	strb	r3, [r7, #7]
		break;
 8001d98:	e002      	b.n	8001da0 <TFT_Set_Rotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001d9a:	23e8      	movs	r3, #232	; 0xe8
 8001d9c:	71fb      	strb	r3, [r7, #7]
		break;
 8001d9e:	bf00      	nop
	}

	Send_Command_Data(ILI9341_MADCTL, &Rotation, 1);
 8001da0:	1dfb      	adds	r3, r7, #7
 8001da2:	2201      	movs	r2, #1
 8001da4:	4619      	mov	r1, r3
 8001da6:	2036      	movs	r0, #54	; 0x36
 8001da8:	f7ff fee0 	bl	8001b6c <Send_Command_Data>
 8001dac:	e000      	b.n	8001db0 <TFT_Set_Rotation+0x54>
		return; // can't be higher than 3
 8001dae:	bf00      	nop
}
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop

08001db8 <TFT_ILI9341_Init>:

void TFT_ILI9341_Init(SPI_HandleTypeDef *SPI)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 8001dc0:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <TFT_ILI9341_Init+0x8c>)
 8001dc2:	60fb      	str	r3, [r7, #12]

	TFT_SPI = SPI;
 8001dc4:	4a20      	ldr	r2, [pc, #128]	; (8001e48 <TFT_ILI9341_Init+0x90>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6013      	str	r3, [r2, #0]

#if(ILI9341_HW_RESET == 1)
	HAL_GPIO_WritePin(TFT_Reset_GPIO_Port, TFT_Reset_Pin, GPIO_PIN_RESET); //reset low
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dd0:	481e      	ldr	r0, [pc, #120]	; (8001e4c <TFT_ILI9341_Init+0x94>)
 8001dd2:	f002 fce5 	bl	80047a0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001dd6:	2014      	movs	r0, #20
 8001dd8:	f001 fde4 	bl	80039a4 <HAL_Delay>
	HAL_GPIO_WritePin(TFT_Reset_GPIO_Port, TFT_Reset_Pin, GPIO_PIN_SET); // reset high
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001de2:	481a      	ldr	r0, [pc, #104]	; (8001e4c <TFT_ILI9341_Init+0x94>)
 8001de4:	f002 fcdc 	bl	80047a0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001de8:	2014      	movs	r0, #20
 8001dea:	f001 fddb 	bl	80039a4 <HAL_Delay>
#else
	TFT_Send_Command(ILI9341_SWRESET); // Engage software reset
	HAL_Delay(150);
#endif

	while((cmd = *(addr++)) > 0)
 8001dee:	e01a      	b.n	8001e26 <TFT_ILI9341_Init+0x6e>
	{
		x = *(addr++);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	1c5a      	adds	r2, r3, #1
 8001df4:	60fa      	str	r2, [r7, #12]
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	72bb      	strb	r3, [r7, #10]
		numArgs = x & 0x7F;
 8001dfa:	7abb      	ldrb	r3, [r7, #10]
 8001dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e00:	727b      	strb	r3, [r7, #9]
		Send_Command_Data(cmd, (uint8_t*) addr, numArgs);
 8001e02:	7a7b      	ldrb	r3, [r7, #9]
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	7afb      	ldrb	r3, [r7, #11]
 8001e08:	68f9      	ldr	r1, [r7, #12]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff feae 	bl	8001b6c <Send_Command_Data>
		addr += numArgs;
 8001e10:	7a7b      	ldrb	r3, [r7, #9]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	4413      	add	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]
		if(x & 0x80)
 8001e18:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	da02      	bge.n	8001e26 <TFT_ILI9341_Init+0x6e>
		{
			HAL_Delay(150);
 8001e20:	2096      	movs	r0, #150	; 0x96
 8001e22:	f001 fdbf 	bl	80039a4 <HAL_Delay>
	while((cmd = *(addr++)) > 0)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1c5a      	adds	r2, r3, #1
 8001e2a:	60fa      	str	r2, [r7, #12]
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	72fb      	strb	r3, [r7, #11]
 8001e30:	7afb      	ldrb	r3, [r7, #11]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1dc      	bne.n	8001df0 <TFT_ILI9341_Init+0x38>
		}
	}
	TFT_Set_Rotation(ILI9341_ROTATION);
 8001e36:	2001      	movs	r0, #1
 8001e38:	f7ff ff90 	bl	8001d5c <TFT_Set_Rotation>
}
 8001e3c:	bf00      	nop
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	0800ea00 	.word	0x0800ea00
 8001e48:	20000320 	.word	0x20000320
 8001e4c:	40020000 	.word	0x40020000

08001e50 <TP_Task>:
#if (TOUCH_ROTATION == 3)
CalibData_t CalibrationData = {.0902216, .0006510, -38.657, -.0010005, -.0667030, 258.08}; // default calibration data
#endif

void TP_Task(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af02      	add	r7, sp, #8
	switch(TouchState)
 8001e56:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <TP_Task+0x94>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d023      	beq.n	8001ea8 <TP_Task+0x58>
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	dc3c      	bgt.n	8001ede <TP_Task+0x8e>
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d039      	beq.n	8001edc <TP_Task+0x8c>
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d000      	beq.n	8001e6e <TP_Task+0x1e>
			HAL_NVIC_ClearPendingIRQ(TP_IRQn);
		}
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
		break;
	}
}
 8001e6c:	e037      	b.n	8001ede <TP_Task+0x8e>
		if(HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == GPIO_PIN_RESET)
 8001e6e:	2101      	movs	r1, #1
 8001e70:	481d      	ldr	r0, [pc, #116]	; (8001ee8 <TP_Task+0x98>)
 8001e72:	f002 fc7d 	bl	8004770 <HAL_GPIO_ReadPin>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d111      	bne.n	8001ea0 <TP_Task+0x50>
			HAL_SPI_TransmitReceive(TP_SPI, SendBuffer, ReceiveBuffer, 5, 1000); //Sendbuffer - CHN config, ReciveBuff - Raw data from ADC
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <TP_Task+0x9c>)
 8001e7e:	6818      	ldr	r0, [r3, #0]
 8001e80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	2305      	movs	r3, #5
 8001e88:	4a19      	ldr	r2, [pc, #100]	; (8001ef0 <TP_Task+0xa0>)
 8001e8a:	491a      	ldr	r1, [pc, #104]	; (8001ef4 <TP_Task+0xa4>)
 8001e8c:	f005 fc07 	bl	800769e <HAL_SPI_TransmitReceive>
			TP_ADC_to_Pixels(&TouchSamples[0], &TouchSamples[1]);
 8001e90:	4919      	ldr	r1, [pc, #100]	; (8001ef8 <TP_Task+0xa8>)
 8001e92:	481a      	ldr	r0, [pc, #104]	; (8001efc <TP_Task+0xac>)
 8001e94:	f000 f844 	bl	8001f20 <TP_ADC_to_Pixels>
			TouchState = TP_RELEASED;
 8001e98:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <TP_Task+0x94>)
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	701a      	strb	r2, [r3, #0]
		break;
 8001e9e:	e01e      	b.n	8001ede <TP_Task+0x8e>
			TouchState = TP_RELEASED;
 8001ea0:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <TP_Task+0x94>)
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	701a      	strb	r2, [r3, #0]
		break;
 8001ea6:	e01a      	b.n	8001ede <TP_Task+0x8e>
		TouchState = TP_IDLE;
 8001ea8:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <TP_Task+0x94>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
		while(HAL_NVIC_GetPendingIRQ(TP_IRQn)) //czyszczenie wszystkich flag zwiazanych z tym przerwaniem (2 konkretnie)
 8001eae:	e008      	b.n	8001ec2 <TP_Task+0x72>
			__HAL_GPIO_EXTI_CLEAR_IT(TP_IRQ_Pin); //flaga od pinu
 8001eb0:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <TP_Task+0xb0>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	615a      	str	r2, [r3, #20]
			HAL_NVIC_ClearPendingIRQ(TP_IRQn);
 8001eb6:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <TP_Task+0xb4>)
 8001eb8:	f993 3000 	ldrsb.w	r3, [r3]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f001 ff27 	bl	8003d10 <HAL_NVIC_ClearPendingIRQ>
		while(HAL_NVIC_GetPendingIRQ(TP_IRQn)) //czyszczenie wszystkich flag zwiazanych z tym przerwaniem (2 konkretnie)
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <TP_Task+0xb4>)
 8001ec4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f001 ff12 	bl	8003cf2 <HAL_NVIC_GetPendingIRQ>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1ed      	bne.n	8001eb0 <TP_Task+0x60>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001ed4:	2006      	movs	r0, #6
 8001ed6:	f001 fee4 	bl	8003ca2 <HAL_NVIC_EnableIRQ>
		break;
 8001eda:	e000      	b.n	8001ede <TP_Task+0x8e>
		break;
 8001edc:	bf00      	nop
}
 8001ede:	bf00      	nop
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000340 	.word	0x20000340
 8001ee8:	40020800 	.word	0x40020800
 8001eec:	20000324 	.word	0x20000324
 8001ef0:	20000334 	.word	0x20000334
 8001ef4:	2000032c 	.word	0x2000032c
 8001ef8:	2000033e 	.word	0x2000033e
 8001efc:	2000033c 	.word	0x2000033c
 8001f00:	40013c00 	.word	0x40013c00
 8001f04:	20000328 	.word	0x20000328

08001f08 <TP_IRQ>:

void TP_IRQ(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001f0c:	2006      	movs	r0, #6
 8001f0e:	f001 fed6 	bl	8003cbe <HAL_NVIC_DisableIRQ>
	TouchState = TP_TOUCHED;
 8001f12:	4b02      	ldr	r3, [pc, #8]	; (8001f1c <TP_IRQ+0x14>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	701a      	strb	r2, [r3, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000340 	.word	0x20000340

08001f20 <TP_ADC_to_Pixels>:

*/
		/* Calibration */

void TP_ADC_to_Pixels(uint16_t *Xs, uint16_t *Ys)
{
 8001f20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f24:	b084      	sub	sp, #16
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	6039      	str	r1, [r7, #0]
	uint16_t Xp, Yp;
	//RAW ADC data
	Xp = (uint16_t) ((ReceiveBuffer[1] << 8) | (ReceiveBuffer[2]));
 8001f2c:	4b45      	ldr	r3, [pc, #276]	; (8002044 <TP_ADC_to_Pixels+0x124>)
 8001f2e:	785b      	ldrb	r3, [r3, #1]
 8001f30:	021b      	lsls	r3, r3, #8
 8001f32:	b21a      	sxth	r2, r3
 8001f34:	4b43      	ldr	r3, [pc, #268]	; (8002044 <TP_ADC_to_Pixels+0x124>)
 8001f36:	789b      	ldrb	r3, [r3, #2]
 8001f38:	b21b      	sxth	r3, r3
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	b21b      	sxth	r3, r3
 8001f3e:	81fb      	strh	r3, [r7, #14]
	Yp = (uint16_t) ((ReceiveBuffer[3] << 8) | (ReceiveBuffer[4]));
 8001f40:	4b40      	ldr	r3, [pc, #256]	; (8002044 <TP_ADC_to_Pixels+0x124>)
 8001f42:	78db      	ldrb	r3, [r3, #3]
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	b21a      	sxth	r2, r3
 8001f48:	4b3e      	ldr	r3, [pc, #248]	; (8002044 <TP_ADC_to_Pixels+0x124>)
 8001f4a:	791b      	ldrb	r3, [r3, #4]
 8001f4c:	b21b      	sxth	r3, r3
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	b21b      	sxth	r3, r3
 8001f52:	81bb      	strh	r3, [r7, #12]

	if(CalibrationMode == 0)
 8001f54:	4b3c      	ldr	r3, [pc, #240]	; (8002048 <TP_ADC_to_Pixels+0x128>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d16d      	bne.n	8002038 <TP_ADC_to_Pixels+0x118>
	{
		*Xs = CalibrationData.A_x * Xp + CalibrationData.B_x * Yp + CalibrationData.D_x;
 8001f5c:	4b3b      	ldr	r3, [pc, #236]	; (800204c <TP_ADC_to_Pixels+0x12c>)
 8001f5e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001f62:	89fb      	ldrh	r3, [r7, #14]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe fae5 	bl	8000534 <__aeabi_i2d>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4620      	mov	r0, r4
 8001f70:	4629      	mov	r1, r5
 8001f72:	f7fe fb49 	bl	8000608 <__aeabi_dmul>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4690      	mov	r8, r2
 8001f7c:	4699      	mov	r9, r3
 8001f7e:	4b33      	ldr	r3, [pc, #204]	; (800204c <TP_ADC_to_Pixels+0x12c>)
 8001f80:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001f84:	89bb      	ldrh	r3, [r7, #12]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe fad4 	bl	8000534 <__aeabi_i2d>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4620      	mov	r0, r4
 8001f92:	4629      	mov	r1, r5
 8001f94:	f7fe fb38 	bl	8000608 <__aeabi_dmul>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4640      	mov	r0, r8
 8001f9e:	4649      	mov	r1, r9
 8001fa0:	f7fe f97c 	bl	800029c <__adddf3>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4610      	mov	r0, r2
 8001faa:	4619      	mov	r1, r3
 8001fac:	4b27      	ldr	r3, [pc, #156]	; (800204c <TP_ADC_to_Pixels+0x12c>)
 8001fae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001fb2:	f7fe f973 	bl	800029c <__adddf3>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4610      	mov	r0, r2
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f7fe fdfb 	bl	8000bb8 <__aeabi_d2uiz>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	801a      	strh	r2, [r3, #0]
		*Ys = CalibrationData.A_y * Xp + CalibrationData.B_y * Yp + CalibrationData.D_y;
 8001fca:	4b20      	ldr	r3, [pc, #128]	; (800204c <TP_ADC_to_Pixels+0x12c>)
 8001fcc:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001fd0:	89fb      	ldrh	r3, [r7, #14]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe faae 	bl	8000534 <__aeabi_i2d>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4620      	mov	r0, r4
 8001fde:	4629      	mov	r1, r5
 8001fe0:	f7fe fb12 	bl	8000608 <__aeabi_dmul>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4690      	mov	r8, r2
 8001fea:	4699      	mov	r9, r3
 8001fec:	4b17      	ldr	r3, [pc, #92]	; (800204c <TP_ADC_to_Pixels+0x12c>)
 8001fee:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001ff2:	89bb      	ldrh	r3, [r7, #12]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fa9d 	bl	8000534 <__aeabi_i2d>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4620      	mov	r0, r4
 8002000:	4629      	mov	r1, r5
 8002002:	f7fe fb01 	bl	8000608 <__aeabi_dmul>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4640      	mov	r0, r8
 800200c:	4649      	mov	r1, r9
 800200e:	f7fe f945 	bl	800029c <__adddf3>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	4610      	mov	r0, r2
 8002018:	4619      	mov	r1, r3
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <TP_ADC_to_Pixels+0x12c>)
 800201c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002020:	f7fe f93c 	bl	800029c <__adddf3>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4610      	mov	r0, r2
 800202a:	4619      	mov	r1, r3
 800202c:	f7fe fdc4 	bl	8000bb8 <__aeabi_d2uiz>
 8002030:	4603      	mov	r3, r0
 8002032:	b29a      	uxth	r2, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	801a      	strh	r2, [r3, #0]
	}
	else;

}
 8002038:	bf00      	nop
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002042:	bf00      	nop
 8002044:	20000334 	.word	0x20000334
 8002048:	20000339 	.word	0x20000339
 800204c:	20000008 	.word	0x20000008

08002050 <TP_Is_Touched>:

uint8_t TP_Is_Touched(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
	if(TouchState == TP_TOUCHED)
 8002054:	4b06      	ldr	r3, [pc, #24]	; (8002070 <TP_Is_Touched+0x20>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b01      	cmp	r3, #1
 800205c:	d101      	bne.n	8002062 <TP_Is_Touched+0x12>
		return 1;
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <TP_Is_Touched+0x14>
	return 0;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	20000340 	.word	0x20000340

08002074 <TP_Get_Point>:

void TP_Get_Point(uint16_t *X, uint16_t *Y)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
	*X = TouchSamples[0];
 800207e:	4b07      	ldr	r3, [pc, #28]	; (800209c <TP_Get_Point+0x28>)
 8002080:	881a      	ldrh	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	801a      	strh	r2, [r3, #0]
	*Y = TouchSamples[1];
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <TP_Get_Point+0x28>)
 8002088:	885a      	ldrh	r2, [r3, #2]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	801a      	strh	r2, [r3, #0]
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	2000033c 	.word	0x2000033c

080020a0 <XPT2046_Init>:

void XPT2046_Init(SPI_HandleTypeDef *SPI, IRQn_Type TouchPanel_IRQn) // IRQn type - hardware interrupt number
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af02      	add	r7, sp, #8
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	70fb      	strb	r3, [r7, #3]
	TP_SPI = SPI;
 80020ac:	4a1e      	ldr	r2, [pc, #120]	; (8002128 <XPT2046_Init+0x88>)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6013      	str	r3, [r2, #0]
	TP_IRQn = TouchPanel_IRQn;
 80020b2:	4a1e      	ldr	r2, [pc, #120]	; (800212c <XPT2046_Init+0x8c>)
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	7013      	strb	r3, [r2, #0]
	TouchState = TP_IDLE;
 80020b8:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <XPT2046_Init+0x90>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	701a      	strb	r2, [r3, #0]
	//     (     X    )           (     Y 	 )
	// (000 10010)(000 00000) (000 11010)(000 00000) (00000000)
	//	SendBuffer
	// (    0    )(    1    ) (    2    )(    3    ) (    4   )

	ChannelSettingsX = 0b10010000;
 80020be:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <XPT2046_Init+0x94>)
 80020c0:	2290      	movs	r2, #144	; 0x90
 80020c2:	701a      	strb	r2, [r3, #0]
	ChannelSettingsY = 0b11010000;
 80020c4:	4b1c      	ldr	r3, [pc, #112]	; (8002138 <XPT2046_Init+0x98>)
 80020c6:	22d0      	movs	r2, #208	; 0xd0
 80020c8:	701a      	strb	r2, [r3, #0]

	SendBuffer[0] = 0x80; //clear settings in controller
 80020ca:	4b1c      	ldr	r3, [pc, #112]	; (800213c <XPT2046_Init+0x9c>)
 80020cc:	2280      	movs	r2, #128	; 0x80
 80020ce:	701a      	strb	r2, [r3, #0]
	HAL_SPI_TransmitReceive(TP_SPI, SendBuffer, ReceiveBuffer, 5, 1000); //Sendbuffer - CHN config, ReciveBuff - Raw data from ADC
 80020d0:	4b15      	ldr	r3, [pc, #84]	; (8002128 <XPT2046_Init+0x88>)
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	2305      	movs	r3, #5
 80020dc:	4a18      	ldr	r2, [pc, #96]	; (8002140 <XPT2046_Init+0xa0>)
 80020de:	4917      	ldr	r1, [pc, #92]	; (800213c <XPT2046_Init+0x9c>)
 80020e0:	f005 fadd 	bl	800769e <HAL_SPI_TransmitReceive>
	HAL_Delay(1);
 80020e4:	2001      	movs	r0, #1
 80020e6:	f001 fc5d 	bl	80039a4 <HAL_Delay>

	SendBuffer[0] = (ChannelSettingsX >> 3);
 80020ea:	4b12      	ldr	r3, [pc, #72]	; (8002134 <XPT2046_Init+0x94>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	08db      	lsrs	r3, r3, #3
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4b12      	ldr	r3, [pc, #72]	; (800213c <XPT2046_Init+0x9c>)
 80020f4:	701a      	strb	r2, [r3, #0]
	SendBuffer[1] = (ChannelSettingsX << 5);
 80020f6:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <XPT2046_Init+0x94>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	015b      	lsls	r3, r3, #5
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	4b0f      	ldr	r3, [pc, #60]	; (800213c <XPT2046_Init+0x9c>)
 8002100:	705a      	strb	r2, [r3, #1]
	SendBuffer[2] = (ChannelSettingsY >> 3);
 8002102:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <XPT2046_Init+0x98>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	08db      	lsrs	r3, r3, #3
 8002108:	b2da      	uxtb	r2, r3
 800210a:	4b0c      	ldr	r3, [pc, #48]	; (800213c <XPT2046_Init+0x9c>)
 800210c:	709a      	strb	r2, [r3, #2]
	SendBuffer[3] = (ChannelSettingsY << 5);
 800210e:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <XPT2046_Init+0x98>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	015b      	lsls	r3, r3, #5
 8002114:	b2da      	uxtb	r2, r3
 8002116:	4b09      	ldr	r3, [pc, #36]	; (800213c <XPT2046_Init+0x9c>)
 8002118:	70da      	strb	r2, [r3, #3]
	SendBuffer[4] = 0;
 800211a:	4b08      	ldr	r3, [pc, #32]	; (800213c <XPT2046_Init+0x9c>)
 800211c:	2200      	movs	r2, #0
 800211e:	711a      	strb	r2, [r3, #4]
}
 8002120:	bf00      	nop
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20000324 	.word	0x20000324
 800212c:	20000328 	.word	0x20000328
 8002130:	20000340 	.word	0x20000340
 8002134:	20000329 	.word	0x20000329
 8002138:	2000032a 	.word	0x2000032a
 800213c:	2000032c 	.word	0x2000032c
 8002140:	20000334 	.word	0x20000334

08002144 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	607b      	str	r3, [r7, #4]
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <MX_DMA_Init+0x4c>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	4a0f      	ldr	r2, [pc, #60]	; (8002190 <MX_DMA_Init+0x4c>)
 8002154:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002158:	6313      	str	r3, [r2, #48]	; 0x30
 800215a:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <MX_DMA_Init+0x4c>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002162:	607b      	str	r3, [r7, #4]
 8002164:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002166:	2200      	movs	r2, #0
 8002168:	2100      	movs	r1, #0
 800216a:	203b      	movs	r0, #59	; 0x3b
 800216c:	f001 fd7d 	bl	8003c6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002170:	203b      	movs	r0, #59	; 0x3b
 8002172:	f001 fd96 	bl	8003ca2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002176:	2200      	movs	r2, #0
 8002178:	2100      	movs	r1, #0
 800217a:	2045      	movs	r0, #69	; 0x45
 800217c:	f001 fd75 	bl	8003c6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002180:	2045      	movs	r0, #69	; 0x45
 8002182:	f001 fd8e 	bl	8003ca2 <HAL_NVIC_EnableIRQ>

}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40023800 	.word	0x40023800

08002194 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	; 0x28
 8002198:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219a:	f107 0314 	add.w	r3, r7, #20
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	609a      	str	r2, [r3, #8]
 80021a6:	60da      	str	r2, [r3, #12]
 80021a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	4b40      	ldr	r3, [pc, #256]	; (80022b0 <MX_GPIO_Init+0x11c>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a3f      	ldr	r2, [pc, #252]	; (80022b0 <MX_GPIO_Init+0x11c>)
 80021b4:	f043 0304 	orr.w	r3, r3, #4
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b3d      	ldr	r3, [pc, #244]	; (80022b0 <MX_GPIO_Init+0x11c>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0304 	and.w	r3, r3, #4
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	4b39      	ldr	r3, [pc, #228]	; (80022b0 <MX_GPIO_Init+0x11c>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	4a38      	ldr	r2, [pc, #224]	; (80022b0 <MX_GPIO_Init+0x11c>)
 80021d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d4:	6313      	str	r3, [r2, #48]	; 0x30
 80021d6:	4b36      	ldr	r3, [pc, #216]	; (80022b0 <MX_GPIO_Init+0x11c>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	4b32      	ldr	r3, [pc, #200]	; (80022b0 <MX_GPIO_Init+0x11c>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	4a31      	ldr	r2, [pc, #196]	; (80022b0 <MX_GPIO_Init+0x11c>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	6313      	str	r3, [r2, #48]	; 0x30
 80021f2:	4b2f      	ldr	r3, [pc, #188]	; (80022b0 <MX_GPIO_Init+0x11c>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	60bb      	str	r3, [r7, #8]
 80021fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	607b      	str	r3, [r7, #4]
 8002202:	4b2b      	ldr	r3, [pc, #172]	; (80022b0 <MX_GPIO_Init+0x11c>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a2a      	ldr	r2, [pc, #168]	; (80022b0 <MX_GPIO_Init+0x11c>)
 8002208:	f043 0302 	orr.w	r3, r3, #2
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b28      	ldr	r3, [pc, #160]	; (80022b0 <MX_GPIO_Init+0x11c>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	607b      	str	r3, [r7, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	603b      	str	r3, [r7, #0]
 800221e:	4b24      	ldr	r3, [pc, #144]	; (80022b0 <MX_GPIO_Init+0x11c>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	4a23      	ldr	r2, [pc, #140]	; (80022b0 <MX_GPIO_Init+0x11c>)
 8002224:	f043 0308 	orr.w	r3, r3, #8
 8002228:	6313      	str	r3, [r2, #48]	; 0x30
 800222a:	4b21      	ldr	r3, [pc, #132]	; (80022b0 <MX_GPIO_Init+0x11c>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	603b      	str	r3, [r7, #0]
 8002234:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_DC_RS_GPIO_Port, TFT_DC_RS_Pin, GPIO_PIN_RESET);
 8002236:	2200      	movs	r2, #0
 8002238:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800223c:	481d      	ldr	r0, [pc, #116]	; (80022b4 <MX_GPIO_Init+0x120>)
 800223e:	f002 faaf 	bl	80047a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_Reset_GPIO_Port, TFT_Reset_Pin, GPIO_PIN_RESET);
 8002242:	2200      	movs	r2, #0
 8002244:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002248:	481b      	ldr	r0, [pc, #108]	; (80022b8 <MX_GPIO_Init+0x124>)
 800224a:	f002 faa9 	bl	80047a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|TP_IRQ_Pin;
 800224e:	f242 0301 	movw	r3, #8193	; 0x2001
 8002252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002254:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002258:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800225e:	f107 0314 	add.w	r3, r7, #20
 8002262:	4619      	mov	r1, r3
 8002264:	4815      	ldr	r0, [pc, #84]	; (80022bc <MX_GPIO_Init+0x128>)
 8002266:	f002 f8ff 	bl	8004468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TFT_DC_RS_Pin;
 800226a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800226e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002270:	2301      	movs	r3, #1
 8002272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002278:	2300      	movs	r3, #0
 800227a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TFT_DC_RS_GPIO_Port, &GPIO_InitStruct);
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	4619      	mov	r1, r3
 8002282:	480c      	ldr	r0, [pc, #48]	; (80022b4 <MX_GPIO_Init+0x120>)
 8002284:	f002 f8f0 	bl	8004468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TFT_Reset_Pin;
 8002288:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800228c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228e:	2301      	movs	r3, #1
 8002290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002296:	2300      	movs	r3, #0
 8002298:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TFT_Reset_GPIO_Port, &GPIO_InitStruct);
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	4619      	mov	r1, r3
 80022a0:	4805      	ldr	r0, [pc, #20]	; (80022b8 <MX_GPIO_Init+0x124>)
 80022a2:	f002 f8e1 	bl	8004468 <HAL_GPIO_Init>

}
 80022a6:	bf00      	nop
 80022a8:	3728      	adds	r7, #40	; 0x28
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020000 	.word	0x40020000
 80022bc:	40020800 	.word	0x40020800

080022c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022c4:	4b12      	ldr	r3, [pc, #72]	; (8002310 <MX_I2C1_Init+0x50>)
 80022c6:	4a13      	ldr	r2, [pc, #76]	; (8002314 <MX_I2C1_Init+0x54>)
 80022c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80022ca:	4b11      	ldr	r3, [pc, #68]	; (8002310 <MX_I2C1_Init+0x50>)
 80022cc:	4a12      	ldr	r2, [pc, #72]	; (8002318 <MX_I2C1_Init+0x58>)
 80022ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022d0:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <MX_I2C1_Init+0x50>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80022d6:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <MX_I2C1_Init+0x50>)
 80022d8:	2200      	movs	r2, #0
 80022da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <MX_I2C1_Init+0x50>)
 80022de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022e4:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <MX_I2C1_Init+0x50>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <MX_I2C1_Init+0x50>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022f0:	4b07      	ldr	r3, [pc, #28]	; (8002310 <MX_I2C1_Init+0x50>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <MX_I2C1_Init+0x50>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022fc:	4804      	ldr	r0, [pc, #16]	; (8002310 <MX_I2C1_Init+0x50>)
 80022fe:	f002 fa81 	bl	8004804 <HAL_I2C_Init>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002308:	f000 feac 	bl	8003064 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800230c:	bf00      	nop
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20000344 	.word	0x20000344
 8002314:	40005400 	.word	0x40005400
 8002318:	000186a0 	.word	0x000186a0

0800231c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	; 0x28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a19      	ldr	r2, [pc, #100]	; (80023a0 <HAL_I2C_MspInit+0x84>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d12c      	bne.n	8002398 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <HAL_I2C_MspInit+0x88>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a17      	ldr	r2, [pc, #92]	; (80023a4 <HAL_I2C_MspInit+0x88>)
 8002348:	f043 0302 	orr.w	r3, r3, #2
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <HAL_I2C_MspInit+0x88>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800235a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800235e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002360:	2312      	movs	r3, #18
 8002362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002368:	2303      	movs	r3, #3
 800236a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800236c:	2304      	movs	r3, #4
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002370:	f107 0314 	add.w	r3, r7, #20
 8002374:	4619      	mov	r1, r3
 8002376:	480c      	ldr	r0, [pc, #48]	; (80023a8 <HAL_I2C_MspInit+0x8c>)
 8002378:	f002 f876 	bl	8004468 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800237c:	2300      	movs	r3, #0
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <HAL_I2C_MspInit+0x88>)
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	4a07      	ldr	r2, [pc, #28]	; (80023a4 <HAL_I2C_MspInit+0x88>)
 8002386:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800238a:	6413      	str	r3, [r2, #64]	; 0x40
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <HAL_I2C_MspInit+0x88>)
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002398:	bf00      	nop
 800239a:	3728      	adds	r7, #40	; 0x28
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40005400 	.word	0x40005400
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40020400 	.word	0x40020400

080023ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023b2:	f001 fa85 	bl	80038c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023b6:	f000 f925 	bl	8002604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023ba:	f7ff feeb 	bl	8002194 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80023be:	f001 f9e3 	bl	8003788 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80023c2:	f7ff ff7d 	bl	80022c0 <MX_I2C1_Init>
  MX_DMA_Init();
 80023c6:	f7ff febd 	bl	8002144 <MX_DMA_Init>
  MX_SPI2_Init();
 80023ca:	f000 ffb9 	bl	8003340 <MX_SPI2_Init>
  MX_SDIO_SD_Init();
 80023ce:	f000 fe4f 	bl	8003070 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80023d2:	f006 fcc5 	bl	8008d60 <MX_FATFS_Init>
  MX_SPI1_Init();
 80023d6:	f000 ff7d 	bl	80032d4 <MX_SPI1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80023da:	f000 f97b 	bl	80026d4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

	BMP280_Init(&hi2c1);
 80023de:	4874      	ldr	r0, [pc, #464]	; (80025b0 <main+0x204>)
 80023e0:	f7fe fff0 	bl	80013c4 <BMP280_Init>

	TFT_ILI9341_Init(&hspi1);
 80023e4:	4873      	ldr	r0, [pc, #460]	; (80025b4 <main+0x208>)
 80023e6:	f7ff fce7 	bl	8001db8 <TFT_ILI9341_Init>

	XPT2046_Init(&hspi2, EXTI0_IRQn);
 80023ea:	2106      	movs	r1, #6
 80023ec:	4872      	ldr	r0, [pc, #456]	; (80025b8 <main+0x20c>)
 80023ee:	f7ff fe57 	bl	80020a0 <XPT2046_Init>

	GFX_SetFont(font_8x5);
 80023f2:	4872      	ldr	r0, [pc, #456]	; (80025bc <main+0x210>)
 80023f4:	f7ff f874 	bl	80014e0 <GFX_SetFont>

	TFT_Clear_Screen(ILI9341_BLACK);
 80023f8:	2000      	movs	r0, #0
 80023fa:	f7ff fc29 	bl	8001c50 <TFT_Clear_Screen>

	Draw_Buttons();
 80023fe:	f000 fc73 	bl	8002ce8 <Draw_Buttons>

	Draw_Axes(); //draw Coordinate system 0 - T, 1 - P
 8002402:	f000 fd07 	bl	8002e14 <Draw_Axes>

	Timer_BMP = HAL_GetTick();
 8002406:	f001 fac1 	bl	800398c <HAL_GetTick>
 800240a:	4603      	mov	r3, r0
 800240c:	4a6c      	ldr	r2, [pc, #432]	; (80025c0 <main+0x214>)
 800240e:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
		TP_Task();
 8002410:	f7ff fd1e 	bl	8001e50 <TP_Task>
		if((HAL_GetTick() - Timer_BMP) > 1000)
 8002414:	f001 faba 	bl	800398c <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	4b69      	ldr	r3, [pc, #420]	; (80025c0 <main+0x214>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002424:	d906      	bls.n	8002434 <main+0x88>
		{
			Timer_BMP = HAL_GetTick();
 8002426:	f001 fab1 	bl	800398c <HAL_GetTick>
 800242a:	4603      	mov	r3, r0
 800242c:	4a64      	ldr	r2, [pc, #400]	; (80025c0 <main+0x214>)
 800242e:	6013      	str	r3, [r2, #0]
			Measurements();
 8002430:	f000 fda0 	bl	8002f74 <Measurements>
		}

		if(TP_Is_Touched())
 8002434:	f7ff fe0c 	bl	8002050 <TP_Is_Touched>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0e8      	beq.n	8002410 <main+0x64>
		{
			TP_Get_Point(&X, &Y);
 800243e:	4961      	ldr	r1, [pc, #388]	; (80025c4 <main+0x218>)
 8002440:	4861      	ldr	r0, [pc, #388]	; (80025c8 <main+0x21c>)
 8002442:	f7ff fe17 	bl	8002074 <TP_Get_Point>
			if((choice == 1) && ( ( (X > T_x-5) && (X < T_x + 20) ) && ( (Y > T_y-10) && (Y < T_y + 30) ) ) ) //Change axes from P to T
 8002446:	4b61      	ldr	r3, [pc, #388]	; (80025cc <main+0x220>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d141      	bne.n	80024d2 <main+0x126>
 800244e:	4b60      	ldr	r3, [pc, #384]	; (80025d0 <main+0x224>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	3b04      	subs	r3, #4
 8002454:	4a5c      	ldr	r2, [pc, #368]	; (80025c8 <main+0x21c>)
 8002456:	8812      	ldrh	r2, [r2, #0]
 8002458:	4293      	cmp	r3, r2
 800245a:	dc3a      	bgt.n	80024d2 <main+0x126>
 800245c:	4b5c      	ldr	r3, [pc, #368]	; (80025d0 <main+0x224>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	3313      	adds	r3, #19
 8002462:	4a59      	ldr	r2, [pc, #356]	; (80025c8 <main+0x21c>)
 8002464:	8812      	ldrh	r2, [r2, #0]
 8002466:	4293      	cmp	r3, r2
 8002468:	db33      	blt.n	80024d2 <main+0x126>
 800246a:	4b5a      	ldr	r3, [pc, #360]	; (80025d4 <main+0x228>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	3b09      	subs	r3, #9
 8002470:	4a54      	ldr	r2, [pc, #336]	; (80025c4 <main+0x218>)
 8002472:	8812      	ldrh	r2, [r2, #0]
 8002474:	4293      	cmp	r3, r2
 8002476:	dc2c      	bgt.n	80024d2 <main+0x126>
 8002478:	4b56      	ldr	r3, [pc, #344]	; (80025d4 <main+0x228>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	331d      	adds	r3, #29
 800247e:	4a51      	ldr	r2, [pc, #324]	; (80025c4 <main+0x218>)
 8002480:	8812      	ldrh	r2, [r2, #0]
 8002482:	4293      	cmp	r3, r2
 8002484:	db25      	blt.n	80024d2 <main+0x126>
			{
				choice = 0;
 8002486:	4b51      	ldr	r3, [pc, #324]	; (80025cc <main+0x220>)
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
				licznik = 0;
 800248c:	4b52      	ldr	r3, [pc, #328]	; (80025d8 <main+0x22c>)
 800248e:	2200      	movs	r2, #0
 8002490:	701a      	strb	r2, [r3, #0]
				save = 1;
 8002492:	4b52      	ldr	r3, [pc, #328]	; (80025dc <main+0x230>)
 8002494:	2201      	movs	r2, #1
 8002496:	701a      	strb	r2, [r3, #0]
				for(uint8_t i = 0; i < 11; i++)
 8002498:	2300      	movs	r3, #0
 800249a:	71fb      	strb	r3, [r7, #7]
 800249c:	e00e      	b.n	80024bc <main+0x110>
				{
					pomiary_P[i] = -1;
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	4a4f      	ldr	r2, [pc, #316]	; (80025e0 <main+0x234>)
 80024a2:	f04f 31ff 	mov.w	r1, #4294967295
 80024a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					RAW_P[i] = -1;
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	4a4d      	ldr	r2, [pc, #308]	; (80025e4 <main+0x238>)
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	4a4d      	ldr	r2, [pc, #308]	; (80025e8 <main+0x23c>)
 80024b4:	601a      	str	r2, [r3, #0]
				for(uint8_t i = 0; i < 11; i++)
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	3301      	adds	r3, #1
 80024ba:	71fb      	strb	r3, [r7, #7]
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	2b0a      	cmp	r3, #10
 80024c0:	d9ed      	bls.n	800249e <main+0xf2>
				}
				TFT_Clear_Screen(ILI9341_BLACK);
 80024c2:	2000      	movs	r0, #0
 80024c4:	f7ff fbc4 	bl	8001c50 <TFT_Clear_Screen>
				Draw_Buttons();
 80024c8:	f000 fc0e 	bl	8002ce8 <Draw_Buttons>
				Draw_Axes(); //draw Coordinate system 0 - T, 1 - P
 80024cc:	f000 fca2 	bl	8002e14 <Draw_Axes>
 80024d0:	e06c      	b.n	80025ac <main+0x200>
			}
			else if((choice == 0) && (((X > P_x-5) && (X < P_x+ 20 )) && ((Y > P_y -10) && (Y < P_y + 30 )))) //Change axes from T to P
 80024d2:	4b3e      	ldr	r3, [pc, #248]	; (80025cc <main+0x220>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d13e      	bne.n	8002558 <main+0x1ac>
 80024da:	4b44      	ldr	r3, [pc, #272]	; (80025ec <main+0x240>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	3b04      	subs	r3, #4
 80024e0:	4a39      	ldr	r2, [pc, #228]	; (80025c8 <main+0x21c>)
 80024e2:	8812      	ldrh	r2, [r2, #0]
 80024e4:	4293      	cmp	r3, r2
 80024e6:	dc37      	bgt.n	8002558 <main+0x1ac>
 80024e8:	4b40      	ldr	r3, [pc, #256]	; (80025ec <main+0x240>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	3313      	adds	r3, #19
 80024ee:	4a36      	ldr	r2, [pc, #216]	; (80025c8 <main+0x21c>)
 80024f0:	8812      	ldrh	r2, [r2, #0]
 80024f2:	4293      	cmp	r3, r2
 80024f4:	db30      	blt.n	8002558 <main+0x1ac>
 80024f6:	4b3e      	ldr	r3, [pc, #248]	; (80025f0 <main+0x244>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	3b09      	subs	r3, #9
 80024fc:	4a31      	ldr	r2, [pc, #196]	; (80025c4 <main+0x218>)
 80024fe:	8812      	ldrh	r2, [r2, #0]
 8002500:	4293      	cmp	r3, r2
 8002502:	dc29      	bgt.n	8002558 <main+0x1ac>
 8002504:	4b3a      	ldr	r3, [pc, #232]	; (80025f0 <main+0x244>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	331d      	adds	r3, #29
 800250a:	4a2e      	ldr	r2, [pc, #184]	; (80025c4 <main+0x218>)
 800250c:	8812      	ldrh	r2, [r2, #0]
 800250e:	4293      	cmp	r3, r2
 8002510:	db22      	blt.n	8002558 <main+0x1ac>
			{
				choice = 1;
 8002512:	4b2e      	ldr	r3, [pc, #184]	; (80025cc <main+0x220>)
 8002514:	2201      	movs	r2, #1
 8002516:	701a      	strb	r2, [r3, #0]
				licznik = 0;
 8002518:	4b2f      	ldr	r3, [pc, #188]	; (80025d8 <main+0x22c>)
 800251a:	2200      	movs	r2, #0
 800251c:	701a      	strb	r2, [r3, #0]
				save = 1;
 800251e:	4b2f      	ldr	r3, [pc, #188]	; (80025dc <main+0x230>)
 8002520:	2201      	movs	r2, #1
 8002522:	701a      	strb	r2, [r3, #0]
				for(uint8_t i = 0; i < 11; i++)
 8002524:	2300      	movs	r3, #0
 8002526:	71bb      	strb	r3, [r7, #6]
 8002528:	e00b      	b.n	8002542 <main+0x196>
				{
					pomiary_T[i] = -1;
 800252a:	79bb      	ldrb	r3, [r7, #6]
 800252c:	4a31      	ldr	r2, [pc, #196]	; (80025f4 <main+0x248>)
 800252e:	f04f 31ff 	mov.w	r1, #4294967295
 8002532:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					RAW_T[0] = -1;
 8002536:	4b30      	ldr	r3, [pc, #192]	; (80025f8 <main+0x24c>)
 8002538:	4a2b      	ldr	r2, [pc, #172]	; (80025e8 <main+0x23c>)
 800253a:	601a      	str	r2, [r3, #0]
				for(uint8_t i = 0; i < 11; i++)
 800253c:	79bb      	ldrb	r3, [r7, #6]
 800253e:	3301      	adds	r3, #1
 8002540:	71bb      	strb	r3, [r7, #6]
 8002542:	79bb      	ldrb	r3, [r7, #6]
 8002544:	2b0a      	cmp	r3, #10
 8002546:	d9f0      	bls.n	800252a <main+0x17e>
				}
				TFT_Clear_Screen(ILI9341_BLACK);
 8002548:	2000      	movs	r0, #0
 800254a:	f7ff fb81 	bl	8001c50 <TFT_Clear_Screen>
				Draw_Buttons();
 800254e:	f000 fbcb 	bl	8002ce8 <Draw_Buttons>
				Draw_Axes(); //draw Coordinate system 0 - T, 1 - P
 8002552:	f000 fc5f 	bl	8002e14 <Draw_Axes>
 8002556:	e029      	b.n	80025ac <main+0x200>
			}
			else if((save == 1) && ( ((X > S_x-5) && (X < S_x+ 20 )) && ((Y > S_y -10) && (Y < S_y + 30 )) ) ) //Save to file
 8002558:	4b20      	ldr	r3, [pc, #128]	; (80025dc <main+0x230>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b01      	cmp	r3, #1
 800255e:	f47f af57 	bne.w	8002410 <main+0x64>
 8002562:	4b26      	ldr	r3, [pc, #152]	; (80025fc <main+0x250>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	3b04      	subs	r3, #4
 8002568:	4a17      	ldr	r2, [pc, #92]	; (80025c8 <main+0x21c>)
 800256a:	8812      	ldrh	r2, [r2, #0]
 800256c:	4293      	cmp	r3, r2
 800256e:	f73f af4f 	bgt.w	8002410 <main+0x64>
 8002572:	4b22      	ldr	r3, [pc, #136]	; (80025fc <main+0x250>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	3313      	adds	r3, #19
 8002578:	4a13      	ldr	r2, [pc, #76]	; (80025c8 <main+0x21c>)
 800257a:	8812      	ldrh	r2, [r2, #0]
 800257c:	4293      	cmp	r3, r2
 800257e:	f6ff af47 	blt.w	8002410 <main+0x64>
 8002582:	4b1f      	ldr	r3, [pc, #124]	; (8002600 <main+0x254>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	3b09      	subs	r3, #9
 8002588:	4a0e      	ldr	r2, [pc, #56]	; (80025c4 <main+0x218>)
 800258a:	8812      	ldrh	r2, [r2, #0]
 800258c:	4293      	cmp	r3, r2
 800258e:	f73f af3f 	bgt.w	8002410 <main+0x64>
 8002592:	4b1b      	ldr	r3, [pc, #108]	; (8002600 <main+0x254>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	331d      	adds	r3, #29
 8002598:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <main+0x218>)
 800259a:	8812      	ldrh	r2, [r2, #0]
 800259c:	4293      	cmp	r3, r2
 800259e:	f6ff af37 	blt.w	8002410 <main+0x64>
			{
				save = 0;
 80025a2:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <main+0x230>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]
				Save_to_SD();
 80025a8:	f000 fa28 	bl	80029fc <Save_to_SD>
		TP_Task();
 80025ac:	e730      	b.n	8002410 <main+0x64>
 80025ae:	bf00      	nop
 80025b0:	20000344 	.word	0x20000344
 80025b4:	20000990 	.word	0x20000990
 80025b8:	200009e8 	.word	0x200009e8
 80025bc:	0800ea70 	.word	0x0800ea70
 80025c0:	200003a0 	.word	0x200003a0
 80025c4:	200003a8 	.word	0x200003a8
 80025c8:	200003a6 	.word	0x200003a6
 80025cc:	200000e8 	.word	0x200000e8
 80025d0:	200000ec 	.word	0x200000ec
 80025d4:	200000f0 	.word	0x200000f0
 80025d8:	200003a4 	.word	0x200003a4
 80025dc:	200000e9 	.word	0x200000e9
 80025e0:	20000064 	.word	0x20000064
 80025e4:	200000bc 	.word	0x200000bc
 80025e8:	bf800000 	.word	0xbf800000
 80025ec:	200000f4 	.word	0x200000f4
 80025f0:	200000f8 	.word	0x200000f8
 80025f4:	20000038 	.word	0x20000038
 80025f8:	20000090 	.word	0x20000090
 80025fc:	200000fc 	.word	0x200000fc
 8002600:	20000100 	.word	0x20000100

08002604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b094      	sub	sp, #80	; 0x50
 8002608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800260a:	f107 0320 	add.w	r3, r7, #32
 800260e:	2230      	movs	r2, #48	; 0x30
 8002610:	2100      	movs	r1, #0
 8002612:	4618      	mov	r0, r3
 8002614:	f009 fa56 	bl	800bac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002618:	f107 030c 	add.w	r3, r7, #12
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002628:	2300      	movs	r3, #0
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	4b27      	ldr	r3, [pc, #156]	; (80026cc <SystemClock_Config+0xc8>)
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	4a26      	ldr	r2, [pc, #152]	; (80026cc <SystemClock_Config+0xc8>)
 8002632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002636:	6413      	str	r3, [r2, #64]	; 0x40
 8002638:	4b24      	ldr	r3, [pc, #144]	; (80026cc <SystemClock_Config+0xc8>)
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002644:	2300      	movs	r3, #0
 8002646:	607b      	str	r3, [r7, #4]
 8002648:	4b21      	ldr	r3, [pc, #132]	; (80026d0 <SystemClock_Config+0xcc>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a20      	ldr	r2, [pc, #128]	; (80026d0 <SystemClock_Config+0xcc>)
 800264e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <SystemClock_Config+0xcc>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800265c:	607b      	str	r3, [r7, #4]
 800265e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002660:	2302      	movs	r3, #2
 8002662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002664:	2301      	movs	r3, #1
 8002666:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002668:	2310      	movs	r3, #16
 800266a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800266c:	2302      	movs	r3, #2
 800266e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002670:	2300      	movs	r3, #0
 8002672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002674:	2308      	movs	r3, #8
 8002676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002678:	2348      	movs	r3, #72	; 0x48
 800267a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800267c:	2302      	movs	r3, #2
 800267e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002680:	2303      	movs	r3, #3
 8002682:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002684:	f107 0320 	add.w	r3, r7, #32
 8002688:	4618      	mov	r0, r3
 800268a:	f003 f87b 	bl	8005784 <HAL_RCC_OscConfig>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002694:	f000 fce6 	bl	8003064 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002698:	230f      	movs	r3, #15
 800269a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800269c:	2302      	movs	r3, #2
 800269e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026ae:	f107 030c 	add.w	r3, r7, #12
 80026b2:	2102      	movs	r1, #2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f003 fadd 	bl	8005c74 <HAL_RCC_ClockConfig>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80026c0:	f000 fcd0 	bl	8003064 <Error_Handler>
  }
}
 80026c4:	bf00      	nop
 80026c6:	3750      	adds	r7, #80	; 0x50
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40007000 	.word	0x40007000

080026d4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80026d8:	2200      	movs	r2, #0
 80026da:	2100      	movs	r1, #0
 80026dc:	2006      	movs	r0, #6
 80026de:	f001 fac4 	bl	8003c6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80026e2:	2006      	movs	r0, #6
 80026e4:	f001 fadd 	bl	8003ca2 <HAL_NVIC_EnableIRQ>
}
 80026e8:	bf00      	nop
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) //obsluga przerwania
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TP_IRQ_Pin)
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d101      	bne.n	8002700 <HAL_GPIO_EXTI_Callback+0x14>
	{
		TP_IRQ();
 80026fc:	f7ff fc04 	bl	8001f08 <TP_IRQ>
	}
}
 8002700:	bf00      	nop
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <Move_to_Left_RAW>:

		/* Interface functions START */

static void Move_to_Left_RAW(float RAW[]) // e.g. value from RAW[2] goes to RAW[1] etc.
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 1; i < 11; i++)
 8002710:	2301      	movs	r3, #1
 8002712:	73fb      	strb	r3, [r7, #15]
 8002714:	e00f      	b.n	8002736 <Move_to_Left_RAW+0x2e>
	{
		RAW[i - 1] = RAW[i];
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	441a      	add	r2, r3
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002724:	3b01      	subs	r3, #1
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	440b      	add	r3, r1
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 1; i < 11; i++)
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	3301      	adds	r3, #1
 8002734:	73fb      	strb	r3, [r7, #15]
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	2b0a      	cmp	r3, #10
 800273a:	d9ec      	bls.n	8002716 <Move_to_Left_RAW+0xe>
	}
}
 800273c:	bf00      	nop
 800273e:	bf00      	nop
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <Move_to_Left>:

static void Move_to_Left(int pomiary[]) // e.g. value from pomiary[2] goes to RAW[1] etc.
{
 800274a:	b590      	push	{r4, r7, lr}
 800274c:	b089      	sub	sp, #36	; 0x24
 800274e:	af02      	add	r7, sp, #8
 8002750:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 1; i < 11; i++) //clear whole chart from display
 8002752:	2301      	movs	r3, #1
 8002754:	75fb      	strb	r3, [r7, #23]
 8002756:	e047      	b.n	80027e8 <Move_to_Left+0x9e>
	{
		int x_wid = 22; // 23
 8002758:	2316      	movs	r3, #22
 800275a:	613b      	str	r3, [r7, #16]
		int img_x = 50;  // beginning of the coordinate system 46
 800275c:	2332      	movs	r3, #50	; 0x32
 800275e:	60fb      	str	r3, [r7, #12]
		GFX_DrawLine(img_x + (i - 1) * x_wid, pomiary[i - 1], img_x + i * x_wid, pomiary[i], ILI9341_BLACK);
 8002760:	7dfb      	ldrb	r3, [r7, #23]
 8002762:	3b01      	subs	r3, #1
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	fb03 f202 	mul.w	r2, r3, r2
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	18d0      	adds	r0, r2, r3
 800276e:	7dfb      	ldrb	r3, [r7, #23]
 8002770:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002774:	3b01      	subs	r3, #1
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	4413      	add	r3, r2
 800277c:	6819      	ldr	r1, [r3, #0]
 800277e:	7dfb      	ldrb	r3, [r7, #23]
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	fb03 f202 	mul.w	r2, r3, r2
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	18d4      	adds	r4, r2, r3
 800278a:	7dfb      	ldrb	r3, [r7, #23]
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2200      	movs	r2, #0
 8002796:	9200      	str	r2, [sp, #0]
 8002798:	4622      	mov	r2, r4
 800279a:	f7ff f82f 	bl	80017fc <GFX_DrawLine>
		GFX_DrawCircle(img_x + (i - 1) * x_wid, pomiary[i - 1], 3, ILI9341_BLACK);
 800279e:	7dfb      	ldrb	r3, [r7, #23]
 80027a0:	3b01      	subs	r3, #1
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	fb03 f202 	mul.w	r2, r3, r2
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	18d0      	adds	r0, r2, r3
 80027ac:	7dfb      	ldrb	r3, [r7, #23]
 80027ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80027b2:	3b01      	subs	r3, #1
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	4413      	add	r3, r2
 80027ba:	6819      	ldr	r1, [r3, #0]
 80027bc:	2300      	movs	r3, #0
 80027be:	2203      	movs	r2, #3
 80027c0:	f7ff f8ae 	bl	8001920 <GFX_DrawCircle>
		GFX_DrawCircle(img_x + i * x_wid, pomiary[i], 3, ILI9341_BLACK);
 80027c4:	7dfb      	ldrb	r3, [r7, #23]
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	fb03 f202 	mul.w	r2, r3, r2
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	18d0      	adds	r0, r2, r3
 80027d0:	7dfb      	ldrb	r3, [r7, #23]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	4413      	add	r3, r2
 80027d8:	6819      	ldr	r1, [r3, #0]
 80027da:	2300      	movs	r3, #0
 80027dc:	2203      	movs	r2, #3
 80027de:	f7ff f89f 	bl	8001920 <GFX_DrawCircle>
	for(uint8_t i = 1; i < 11; i++) //clear whole chart from display
 80027e2:	7dfb      	ldrb	r3, [r7, #23]
 80027e4:	3301      	adds	r3, #1
 80027e6:	75fb      	strb	r3, [r7, #23]
 80027e8:	7dfb      	ldrb	r3, [r7, #23]
 80027ea:	2b0a      	cmp	r3, #10
 80027ec:	d9b4      	bls.n	8002758 <Move_to_Left+0xe>
	}
	GFX_DrawFastVLine(50, 10, 220, ILI9341_BLUE);
 80027ee:	231f      	movs	r3, #31
 80027f0:	22dc      	movs	r2, #220	; 0xdc
 80027f2:	210a      	movs	r1, #10
 80027f4:	2032      	movs	r0, #50	; 0x32
 80027f6:	f7fe ffd4 	bl	80017a2 <GFX_DrawFastVLine>
	GFX_DrawFastHLine(50, 230, 220, ILI9341_BLUE);
 80027fa:	231f      	movs	r3, #31
 80027fc:	22dc      	movs	r2, #220	; 0xdc
 80027fe:	21e6      	movs	r1, #230	; 0xe6
 8002800:	2032      	movs	r0, #50	; 0x32
 8002802:	f7fe ffe5 	bl	80017d0 <GFX_DrawFastHLine>
	for(uint8_t i = 1; i < 11; i++)
 8002806:	2301      	movs	r3, #1
 8002808:	75bb      	strb	r3, [r7, #22]
 800280a:	e00f      	b.n	800282c <Move_to_Left+0xe2>
	{
		pomiary[i - 1] = pomiary[i];
 800280c:	7dbb      	ldrb	r3, [r7, #22]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	441a      	add	r2, r3
 8002814:	7dbb      	ldrb	r3, [r7, #22]
 8002816:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800281a:	3b01      	subs	r3, #1
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	440b      	add	r3, r1
 8002822:	6812      	ldr	r2, [r2, #0]
 8002824:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 1; i < 11; i++)
 8002826:	7dbb      	ldrb	r3, [r7, #22]
 8002828:	3301      	adds	r3, #1
 800282a:	75bb      	strb	r3, [r7, #22]
 800282c:	7dbb      	ldrb	r3, [r7, #22]
 800282e:	2b0a      	cmp	r3, #10
 8002830:	d9ec      	bls.n	800280c <Move_to_Left+0xc2>
	}
}
 8002832:	bf00      	nop
 8002834:	bf00      	nop
 8002836:	371c      	adds	r7, #28
 8002838:	46bd      	mov	sp, r7
 800283a:	bd90      	pop	{r4, r7, pc}
 800283c:	0000      	movs	r0, r0
	...

08002840 <Measurement_to_Pixel>:

static int Measurement_to_Pixel(float Measurement) //Converts measurement to corresponding number of pixels
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	ed87 0a01 	vstr	s0, [r7, #4]
	float Temp;

	switch(choice)
 800284a:	4b35      	ldr	r3, [pc, #212]	; (8002920 <Measurement_to_Pixel+0xe0>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <Measurement_to_Pixel+0x18>
 8002852:	2b01      	cmp	r3, #1
 8002854:	d01a      	beq.n	800288c <Measurement_to_Pixel+0x4c>
 8002856:	e032      	b.n	80028be <Measurement_to_Pixel+0x7e>
	{
	case 0:
		Temp = -5.5 * Measurement + 230; // Convert Temp value to pixels
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7fd fe7d 	bl	8000558 <__aeabi_f2d>
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	4b30      	ldr	r3, [pc, #192]	; (8002924 <Measurement_to_Pixel+0xe4>)
 8002864:	f7fd fed0 	bl	8000608 <__aeabi_dmul>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4610      	mov	r0, r2
 800286e:	4619      	mov	r1, r3
 8002870:	a325      	add	r3, pc, #148	; (adr r3, 8002908 <Measurement_to_Pixel+0xc8>)
 8002872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002876:	f7fd fd11 	bl	800029c <__adddf3>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	f7fe f9b9 	bl	8000bf8 <__aeabi_d2f>
 8002886:	4603      	mov	r3, r0
 8002888:	60fb      	str	r3, [r7, #12]
		break;
 800288a:	e018      	b.n	80028be <Measurement_to_Pixel+0x7e>
	case 1:
		Temp = -4.4 * Measurement + 4498; // Convert Pressure value to pixels
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7fd fe63 	bl	8000558 <__aeabi_f2d>
 8002892:	a31f      	add	r3, pc, #124	; (adr r3, 8002910 <Measurement_to_Pixel+0xd0>)
 8002894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002898:	f7fd feb6 	bl	8000608 <__aeabi_dmul>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4610      	mov	r0, r2
 80028a2:	4619      	mov	r1, r3
 80028a4:	a31c      	add	r3, pc, #112	; (adr r3, 8002918 <Measurement_to_Pixel+0xd8>)
 80028a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028aa:	f7fd fcf7 	bl	800029c <__adddf3>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4610      	mov	r0, r2
 80028b4:	4619      	mov	r1, r3
 80028b6:	f7fe f99f 	bl	8000bf8 <__aeabi_d2f>
 80028ba:	4603      	mov	r3, r0
 80028bc:	60fb      	str	r3, [r7, #12]
	}

	if(Temp > 230) //value went below 0 deg
 80028be:	edd7 7a03 	vldr	s15, [r7, #12]
 80028c2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002928 <Measurement_to_Pixel+0xe8>
 80028c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ce:	dd02      	ble.n	80028d6 <Measurement_to_Pixel+0x96>
	{
		Temp = 230;
 80028d0:	4b16      	ldr	r3, [pc, #88]	; (800292c <Measurement_to_Pixel+0xec>)
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	e00a      	b.n	80028ec <Measurement_to_Pixel+0xac>
	}
	else if(Temp < 10) //value exceeded 40 deg
 80028d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80028da:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80028de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e6:	d501      	bpl.n	80028ec <Measurement_to_Pixel+0xac>
	{
		Temp = 10;
 80028e8:	4b11      	ldr	r3, [pc, #68]	; (8002930 <Measurement_to_Pixel+0xf0>)
 80028ea:	60fb      	str	r3, [r7, #12]
	}
	return (int) roundf(Temp); //return rounded value as int
 80028ec:	ed97 0a03 	vldr	s0, [r7, #12]
 80028f0:	f00b ffd2 	bl	800e898 <roundf>
 80028f4:	eef0 7a40 	vmov.f32	s15, s0
 80028f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028fc:	ee17 3a90 	vmov	r3, s15
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	00000000 	.word	0x00000000
 800290c:	406cc000 	.word	0x406cc000
 8002910:	9999999a 	.word	0x9999999a
 8002914:	c0119999 	.word	0xc0119999
 8002918:	00000000 	.word	0x00000000
 800291c:	40b19200 	.word	0x40b19200
 8002920:	200000e8 	.word	0x200000e8
 8002924:	c0160000 	.word	0xc0160000
 8002928:	43660000 	.word	0x43660000
 800292c:	43660000 	.word	0x43660000
 8002930:	41200000 	.word	0x41200000

08002934 <Draw_Chart>:

static void Draw_Chart(int pomiary[]) //Draws whole plot
{
 8002934:	b590      	push	{r4, r7, lr}
 8002936:	b089      	sub	sp, #36	; 0x24
 8002938:	af02      	add	r7, sp, #8
 800293a:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 1; i < 11; i++)
 800293c:	2301      	movs	r3, #1
 800293e:	75fb      	strb	r3, [r7, #23]
 8002940:	e052      	b.n	80029e8 <Draw_Chart+0xb4>
	{
		if(pomiary[i] != -1) //used at the beginning, -1 means that its not measurement
 8002942:	7dfb      	ldrb	r3, [r7, #23]
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	4413      	add	r3, r2
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002950:	d04e      	beq.n	80029f0 <Draw_Chart+0xbc>
		{
			int x_wid = 22; // 23
 8002952:	2316      	movs	r3, #22
 8002954:	613b      	str	r3, [r7, #16]
			int img_x = 50;  // beginning of the coordinate system 46
 8002956:	2332      	movs	r3, #50	; 0x32
 8002958:	60fb      	str	r3, [r7, #12]
			GFX_DrawLine(img_x + (i - 1) * x_wid, pomiary[i - 1], img_x + i * x_wid, pomiary[i], ILI9341_RED);
 800295a:	7dfb      	ldrb	r3, [r7, #23]
 800295c:	3b01      	subs	r3, #1
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	fb03 f202 	mul.w	r2, r3, r2
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	18d0      	adds	r0, r2, r3
 8002968:	7dfb      	ldrb	r3, [r7, #23]
 800296a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800296e:	3b01      	subs	r3, #1
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	4413      	add	r3, r2
 8002976:	6819      	ldr	r1, [r3, #0]
 8002978:	7dfb      	ldrb	r3, [r7, #23]
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	fb03 f202 	mul.w	r2, r3, r2
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	18d4      	adds	r4, r2, r3
 8002984:	7dfb      	ldrb	r3, [r7, #23]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	4413      	add	r3, r2
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002992:	9200      	str	r2, [sp, #0]
 8002994:	4622      	mov	r2, r4
 8002996:	f7fe ff31 	bl	80017fc <GFX_DrawLine>
			GFX_DrawCircle(img_x + (i - 1) * x_wid, pomiary[i - 1], 3, ILI9341_WHITE);
 800299a:	7dfb      	ldrb	r3, [r7, #23]
 800299c:	3b01      	subs	r3, #1
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	fb03 f202 	mul.w	r2, r3, r2
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	18d0      	adds	r0, r2, r3
 80029a8:	7dfb      	ldrb	r3, [r7, #23]
 80029aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029ae:	3b01      	subs	r3, #1
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	4413      	add	r3, r2
 80029b6:	6819      	ldr	r1, [r3, #0]
 80029b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029bc:	2203      	movs	r2, #3
 80029be:	f7fe ffaf 	bl	8001920 <GFX_DrawCircle>
			GFX_DrawCircle(img_x + i * x_wid, pomiary[i], 3, ILI9341_WHITE);
 80029c2:	7dfb      	ldrb	r3, [r7, #23]
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	fb03 f202 	mul.w	r2, r3, r2
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	18d0      	adds	r0, r2, r3
 80029ce:	7dfb      	ldrb	r3, [r7, #23]
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	4413      	add	r3, r2
 80029d6:	6819      	ldr	r1, [r3, #0]
 80029d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029dc:	2203      	movs	r2, #3
 80029de:	f7fe ff9f 	bl	8001920 <GFX_DrawCircle>
	for(uint8_t i = 1; i < 11; i++)
 80029e2:	7dfb      	ldrb	r3, [r7, #23]
 80029e4:	3301      	adds	r3, #1
 80029e6:	75fb      	strb	r3, [r7, #23]
 80029e8:	7dfb      	ldrb	r3, [r7, #23]
 80029ea:	2b0a      	cmp	r3, #10
 80029ec:	d9a9      	bls.n	8002942 <Draw_Chart+0xe>
		else
		{
			break;
		}
	}
}
 80029ee:	e000      	b.n	80029f2 <Draw_Chart+0xbe>
			break;
 80029f0:	bf00      	nop
}
 80029f2:	bf00      	nop
 80029f4:	371c      	adds	r7, #28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd90      	pop	{r4, r7, pc}
	...

080029fc <Save_to_SD>:

void Save_to_SD(void) //Saves measurements to text files
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af02      	add	r7, sp, #8
	Result = f_mount(&SD_FATFS, "", 1);
 8002a02:	2201      	movs	r2, #1
 8002a04:	49a1      	ldr	r1, [pc, #644]	; (8002c8c <Save_to_SD+0x290>)
 8002a06:	48a2      	ldr	r0, [pc, #648]	; (8002c90 <Save_to_SD+0x294>)
 8002a08:	f008 f920 	bl	800ac4c <f_mount>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	461a      	mov	r2, r3
 8002a10:	4ba0      	ldr	r3, [pc, #640]	; (8002c94 <Save_to_SD+0x298>)
 8002a12:	701a      	strb	r2, [r3, #0]

	if(Result != FR_OK)
 8002a14:	4b9f      	ldr	r3, [pc, #636]	; (8002c94 <Save_to_SD+0x298>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d011      	beq.n	8002a40 <Save_to_SD+0x44>
	{
		Size = sprintf(data, "Mount error \n\r");
 8002a1c:	499e      	ldr	r1, [pc, #632]	; (8002c98 <Save_to_SD+0x29c>)
 8002a1e:	489f      	ldr	r0, [pc, #636]	; (8002c9c <Save_to_SD+0x2a0>)
 8002a20:	f009 fcc2 	bl	800c3a8 <siprintf>
 8002a24:	4603      	mov	r3, r0
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	4b9d      	ldr	r3, [pc, #628]	; (8002ca0 <Save_to_SD+0x2a4>)
 8002a2a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) data, Size, 1000);
 8002a2c:	4b9c      	ldr	r3, [pc, #624]	; (8002ca0 <Save_to_SD+0x2a4>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a36:	4999      	ldr	r1, [pc, #612]	; (8002c9c <Save_to_SD+0x2a0>)
 8002a38:	489a      	ldr	r0, [pc, #616]	; (8002ca4 <Save_to_SD+0x2a8>)
 8002a3a:	f005 f8ea 	bl	8007c12 <HAL_UART_Transmit>
				GFX_DrawRectangle(S_x - 5, S_y-10, 20, 30, ILI9341_WHITE);
			}
		}

	}
}
 8002a3e:	e121      	b.n	8002c84 <Save_to_SD+0x288>
		Size = sprintf(data, "Mount correct  \n\r");
 8002a40:	4999      	ldr	r1, [pc, #612]	; (8002ca8 <Save_to_SD+0x2ac>)
 8002a42:	4896      	ldr	r0, [pc, #600]	; (8002c9c <Save_to_SD+0x2a0>)
 8002a44:	f009 fcb0 	bl	800c3a8 <siprintf>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	4b94      	ldr	r3, [pc, #592]	; (8002ca0 <Save_to_SD+0x2a4>)
 8002a4e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) data, Size, 1000);
 8002a50:	4b93      	ldr	r3, [pc, #588]	; (8002ca0 <Save_to_SD+0x2a4>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a5a:	4990      	ldr	r1, [pc, #576]	; (8002c9c <Save_to_SD+0x2a0>)
 8002a5c:	4891      	ldr	r0, [pc, #580]	; (8002ca4 <Save_to_SD+0x2a8>)
 8002a5e:	f005 f8d8 	bl	8007c12 <HAL_UART_Transmit>
		if(choice == 0)
 8002a62:	4b92      	ldr	r3, [pc, #584]	; (8002cac <Save_to_SD+0x2b0>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d109      	bne.n	8002a7e <Save_to_SD+0x82>
			Result = f_open(&SD_Card_File, "pomiar_T.txt", FA_WRITE | FA_CREATE_ALWAYS);
 8002a6a:	220a      	movs	r2, #10
 8002a6c:	4990      	ldr	r1, [pc, #576]	; (8002cb0 <Save_to_SD+0x2b4>)
 8002a6e:	4891      	ldr	r0, [pc, #580]	; (8002cb4 <Save_to_SD+0x2b8>)
 8002a70:	f008 f932 	bl	800acd8 <f_open>
 8002a74:	4603      	mov	r3, r0
 8002a76:	461a      	mov	r2, r3
 8002a78:	4b86      	ldr	r3, [pc, #536]	; (8002c94 <Save_to_SD+0x298>)
 8002a7a:	701a      	strb	r2, [r3, #0]
 8002a7c:	e008      	b.n	8002a90 <Save_to_SD+0x94>
			Result = f_open(&SD_Card_File, "pomiar_P.txt", FA_WRITE | FA_CREATE_ALWAYS);
 8002a7e:	220a      	movs	r2, #10
 8002a80:	498d      	ldr	r1, [pc, #564]	; (8002cb8 <Save_to_SD+0x2bc>)
 8002a82:	488c      	ldr	r0, [pc, #560]	; (8002cb4 <Save_to_SD+0x2b8>)
 8002a84:	f008 f928 	bl	800acd8 <f_open>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	4b81      	ldr	r3, [pc, #516]	; (8002c94 <Save_to_SD+0x298>)
 8002a8e:	701a      	strb	r2, [r3, #0]
		if(Result != FR_OK)
 8002a90:	4b80      	ldr	r3, [pc, #512]	; (8002c94 <Save_to_SD+0x298>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d011      	beq.n	8002abc <Save_to_SD+0xc0>
			Size = sprintf(data, "File open error \n\r");
 8002a98:	4988      	ldr	r1, [pc, #544]	; (8002cbc <Save_to_SD+0x2c0>)
 8002a9a:	4880      	ldr	r0, [pc, #512]	; (8002c9c <Save_to_SD+0x2a0>)
 8002a9c:	f009 fc84 	bl	800c3a8 <siprintf>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	4b7e      	ldr	r3, [pc, #504]	; (8002ca0 <Save_to_SD+0x2a4>)
 8002aa6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*) data, Size, 1000);
 8002aa8:	4b7d      	ldr	r3, [pc, #500]	; (8002ca0 <Save_to_SD+0x2a4>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ab2:	497a      	ldr	r1, [pc, #488]	; (8002c9c <Save_to_SD+0x2a0>)
 8002ab4:	487b      	ldr	r0, [pc, #492]	; (8002ca4 <Save_to_SD+0x2a8>)
 8002ab6:	f005 f8ac 	bl	8007c12 <HAL_UART_Transmit>
}
 8002aba:	e0e3      	b.n	8002c84 <Save_to_SD+0x288>
			Size = sprintf(data, "File opened \n\r");
 8002abc:	4980      	ldr	r1, [pc, #512]	; (8002cc0 <Save_to_SD+0x2c4>)
 8002abe:	4877      	ldr	r0, [pc, #476]	; (8002c9c <Save_to_SD+0x2a0>)
 8002ac0:	f009 fc72 	bl	800c3a8 <siprintf>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	4b75      	ldr	r3, [pc, #468]	; (8002ca0 <Save_to_SD+0x2a4>)
 8002aca:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*) data, Size, 1000);
 8002acc:	4b74      	ldr	r3, [pc, #464]	; (8002ca0 <Save_to_SD+0x2a4>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ad6:	4971      	ldr	r1, [pc, #452]	; (8002c9c <Save_to_SD+0x2a0>)
 8002ad8:	4872      	ldr	r0, [pc, #456]	; (8002ca4 <Save_to_SD+0x2a8>)
 8002ada:	f005 f89a 	bl	8007c12 <HAL_UART_Transmit>
			if(choice == 0)
 8002ade:	4b73      	ldr	r3, [pc, #460]	; (8002cac <Save_to_SD+0x2b0>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d11f      	bne.n	8002b26 <Save_to_SD+0x12a>
				for(uint8_t i = 0; i < 11; i++)
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	75fb      	strb	r3, [r7, #23]
 8002aea:	e018      	b.n	8002b1e <Save_to_SD+0x122>
					sprintf(str, "%.2f", RAW_T[i]);
 8002aec:	7dfb      	ldrb	r3, [r7, #23]
 8002aee:	4a75      	ldr	r2, [pc, #468]	; (8002cc4 <Save_to_SD+0x2c8>)
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fd fd2e 	bl	8000558 <__aeabi_f2d>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	f107 000c 	add.w	r0, r7, #12
 8002b04:	4970      	ldr	r1, [pc, #448]	; (8002cc8 <Save_to_SD+0x2cc>)
 8002b06:	f009 fc4f 	bl	800c3a8 <siprintf>
					f_printf(&SD_Card_File, " %s \n", str);
 8002b0a:	f107 030c 	add.w	r3, r7, #12
 8002b0e:	461a      	mov	r2, r3
 8002b10:	496e      	ldr	r1, [pc, #440]	; (8002ccc <Save_to_SD+0x2d0>)
 8002b12:	4868      	ldr	r0, [pc, #416]	; (8002cb4 <Save_to_SD+0x2b8>)
 8002b14:	f008 fd32 	bl	800b57c <f_printf>
				for(uint8_t i = 0; i < 11; i++)
 8002b18:	7dfb      	ldrb	r3, [r7, #23]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	75fb      	strb	r3, [r7, #23]
 8002b1e:	7dfb      	ldrb	r3, [r7, #23]
 8002b20:	2b0a      	cmp	r3, #10
 8002b22:	d9e3      	bls.n	8002aec <Save_to_SD+0xf0>
 8002b24:	e01c      	b.n	8002b60 <Save_to_SD+0x164>
				for(uint8_t i = 0; i < 11; i++)
 8002b26:	2300      	movs	r3, #0
 8002b28:	75bb      	strb	r3, [r7, #22]
 8002b2a:	e016      	b.n	8002b5a <Save_to_SD+0x15e>
					sprintf(str, "%.2f", RAW_P[i]);
 8002b2c:	7dbb      	ldrb	r3, [r7, #22]
 8002b2e:	4a68      	ldr	r2, [pc, #416]	; (8002cd0 <Save_to_SD+0x2d4>)
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fd fd0e 	bl	8000558 <__aeabi_f2d>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4638      	mov	r0, r7
 8002b42:	4961      	ldr	r1, [pc, #388]	; (8002cc8 <Save_to_SD+0x2cc>)
 8002b44:	f009 fc30 	bl	800c3a8 <siprintf>
					f_printf(&SD_Card_File, " %s \n", str);
 8002b48:	463b      	mov	r3, r7
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	495f      	ldr	r1, [pc, #380]	; (8002ccc <Save_to_SD+0x2d0>)
 8002b4e:	4859      	ldr	r0, [pc, #356]	; (8002cb4 <Save_to_SD+0x2b8>)
 8002b50:	f008 fd14 	bl	800b57c <f_printf>
				for(uint8_t i = 0; i < 11; i++)
 8002b54:	7dbb      	ldrb	r3, [r7, #22]
 8002b56:	3301      	adds	r3, #1
 8002b58:	75bb      	strb	r3, [r7, #22]
 8002b5a:	7dbb      	ldrb	r3, [r7, #22]
 8002b5c:	2b0a      	cmp	r3, #10
 8002b5e:	d9e5      	bls.n	8002b2c <Save_to_SD+0x130>
			Result = f_close(&SD_Card_File);
 8002b60:	4854      	ldr	r0, [pc, #336]	; (8002cb4 <Save_to_SD+0x2b8>)
 8002b62:	f008 fc6a 	bl	800b43a <f_close>
 8002b66:	4603      	mov	r3, r0
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4b4a      	ldr	r3, [pc, #296]	; (8002c94 <Save_to_SD+0x298>)
 8002b6c:	701a      	strb	r2, [r3, #0]
			if(Result != FR_OK)
 8002b6e:	4b49      	ldr	r3, [pc, #292]	; (8002c94 <Save_to_SD+0x298>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d043      	beq.n	8002bfe <Save_to_SD+0x202>
				Size = sprintf(data, "File close error \n\r");
 8002b76:	4957      	ldr	r1, [pc, #348]	; (8002cd4 <Save_to_SD+0x2d8>)
 8002b78:	4848      	ldr	r0, [pc, #288]	; (8002c9c <Save_to_SD+0x2a0>)
 8002b7a:	f009 fc15 	bl	800c3a8 <siprintf>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	4b47      	ldr	r3, [pc, #284]	; (8002ca0 <Save_to_SD+0x2a4>)
 8002b84:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) data, Size, 1000);
 8002b86:	4b46      	ldr	r3, [pc, #280]	; (8002ca0 <Save_to_SD+0x2a4>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b90:	4942      	ldr	r1, [pc, #264]	; (8002c9c <Save_to_SD+0x2a0>)
 8002b92:	4844      	ldr	r0, [pc, #272]	; (8002ca4 <Save_to_SD+0x2a8>)
 8002b94:	f005 f83d 	bl	8007c12 <HAL_UART_Transmit>
				GFX_DrawString(S_x, S_y, "S", ILI9341_GREEN);
 8002b98:	4b4f      	ldr	r3, [pc, #316]	; (8002cd8 <Save_to_SD+0x2dc>)
 8002b9a:	6818      	ldr	r0, [r3, #0]
 8002b9c:	4b4f      	ldr	r3, [pc, #316]	; (8002cdc <Save_to_SD+0x2e0>)
 8002b9e:	6819      	ldr	r1, [r3, #0]
 8002ba0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002ba4:	4a4e      	ldr	r2, [pc, #312]	; (8002ce0 <Save_to_SD+0x2e4>)
 8002ba6:	f7fe fd3d 	bl	8001624 <GFX_DrawString>
				GFX_DrawRectangle(S_x - 5, S_y-10, 20, 30, ILI9341_RED);
 8002baa:	4b4b      	ldr	r3, [pc, #300]	; (8002cd8 <Save_to_SD+0x2dc>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	1f58      	subs	r0, r3, #5
 8002bb0:	4b4a      	ldr	r3, [pc, #296]	; (8002cdc <Save_to_SD+0x2e0>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f1a3 010a 	sub.w	r1, r3, #10
 8002bb8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	231e      	movs	r3, #30
 8002bc0:	2214      	movs	r2, #20
 8002bc2:	f7fe fe5e 	bl	8001882 <GFX_DrawRectangle>
				HAL_Delay(1000);
 8002bc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bca:	f000 feeb 	bl	80039a4 <HAL_Delay>
				GFX_DrawString(S_x, S_y, "S", ILI9341_WHITE);
 8002bce:	4b42      	ldr	r3, [pc, #264]	; (8002cd8 <Save_to_SD+0x2dc>)
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	4b42      	ldr	r3, [pc, #264]	; (8002cdc <Save_to_SD+0x2e0>)
 8002bd4:	6819      	ldr	r1, [r3, #0]
 8002bd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bda:	4a41      	ldr	r2, [pc, #260]	; (8002ce0 <Save_to_SD+0x2e4>)
 8002bdc:	f7fe fd22 	bl	8001624 <GFX_DrawString>
				GFX_DrawRectangle(S_x - 5, S_y-10, 20, 30, ILI9341_WHITE);
 8002be0:	4b3d      	ldr	r3, [pc, #244]	; (8002cd8 <Save_to_SD+0x2dc>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	1f58      	subs	r0, r3, #5
 8002be6:	4b3d      	ldr	r3, [pc, #244]	; (8002cdc <Save_to_SD+0x2e0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f1a3 010a 	sub.w	r1, r3, #10
 8002bee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	231e      	movs	r3, #30
 8002bf6:	2214      	movs	r2, #20
 8002bf8:	f7fe fe43 	bl	8001882 <GFX_DrawRectangle>
}
 8002bfc:	e042      	b.n	8002c84 <Save_to_SD+0x288>
				Size = sprintf(data, "File closed \n\r");
 8002bfe:	4939      	ldr	r1, [pc, #228]	; (8002ce4 <Save_to_SD+0x2e8>)
 8002c00:	4826      	ldr	r0, [pc, #152]	; (8002c9c <Save_to_SD+0x2a0>)
 8002c02:	f009 fbd1 	bl	800c3a8 <siprintf>
 8002c06:	4603      	mov	r3, r0
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	4b25      	ldr	r3, [pc, #148]	; (8002ca0 <Save_to_SD+0x2a4>)
 8002c0c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) data, Size, 1000);
 8002c0e:	4b24      	ldr	r3, [pc, #144]	; (8002ca0 <Save_to_SD+0x2a4>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c18:	4920      	ldr	r1, [pc, #128]	; (8002c9c <Save_to_SD+0x2a0>)
 8002c1a:	4822      	ldr	r0, [pc, #136]	; (8002ca4 <Save_to_SD+0x2a8>)
 8002c1c:	f004 fff9 	bl	8007c12 <HAL_UART_Transmit>
				GFX_DrawString(S_x, S_y, "S", ILI9341_GREEN);
 8002c20:	4b2d      	ldr	r3, [pc, #180]	; (8002cd8 <Save_to_SD+0x2dc>)
 8002c22:	6818      	ldr	r0, [r3, #0]
 8002c24:	4b2d      	ldr	r3, [pc, #180]	; (8002cdc <Save_to_SD+0x2e0>)
 8002c26:	6819      	ldr	r1, [r3, #0]
 8002c28:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002c2c:	4a2c      	ldr	r2, [pc, #176]	; (8002ce0 <Save_to_SD+0x2e4>)
 8002c2e:	f7fe fcf9 	bl	8001624 <GFX_DrawString>
				GFX_DrawRectangle(S_x - 5, S_y-10, 20, 30, ILI9341_GREEN);
 8002c32:	4b29      	ldr	r3, [pc, #164]	; (8002cd8 <Save_to_SD+0x2dc>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	1f58      	subs	r0, r3, #5
 8002c38:	4b28      	ldr	r3, [pc, #160]	; (8002cdc <Save_to_SD+0x2e0>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f1a3 010a 	sub.w	r1, r3, #10
 8002c40:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	231e      	movs	r3, #30
 8002c48:	2214      	movs	r2, #20
 8002c4a:	f7fe fe1a 	bl	8001882 <GFX_DrawRectangle>
				HAL_Delay(1000);
 8002c4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c52:	f000 fea7 	bl	80039a4 <HAL_Delay>
				GFX_DrawString(S_x, S_y, "S", ILI9341_WHITE);
 8002c56:	4b20      	ldr	r3, [pc, #128]	; (8002cd8 <Save_to_SD+0x2dc>)
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	4b20      	ldr	r3, [pc, #128]	; (8002cdc <Save_to_SD+0x2e0>)
 8002c5c:	6819      	ldr	r1, [r3, #0]
 8002c5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c62:	4a1f      	ldr	r2, [pc, #124]	; (8002ce0 <Save_to_SD+0x2e4>)
 8002c64:	f7fe fcde 	bl	8001624 <GFX_DrawString>
				GFX_DrawRectangle(S_x - 5, S_y-10, 20, 30, ILI9341_WHITE);
 8002c68:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <Save_to_SD+0x2dc>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	1f58      	subs	r0, r3, #5
 8002c6e:	4b1b      	ldr	r3, [pc, #108]	; (8002cdc <Save_to_SD+0x2e0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f1a3 010a 	sub.w	r1, r3, #10
 8002c76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	231e      	movs	r3, #30
 8002c7e:	2214      	movs	r2, #20
 8002c80:	f7fe fdff 	bl	8001882 <GFX_DrawRectangle>
}
 8002c84:	bf00      	nop
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	0800e8f8 	.word	0x0800e8f8
 8002c90:	200003ac 	.word	0x200003ac
 8002c94:	200003aa 	.word	0x200003aa
 8002c98:	0800e8fc 	.word	0x0800e8fc
 8002c9c:	20000810 	.word	0x20000810
 8002ca0:	2000080c 	.word	0x2000080c
 8002ca4:	20000a44 	.word	0x20000a44
 8002ca8:	0800e90c 	.word	0x0800e90c
 8002cac:	200000e8 	.word	0x200000e8
 8002cb0:	0800e920 	.word	0x0800e920
 8002cb4:	200005dc 	.word	0x200005dc
 8002cb8:	0800e930 	.word	0x0800e930
 8002cbc:	0800e940 	.word	0x0800e940
 8002cc0:	0800e954 	.word	0x0800e954
 8002cc4:	20000090 	.word	0x20000090
 8002cc8:	0800e964 	.word	0x0800e964
 8002ccc:	0800e96c 	.word	0x0800e96c
 8002cd0:	200000bc 	.word	0x200000bc
 8002cd4:	0800e974 	.word	0x0800e974
 8002cd8:	200000fc 	.word	0x200000fc
 8002cdc:	20000100 	.word	0x20000100
 8002ce0:	0800e988 	.word	0x0800e988
 8002ce4:	0800e98c 	.word	0x0800e98c

08002ce8 <Draw_Buttons>:

void Draw_Buttons(void) //Draw used buttons
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af02      	add	r7, sp, #8
	switch(choice)
 8002cee:	4b3f      	ldr	r3, [pc, #252]	; (8002dec <Draw_Buttons+0x104>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <Draw_Buttons+0x14>
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d02f      	beq.n	8002d5a <Draw_Buttons+0x72>
 8002cfa:	e05d      	b.n	8002db8 <Draw_Buttons+0xd0>
	{
	case 0:
		GFX_DrawString(T_x, T_y, "T", ILI9341_GREEN);
 8002cfc:	4b3c      	ldr	r3, [pc, #240]	; (8002df0 <Draw_Buttons+0x108>)
 8002cfe:	6818      	ldr	r0, [r3, #0]
 8002d00:	4b3c      	ldr	r3, [pc, #240]	; (8002df4 <Draw_Buttons+0x10c>)
 8002d02:	6819      	ldr	r1, [r3, #0]
 8002d04:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002d08:	4a3b      	ldr	r2, [pc, #236]	; (8002df8 <Draw_Buttons+0x110>)
 8002d0a:	f7fe fc8b 	bl	8001624 <GFX_DrawString>
		GFX_DrawRectangle(T_x - 5, T_y-10, 20, 30, ILI9341_GREEN);
 8002d0e:	4b38      	ldr	r3, [pc, #224]	; (8002df0 <Draw_Buttons+0x108>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	1f58      	subs	r0, r3, #5
 8002d14:	4b37      	ldr	r3, [pc, #220]	; (8002df4 <Draw_Buttons+0x10c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f1a3 010a 	sub.w	r1, r3, #10
 8002d1c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	231e      	movs	r3, #30
 8002d24:	2214      	movs	r2, #20
 8002d26:	f7fe fdac 	bl	8001882 <GFX_DrawRectangle>
		GFX_DrawString(P_x, P_y, "P", ILI9341_WHITE);
 8002d2a:	4b34      	ldr	r3, [pc, #208]	; (8002dfc <Draw_Buttons+0x114>)
 8002d2c:	6818      	ldr	r0, [r3, #0]
 8002d2e:	4b34      	ldr	r3, [pc, #208]	; (8002e00 <Draw_Buttons+0x118>)
 8002d30:	6819      	ldr	r1, [r3, #0]
 8002d32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d36:	4a33      	ldr	r2, [pc, #204]	; (8002e04 <Draw_Buttons+0x11c>)
 8002d38:	f7fe fc74 	bl	8001624 <GFX_DrawString>
		GFX_DrawRectangle(P_x - 5, P_y-10, 20, 30, ILI9341_WHITE);
 8002d3c:	4b2f      	ldr	r3, [pc, #188]	; (8002dfc <Draw_Buttons+0x114>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	1f58      	subs	r0, r3, #5
 8002d42:	4b2f      	ldr	r3, [pc, #188]	; (8002e00 <Draw_Buttons+0x118>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f1a3 010a 	sub.w	r1, r3, #10
 8002d4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	231e      	movs	r3, #30
 8002d52:	2214      	movs	r2, #20
 8002d54:	f7fe fd95 	bl	8001882 <GFX_DrawRectangle>
		break;
 8002d58:	e02e      	b.n	8002db8 <Draw_Buttons+0xd0>
	case 1:
		GFX_DrawString(T_x, T_y, "T", ILI9341_WHITE);
 8002d5a:	4b25      	ldr	r3, [pc, #148]	; (8002df0 <Draw_Buttons+0x108>)
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	4b25      	ldr	r3, [pc, #148]	; (8002df4 <Draw_Buttons+0x10c>)
 8002d60:	6819      	ldr	r1, [r3, #0]
 8002d62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d66:	4a24      	ldr	r2, [pc, #144]	; (8002df8 <Draw_Buttons+0x110>)
 8002d68:	f7fe fc5c 	bl	8001624 <GFX_DrawString>
		GFX_DrawRectangle(T_x - 5, T_y-10, 20, 30, ILI9341_WHITE);
 8002d6c:	4b20      	ldr	r3, [pc, #128]	; (8002df0 <Draw_Buttons+0x108>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	1f58      	subs	r0, r3, #5
 8002d72:	4b20      	ldr	r3, [pc, #128]	; (8002df4 <Draw_Buttons+0x10c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f1a3 010a 	sub.w	r1, r3, #10
 8002d7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	231e      	movs	r3, #30
 8002d82:	2214      	movs	r2, #20
 8002d84:	f7fe fd7d 	bl	8001882 <GFX_DrawRectangle>
		GFX_DrawString(P_x, P_y, "P", ILI9341_GREEN);
 8002d88:	4b1c      	ldr	r3, [pc, #112]	; (8002dfc <Draw_Buttons+0x114>)
 8002d8a:	6818      	ldr	r0, [r3, #0]
 8002d8c:	4b1c      	ldr	r3, [pc, #112]	; (8002e00 <Draw_Buttons+0x118>)
 8002d8e:	6819      	ldr	r1, [r3, #0]
 8002d90:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002d94:	4a1b      	ldr	r2, [pc, #108]	; (8002e04 <Draw_Buttons+0x11c>)
 8002d96:	f7fe fc45 	bl	8001624 <GFX_DrawString>
		GFX_DrawRectangle(P_x - 5, P_y-10, 20, 30, ILI9341_GREEN);
 8002d9a:	4b18      	ldr	r3, [pc, #96]	; (8002dfc <Draw_Buttons+0x114>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	1f58      	subs	r0, r3, #5
 8002da0:	4b17      	ldr	r3, [pc, #92]	; (8002e00 <Draw_Buttons+0x118>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f1a3 010a 	sub.w	r1, r3, #10
 8002da8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	231e      	movs	r3, #30
 8002db0:	2214      	movs	r2, #20
 8002db2:	f7fe fd66 	bl	8001882 <GFX_DrawRectangle>
		break;
 8002db6:	bf00      	nop
	}
	GFX_DrawString(S_x, S_y, "S", ILI9341_WHITE);
 8002db8:	4b13      	ldr	r3, [pc, #76]	; (8002e08 <Draw_Buttons+0x120>)
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <Draw_Buttons+0x124>)
 8002dbe:	6819      	ldr	r1, [r3, #0]
 8002dc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dc4:	4a12      	ldr	r2, [pc, #72]	; (8002e10 <Draw_Buttons+0x128>)
 8002dc6:	f7fe fc2d 	bl	8001624 <GFX_DrawString>
	GFX_DrawRectangle(S_x - 5, S_y-10, 20, 30, ILI9341_WHITE);
 8002dca:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <Draw_Buttons+0x120>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	1f58      	subs	r0, r3, #5
 8002dd0:	4b0e      	ldr	r3, [pc, #56]	; (8002e0c <Draw_Buttons+0x124>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f1a3 010a 	sub.w	r1, r3, #10
 8002dd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	231e      	movs	r3, #30
 8002de0:	2214      	movs	r2, #20
 8002de2:	f7fe fd4e 	bl	8001882 <GFX_DrawRectangle>
}
 8002de6:	bf00      	nop
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	200000e8 	.word	0x200000e8
 8002df0:	200000ec 	.word	0x200000ec
 8002df4:	200000f0 	.word	0x200000f0
 8002df8:	0800e99c 	.word	0x0800e99c
 8002dfc:	200000f4 	.word	0x200000f4
 8002e00:	200000f8 	.word	0x200000f8
 8002e04:	0800e9a0 	.word	0x0800e9a0
 8002e08:	200000fc 	.word	0x200000fc
 8002e0c:	20000100 	.word	0x20000100
 8002e10:	0800e988 	.word	0x0800e988

08002e14 <Draw_Axes>:

void Draw_Axes(void) //Draw actually used coordinate system
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af00      	add	r7, sp, #0
	GFX_DrawFastVLine(50, 10, 220, ILI9341_BLUE);
 8002e1a:	231f      	movs	r3, #31
 8002e1c:	22dc      	movs	r2, #220	; 0xdc
 8002e1e:	210a      	movs	r1, #10
 8002e20:	2032      	movs	r0, #50	; 0x32
 8002e22:	f7fe fcbe 	bl	80017a2 <GFX_DrawFastVLine>
	GFX_DrawFastHLine(50, 230, 220, ILI9341_BLUE);
 8002e26:	231f      	movs	r3, #31
 8002e28:	22dc      	movs	r2, #220	; 0xdc
 8002e2a:	21e6      	movs	r1, #230	; 0xe6
 8002e2c:	2032      	movs	r0, #50	; 0x32
 8002e2e:	f7fe fccf 	bl	80017d0 <GFX_DrawFastHLine>
	GFX_SetFontSize(1);
 8002e32:	2001      	movs	r0, #1
 8002e34:	f7fe fb64 	bl	8001500 <GFX_SetFontSize>

	if(choice == 0) // Axes for T
 8002e38:	4b4a      	ldr	r3, [pc, #296]	; (8002f64 <Draw_Axes+0x150>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d146      	bne.n	8002ece <Draw_Axes+0xba>
	{
		uint8_t Temp_axe[6] = { 0, 8, 16, 24, 32, 40 };
 8002e40:	4a49      	ldr	r2, [pc, #292]	; (8002f68 <Draw_Axes+0x154>)
 8002e42:	f107 0314 	add.w	r3, r7, #20
 8002e46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e4a:	6018      	str	r0, [r3, #0]
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	8019      	strh	r1, [r3, #0]
		char str[2];

		for(uint8_t i = 0; i < 11; i++) // x axis
 8002e50:	2300      	movs	r3, #0
 8002e52:	77fb      	strb	r3, [r7, #31]
 8002e54:	e015      	b.n	8002e82 <Draw_Axes+0x6e>
		{
			sprintf(str, "%d", i);
 8002e56:	7ffa      	ldrb	r2, [r7, #31]
 8002e58:	f107 0310 	add.w	r3, r7, #16
 8002e5c:	4943      	ldr	r1, [pc, #268]	; (8002f6c <Draw_Axes+0x158>)
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f009 faa2 	bl	800c3a8 <siprintf>
			GFX_DrawString(48 + 22 * i, 232, str, ILI9341_BLUE);
 8002e64:	7ffb      	ldrb	r3, [r7, #31]
 8002e66:	2216      	movs	r2, #22
 8002e68:	fb02 f303 	mul.w	r3, r2, r3
 8002e6c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8002e70:	f107 0210 	add.w	r2, r7, #16
 8002e74:	231f      	movs	r3, #31
 8002e76:	21e8      	movs	r1, #232	; 0xe8
 8002e78:	f7fe fbd4 	bl	8001624 <GFX_DrawString>
		for(uint8_t i = 0; i < 11; i++) // x axis
 8002e7c:	7ffb      	ldrb	r3, [r7, #31]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	77fb      	strb	r3, [r7, #31]
 8002e82:	7ffb      	ldrb	r3, [r7, #31]
 8002e84:	2b0a      	cmp	r3, #10
 8002e86:	d9e6      	bls.n	8002e56 <Draw_Axes+0x42>
		}
		for(uint8_t i = 0; i < 6; i++) // y axis
 8002e88:	2300      	movs	r3, #0
 8002e8a:	77bb      	strb	r3, [r7, #30]
 8002e8c:	e01b      	b.n	8002ec6 <Draw_Axes+0xb2>
		{
			sprintf(str, "%d", Temp_axe[i]);
 8002e8e:	7fbb      	ldrb	r3, [r7, #30]
 8002e90:	3320      	adds	r3, #32
 8002e92:	443b      	add	r3, r7
 8002e94:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	f107 0310 	add.w	r3, r7, #16
 8002e9e:	4933      	ldr	r1, [pc, #204]	; (8002f6c <Draw_Axes+0x158>)
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f009 fa81 	bl	800c3a8 <siprintf>
			GFX_DrawString(35, 226 - i * 44, str, ILI9341_BLUE);
 8002ea6:	7fbb      	ldrb	r3, [r7, #30]
 8002ea8:	f06f 022b 	mvn.w	r2, #43	; 0x2b
 8002eac:	fb02 f303 	mul.w	r3, r2, r3
 8002eb0:	f103 01e2 	add.w	r1, r3, #226	; 0xe2
 8002eb4:	f107 0210 	add.w	r2, r7, #16
 8002eb8:	231f      	movs	r3, #31
 8002eba:	2023      	movs	r0, #35	; 0x23
 8002ebc:	f7fe fbb2 	bl	8001624 <GFX_DrawString>
		for(uint8_t i = 0; i < 6; i++) // y axis
 8002ec0:	7fbb      	ldrb	r3, [r7, #30]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	77bb      	strb	r3, [r7, #30]
 8002ec6:	7fbb      	ldrb	r3, [r7, #30]
 8002ec8:	2b05      	cmp	r3, #5
 8002eca:	d9e0      	bls.n	8002e8e <Draw_Axes+0x7a>
 8002ecc:	e043      	b.n	8002f56 <Draw_Axes+0x142>
		}
	}
	else if(choice == 1) // Axes for P
 8002ece:	4b25      	ldr	r3, [pc, #148]	; (8002f64 <Draw_Axes+0x150>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d13f      	bne.n	8002f56 <Draw_Axes+0x142>
	{
		uint16_t Press_axe[6] = { 970, 980, 990, 1000, 1010, 1020 };
 8002ed6:	4a26      	ldr	r2, [pc, #152]	; (8002f70 <Draw_Axes+0x15c>)
 8002ed8:	1d3b      	adds	r3, r7, #4
 8002eda:	ca07      	ldmia	r2, {r0, r1, r2}
 8002edc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		char str[4];

		for(uint8_t i = 0; i < 11; i++) // x axis
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	777b      	strb	r3, [r7, #29]
 8002ee4:	e013      	b.n	8002f0e <Draw_Axes+0xfa>
		{
			sprintf(str, "%d", i);
 8002ee6:	7f7a      	ldrb	r2, [r7, #29]
 8002ee8:	463b      	mov	r3, r7
 8002eea:	4920      	ldr	r1, [pc, #128]	; (8002f6c <Draw_Axes+0x158>)
 8002eec:	4618      	mov	r0, r3
 8002eee:	f009 fa5b 	bl	800c3a8 <siprintf>
			GFX_DrawString(48 + 22 * i, 232, str, ILI9341_BLUE);
 8002ef2:	7f7b      	ldrb	r3, [r7, #29]
 8002ef4:	2216      	movs	r2, #22
 8002ef6:	fb02 f303 	mul.w	r3, r2, r3
 8002efa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8002efe:	463a      	mov	r2, r7
 8002f00:	231f      	movs	r3, #31
 8002f02:	21e8      	movs	r1, #232	; 0xe8
 8002f04:	f7fe fb8e 	bl	8001624 <GFX_DrawString>
		for(uint8_t i = 0; i < 11; i++) // x axis
 8002f08:	7f7b      	ldrb	r3, [r7, #29]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	777b      	strb	r3, [r7, #29]
 8002f0e:	7f7b      	ldrb	r3, [r7, #29]
 8002f10:	2b0a      	cmp	r3, #10
 8002f12:	d9e8      	bls.n	8002ee6 <Draw_Axes+0xd2>
		}
		for(uint8_t i = 0; i < 6; i++) // y axis
 8002f14:	2300      	movs	r3, #0
 8002f16:	773b      	strb	r3, [r7, #28]
 8002f18:	e01a      	b.n	8002f50 <Draw_Axes+0x13c>
		{
			sprintf(str, "%d", Press_axe[i]);
 8002f1a:	7f3b      	ldrb	r3, [r7, #28]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	3320      	adds	r3, #32
 8002f20:	443b      	add	r3, r7
 8002f22:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8002f26:	461a      	mov	r2, r3
 8002f28:	463b      	mov	r3, r7
 8002f2a:	4910      	ldr	r1, [pc, #64]	; (8002f6c <Draw_Axes+0x158>)
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f009 fa3b 	bl	800c3a8 <siprintf>
			GFX_DrawString(25, 226 - i * 44, str, ILI9341_BLUE);
 8002f32:	7f3b      	ldrb	r3, [r7, #28]
 8002f34:	f06f 022b 	mvn.w	r2, #43	; 0x2b
 8002f38:	fb02 f303 	mul.w	r3, r2, r3
 8002f3c:	f103 01e2 	add.w	r1, r3, #226	; 0xe2
 8002f40:	463a      	mov	r2, r7
 8002f42:	231f      	movs	r3, #31
 8002f44:	2019      	movs	r0, #25
 8002f46:	f7fe fb6d 	bl	8001624 <GFX_DrawString>
		for(uint8_t i = 0; i < 6; i++) // y axis
 8002f4a:	7f3b      	ldrb	r3, [r7, #28]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	773b      	strb	r3, [r7, #28]
 8002f50:	7f3b      	ldrb	r3, [r7, #28]
 8002f52:	2b05      	cmp	r3, #5
 8002f54:	d9e1      	bls.n	8002f1a <Draw_Axes+0x106>
		}
	}
	GFX_SetFontSize(2);
 8002f56:	2002      	movs	r0, #2
 8002f58:	f7fe fad2 	bl	8001500 <GFX_SetFontSize>
}
 8002f5c:	bf00      	nop
 8002f5e:	3720      	adds	r7, #32
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	200000e8 	.word	0x200000e8
 8002f68:	0800e9a8 	.word	0x0800e9a8
 8002f6c:	0800e9a4 	.word	0x0800e9a4
 8002f70:	0800e9b0 	.word	0x0800e9b0

08002f74 <Measurements>:

void Measurements(void) // Manage whole process of measuring, processing and drawing
{
 8002f74:	b598      	push	{r3, r4, r7, lr}
 8002f76:	af00      	add	r7, sp, #0
	BMP280_ReadPressureTemp(&P, &T);
 8002f78:	4932      	ldr	r1, [pc, #200]	; (8003044 <Measurements+0xd0>)
 8002f7a:	4833      	ldr	r0, [pc, #204]	; (8003048 <Measurements+0xd4>)
 8002f7c:	f7fe f952 	bl	8001224 <BMP280_ReadPressureTemp>
	if(licznik >= 11)
 8002f80:	4b32      	ldr	r3, [pc, #200]	; (800304c <Measurements+0xd8>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b0a      	cmp	r3, #10
 8002f86:	d917      	bls.n	8002fb8 <Measurements+0x44>
	{
		switch(choice)
 8002f88:	4b31      	ldr	r3, [pc, #196]	; (8003050 <Measurements+0xdc>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <Measurements+0x22>
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d007      	beq.n	8002fa4 <Measurements+0x30>
 8002f94:	e00d      	b.n	8002fb2 <Measurements+0x3e>
		{
		case 0:
			Move_to_Left(pomiary_T);
 8002f96:	482f      	ldr	r0, [pc, #188]	; (8003054 <Measurements+0xe0>)
 8002f98:	f7ff fbd7 	bl	800274a <Move_to_Left>
			Move_to_Left_RAW(RAW_T);
 8002f9c:	482e      	ldr	r0, [pc, #184]	; (8003058 <Measurements+0xe4>)
 8002f9e:	f7ff fbb3 	bl	8002708 <Move_to_Left_RAW>
			break;
 8002fa2:	e006      	b.n	8002fb2 <Measurements+0x3e>
		case 1:
			Move_to_Left(pomiary_P);
 8002fa4:	482d      	ldr	r0, [pc, #180]	; (800305c <Measurements+0xe8>)
 8002fa6:	f7ff fbd0 	bl	800274a <Move_to_Left>
			Move_to_Left_RAW(RAW_P);
 8002faa:	482d      	ldr	r0, [pc, #180]	; (8003060 <Measurements+0xec>)
 8002fac:	f7ff fbac 	bl	8002708 <Move_to_Left_RAW>
			break;
 8002fb0:	bf00      	nop
		}
		licznik = 10;
 8002fb2:	4b26      	ldr	r3, [pc, #152]	; (800304c <Measurements+0xd8>)
 8002fb4:	220a      	movs	r2, #10
 8002fb6:	701a      	strb	r2, [r3, #0]
	}
	switch(choice)
 8002fb8:	4b25      	ldr	r3, [pc, #148]	; (8003050 <Measurements+0xdc>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d002      	beq.n	8002fc6 <Measurements+0x52>
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d01b      	beq.n	8002ffc <Measurements+0x88>
 8002fc4:	e035      	b.n	8003032 <Measurements+0xbe>
	{
	case 0:
		pomiary_T[licznik] = Measurement_to_Pixel(T);
 8002fc6:	4b1f      	ldr	r3, [pc, #124]	; (8003044 <Measurements+0xd0>)
 8002fc8:	edd3 7a00 	vldr	s15, [r3]
 8002fcc:	4b1f      	ldr	r3, [pc, #124]	; (800304c <Measurements+0xd8>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	461c      	mov	r4, r3
 8002fd2:	eeb0 0a67 	vmov.f32	s0, s15
 8002fd6:	f7ff fc33 	bl	8002840 <Measurement_to_Pixel>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	4a1d      	ldr	r2, [pc, #116]	; (8003054 <Measurements+0xe0>)
 8002fde:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		RAW_T[licznik] = T;
 8002fe2:	4b1a      	ldr	r3, [pc, #104]	; (800304c <Measurements+0xd8>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	4b16      	ldr	r3, [pc, #88]	; (8003044 <Measurements+0xd0>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	491a      	ldr	r1, [pc, #104]	; (8003058 <Measurements+0xe4>)
 8002fee:	0083      	lsls	r3, r0, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	601a      	str	r2, [r3, #0]
		Draw_Chart(pomiary_T);
 8002ff4:	4817      	ldr	r0, [pc, #92]	; (8003054 <Measurements+0xe0>)
 8002ff6:	f7ff fc9d 	bl	8002934 <Draw_Chart>
		break;
 8002ffa:	e01a      	b.n	8003032 <Measurements+0xbe>
	case 1:
		pomiary_P[licznik] = Measurement_to_Pixel(P);
 8002ffc:	4b12      	ldr	r3, [pc, #72]	; (8003048 <Measurements+0xd4>)
 8002ffe:	edd3 7a00 	vldr	s15, [r3]
 8003002:	4b12      	ldr	r3, [pc, #72]	; (800304c <Measurements+0xd8>)
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	461c      	mov	r4, r3
 8003008:	eeb0 0a67 	vmov.f32	s0, s15
 800300c:	f7ff fc18 	bl	8002840 <Measurement_to_Pixel>
 8003010:	4603      	mov	r3, r0
 8003012:	4a12      	ldr	r2, [pc, #72]	; (800305c <Measurements+0xe8>)
 8003014:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		RAW_P[licznik] = P;
 8003018:	4b0c      	ldr	r3, [pc, #48]	; (800304c <Measurements+0xd8>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <Measurements+0xd4>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	490f      	ldr	r1, [pc, #60]	; (8003060 <Measurements+0xec>)
 8003024:	0083      	lsls	r3, r0, #2
 8003026:	440b      	add	r3, r1
 8003028:	601a      	str	r2, [r3, #0]
		Draw_Chart(pomiary_P);
 800302a:	480c      	ldr	r0, [pc, #48]	; (800305c <Measurements+0xe8>)
 800302c:	f7ff fc82 	bl	8002934 <Draw_Chart>
		break;
 8003030:	bf00      	nop
	}
	licznik++;
 8003032:	4b06      	ldr	r3, [pc, #24]	; (800304c <Measurements+0xd8>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	3301      	adds	r3, #1
 8003038:	b2da      	uxtb	r2, r3
 800303a:	4b04      	ldr	r3, [pc, #16]	; (800304c <Measurements+0xd8>)
 800303c:	701a      	strb	r2, [r3, #0]

}
 800303e:	bf00      	nop
 8003040:	bd98      	pop	{r3, r4, r7, pc}
 8003042:	bf00      	nop
 8003044:	20000398 	.word	0x20000398
 8003048:	2000039c 	.word	0x2000039c
 800304c:	200003a4 	.word	0x200003a4
 8003050:	200000e8 	.word	0x200000e8
 8003054:	20000038 	.word	0x20000038
 8003058:	20000090 	.word	0x20000090
 800305c:	20000064 	.word	0x20000064
 8003060:	200000bc 	.word	0x200000bc

08003064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003068:	b672      	cpsid	i
}
 800306a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while(1)
 800306c:	e7fe      	b.n	800306c <Error_Handler+0x8>
	...

08003070 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003074:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <MX_SDIO_SD_Init+0x38>)
 8003076:	4a0d      	ldr	r2, [pc, #52]	; (80030ac <MX_SDIO_SD_Init+0x3c>)
 8003078:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800307a:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <MX_SDIO_SD_Init+0x38>)
 800307c:	2200      	movs	r2, #0
 800307e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003080:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <MX_SDIO_SD_Init+0x38>)
 8003082:	2200      	movs	r2, #0
 8003084:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003086:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <MX_SDIO_SD_Init+0x38>)
 8003088:	2200      	movs	r2, #0
 800308a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <MX_SDIO_SD_Init+0x38>)
 800308e:	2200      	movs	r2, #0
 8003090:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003092:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <MX_SDIO_SD_Init+0x38>)
 8003094:	2200      	movs	r2, #0
 8003096:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 6;
 8003098:	4b03      	ldr	r3, [pc, #12]	; (80030a8 <MX_SDIO_SD_Init+0x38>)
 800309a:	2206      	movs	r2, #6
 800309c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800309e:	bf00      	nop
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	2000084c 	.word	0x2000084c
 80030ac:	40012c00 	.word	0x40012c00

080030b0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08c      	sub	sp, #48	; 0x30
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b8:	f107 031c 	add.w	r3, r7, #28
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	605a      	str	r2, [r3, #4]
 80030c2:	609a      	str	r2, [r3, #8]
 80030c4:	60da      	str	r2, [r3, #12]
 80030c6:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a78      	ldr	r2, [pc, #480]	; (80032b0 <HAL_SD_MspInit+0x200>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	f040 80ea 	bne.w	80032a8 <HAL_SD_MspInit+0x1f8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80030d4:	2300      	movs	r3, #0
 80030d6:	61bb      	str	r3, [r7, #24]
 80030d8:	4b76      	ldr	r3, [pc, #472]	; (80032b4 <HAL_SD_MspInit+0x204>)
 80030da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030dc:	4a75      	ldr	r2, [pc, #468]	; (80032b4 <HAL_SD_MspInit+0x204>)
 80030de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030e2:	6453      	str	r3, [r2, #68]	; 0x44
 80030e4:	4b73      	ldr	r3, [pc, #460]	; (80032b4 <HAL_SD_MspInit+0x204>)
 80030e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ec:	61bb      	str	r3, [r7, #24]
 80030ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	4b6f      	ldr	r3, [pc, #444]	; (80032b4 <HAL_SD_MspInit+0x204>)
 80030f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f8:	4a6e      	ldr	r2, [pc, #440]	; (80032b4 <HAL_SD_MspInit+0x204>)
 80030fa:	f043 0302 	orr.w	r3, r3, #2
 80030fe:	6313      	str	r3, [r2, #48]	; 0x30
 8003100:	4b6c      	ldr	r3, [pc, #432]	; (80032b4 <HAL_SD_MspInit+0x204>)
 8003102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800310c:	2300      	movs	r3, #0
 800310e:	613b      	str	r3, [r7, #16]
 8003110:	4b68      	ldr	r3, [pc, #416]	; (80032b4 <HAL_SD_MspInit+0x204>)
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	4a67      	ldr	r2, [pc, #412]	; (80032b4 <HAL_SD_MspInit+0x204>)
 8003116:	f043 0304 	orr.w	r3, r3, #4
 800311a:	6313      	str	r3, [r2, #48]	; 0x30
 800311c:	4b65      	ldr	r3, [pc, #404]	; (80032b4 <HAL_SD_MspInit+0x204>)
 800311e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	613b      	str	r3, [r7, #16]
 8003126:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003128:	2300      	movs	r3, #0
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	4b61      	ldr	r3, [pc, #388]	; (80032b4 <HAL_SD_MspInit+0x204>)
 800312e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003130:	4a60      	ldr	r2, [pc, #384]	; (80032b4 <HAL_SD_MspInit+0x204>)
 8003132:	f043 0308 	orr.w	r3, r3, #8
 8003136:	6313      	str	r3, [r2, #48]	; 0x30
 8003138:	4b5e      	ldr	r3, [pc, #376]	; (80032b4 <HAL_SD_MspInit+0x204>)
 800313a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PB15     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003144:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314a:	2302      	movs	r3, #2
 800314c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314e:	2300      	movs	r3, #0
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003152:	2303      	movs	r3, #3
 8003154:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003156:	230c      	movs	r3, #12
 8003158:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800315a:	f107 031c 	add.w	r3, r7, #28
 800315e:	4619      	mov	r1, r3
 8003160:	4855      	ldr	r0, [pc, #340]	; (80032b8 <HAL_SD_MspInit+0x208>)
 8003162:	f001 f981 	bl	8004468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003166:	f44f 7380 	mov.w	r3, #256	; 0x100
 800316a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316c:	2302      	movs	r3, #2
 800316e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003170:	2300      	movs	r3, #0
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003174:	2303      	movs	r3, #3
 8003176:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003178:	230c      	movs	r3, #12
 800317a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800317c:	f107 031c 	add.w	r3, r7, #28
 8003180:	4619      	mov	r1, r3
 8003182:	484e      	ldr	r0, [pc, #312]	; (80032bc <HAL_SD_MspInit+0x20c>)
 8003184:	f001 f970 	bl	8004468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003188:	2304      	movs	r3, #4
 800318a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318c:	2302      	movs	r3, #2
 800318e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003190:	2300      	movs	r3, #0
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003194:	2303      	movs	r3, #3
 8003196:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003198:	230c      	movs	r3, #12
 800319a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800319c:	f107 031c 	add.w	r3, r7, #28
 80031a0:	4619      	mov	r1, r3
 80031a2:	4847      	ldr	r0, [pc, #284]	; (80032c0 <HAL_SD_MspInit+0x210>)
 80031a4:	f001 f960 	bl	8004468 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80031a8:	4b46      	ldr	r3, [pc, #280]	; (80032c4 <HAL_SD_MspInit+0x214>)
 80031aa:	4a47      	ldr	r2, [pc, #284]	; (80032c8 <HAL_SD_MspInit+0x218>)
 80031ac:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80031ae:	4b45      	ldr	r3, [pc, #276]	; (80032c4 <HAL_SD_MspInit+0x214>)
 80031b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031b4:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031b6:	4b43      	ldr	r3, [pc, #268]	; (80032c4 <HAL_SD_MspInit+0x214>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031bc:	4b41      	ldr	r3, [pc, #260]	; (80032c4 <HAL_SD_MspInit+0x214>)
 80031be:	2200      	movs	r2, #0
 80031c0:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031c2:	4b40      	ldr	r3, [pc, #256]	; (80032c4 <HAL_SD_MspInit+0x214>)
 80031c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031c8:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031ca:	4b3e      	ldr	r3, [pc, #248]	; (80032c4 <HAL_SD_MspInit+0x214>)
 80031cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031d0:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80031d2:	4b3c      	ldr	r3, [pc, #240]	; (80032c4 <HAL_SD_MspInit+0x214>)
 80031d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031d8:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80031da:	4b3a      	ldr	r3, [pc, #232]	; (80032c4 <HAL_SD_MspInit+0x214>)
 80031dc:	2220      	movs	r2, #32
 80031de:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80031e0:	4b38      	ldr	r3, [pc, #224]	; (80032c4 <HAL_SD_MspInit+0x214>)
 80031e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031e6:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80031e8:	4b36      	ldr	r3, [pc, #216]	; (80032c4 <HAL_SD_MspInit+0x214>)
 80031ea:	2204      	movs	r2, #4
 80031ec:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80031ee:	4b35      	ldr	r3, [pc, #212]	; (80032c4 <HAL_SD_MspInit+0x214>)
 80031f0:	2203      	movs	r2, #3
 80031f2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80031f4:	4b33      	ldr	r3, [pc, #204]	; (80032c4 <HAL_SD_MspInit+0x214>)
 80031f6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80031fa:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80031fc:	4b31      	ldr	r3, [pc, #196]	; (80032c4 <HAL_SD_MspInit+0x214>)
 80031fe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003202:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8003204:	482f      	ldr	r0, [pc, #188]	; (80032c4 <HAL_SD_MspInit+0x214>)
 8003206:	f000 fd91 	bl	8003d2c <HAL_DMA_Init>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <HAL_SD_MspInit+0x164>
    {
      Error_Handler();
 8003210:	f7ff ff28 	bl	8003064 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a2b      	ldr	r2, [pc, #172]	; (80032c4 <HAL_SD_MspInit+0x214>)
 8003218:	641a      	str	r2, [r3, #64]	; 0x40
 800321a:	4a2a      	ldr	r2, [pc, #168]	; (80032c4 <HAL_SD_MspInit+0x214>)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8003220:	4b2a      	ldr	r3, [pc, #168]	; (80032cc <HAL_SD_MspInit+0x21c>)
 8003222:	4a2b      	ldr	r2, [pc, #172]	; (80032d0 <HAL_SD_MspInit+0x220>)
 8003224:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8003226:	4b29      	ldr	r3, [pc, #164]	; (80032cc <HAL_SD_MspInit+0x21c>)
 8003228:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800322c:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800322e:	4b27      	ldr	r3, [pc, #156]	; (80032cc <HAL_SD_MspInit+0x21c>)
 8003230:	2240      	movs	r2, #64	; 0x40
 8003232:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003234:	4b25      	ldr	r3, [pc, #148]	; (80032cc <HAL_SD_MspInit+0x21c>)
 8003236:	2200      	movs	r2, #0
 8003238:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800323a:	4b24      	ldr	r3, [pc, #144]	; (80032cc <HAL_SD_MspInit+0x21c>)
 800323c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003240:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003242:	4b22      	ldr	r3, [pc, #136]	; (80032cc <HAL_SD_MspInit+0x21c>)
 8003244:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003248:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800324a:	4b20      	ldr	r3, [pc, #128]	; (80032cc <HAL_SD_MspInit+0x21c>)
 800324c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003250:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8003252:	4b1e      	ldr	r3, [pc, #120]	; (80032cc <HAL_SD_MspInit+0x21c>)
 8003254:	2220      	movs	r2, #32
 8003256:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003258:	4b1c      	ldr	r3, [pc, #112]	; (80032cc <HAL_SD_MspInit+0x21c>)
 800325a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800325e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003260:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <HAL_SD_MspInit+0x21c>)
 8003262:	2204      	movs	r2, #4
 8003264:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003266:	4b19      	ldr	r3, [pc, #100]	; (80032cc <HAL_SD_MspInit+0x21c>)
 8003268:	2203      	movs	r2, #3
 800326a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800326c:	4b17      	ldr	r3, [pc, #92]	; (80032cc <HAL_SD_MspInit+0x21c>)
 800326e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003272:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003274:	4b15      	ldr	r3, [pc, #84]	; (80032cc <HAL_SD_MspInit+0x21c>)
 8003276:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800327a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800327c:	4813      	ldr	r0, [pc, #76]	; (80032cc <HAL_SD_MspInit+0x21c>)
 800327e:	f000 fd55 	bl	8003d2c <HAL_DMA_Init>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <HAL_SD_MspInit+0x1dc>
    {
      Error_Handler();
 8003288:	f7ff feec 	bl	8003064 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a0f      	ldr	r2, [pc, #60]	; (80032cc <HAL_SD_MspInit+0x21c>)
 8003290:	63da      	str	r2, [r3, #60]	; 0x3c
 8003292:	4a0e      	ldr	r2, [pc, #56]	; (80032cc <HAL_SD_MspInit+0x21c>)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8003298:	2200      	movs	r2, #0
 800329a:	2100      	movs	r1, #0
 800329c:	2031      	movs	r0, #49	; 0x31
 800329e:	f000 fce4 	bl	8003c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80032a2:	2031      	movs	r0, #49	; 0x31
 80032a4:	f000 fcfd 	bl	8003ca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80032a8:	bf00      	nop
 80032aa:	3730      	adds	r7, #48	; 0x30
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40012c00 	.word	0x40012c00
 80032b4:	40023800 	.word	0x40023800
 80032b8:	40020400 	.word	0x40020400
 80032bc:	40020800 	.word	0x40020800
 80032c0:	40020c00 	.word	0x40020c00
 80032c4:	200008d0 	.word	0x200008d0
 80032c8:	40026458 	.word	0x40026458
 80032cc:	20000930 	.word	0x20000930
 80032d0:	400264a0 	.word	0x400264a0

080032d4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80032d8:	4b17      	ldr	r3, [pc, #92]	; (8003338 <MX_SPI1_Init+0x64>)
 80032da:	4a18      	ldr	r2, [pc, #96]	; (800333c <MX_SPI1_Init+0x68>)
 80032dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80032de:	4b16      	ldr	r3, [pc, #88]	; (8003338 <MX_SPI1_Init+0x64>)
 80032e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80032e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80032e6:	4b14      	ldr	r3, [pc, #80]	; (8003338 <MX_SPI1_Init+0x64>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80032ec:	4b12      	ldr	r3, [pc, #72]	; (8003338 <MX_SPI1_Init+0x64>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032f2:	4b11      	ldr	r3, [pc, #68]	; (8003338 <MX_SPI1_Init+0x64>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032f8:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <MX_SPI1_Init+0x64>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80032fe:	4b0e      	ldr	r3, [pc, #56]	; (8003338 <MX_SPI1_Init+0x64>)
 8003300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003304:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003306:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <MX_SPI1_Init+0x64>)
 8003308:	2210      	movs	r2, #16
 800330a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800330c:	4b0a      	ldr	r3, [pc, #40]	; (8003338 <MX_SPI1_Init+0x64>)
 800330e:	2200      	movs	r2, #0
 8003310:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003312:	4b09      	ldr	r3, [pc, #36]	; (8003338 <MX_SPI1_Init+0x64>)
 8003314:	2200      	movs	r2, #0
 8003316:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003318:	4b07      	ldr	r3, [pc, #28]	; (8003338 <MX_SPI1_Init+0x64>)
 800331a:	2200      	movs	r2, #0
 800331c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800331e:	4b06      	ldr	r3, [pc, #24]	; (8003338 <MX_SPI1_Init+0x64>)
 8003320:	220a      	movs	r2, #10
 8003322:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003324:	4804      	ldr	r0, [pc, #16]	; (8003338 <MX_SPI1_Init+0x64>)
 8003326:	f003 fff5 	bl	8007314 <HAL_SPI_Init>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003330:	f7ff fe98 	bl	8003064 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003334:	bf00      	nop
 8003336:	bd80      	pop	{r7, pc}
 8003338:	20000990 	.word	0x20000990
 800333c:	40013000 	.word	0x40013000

08003340 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003344:	4b17      	ldr	r3, [pc, #92]	; (80033a4 <MX_SPI2_Init+0x64>)
 8003346:	4a18      	ldr	r2, [pc, #96]	; (80033a8 <MX_SPI2_Init+0x68>)
 8003348:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800334a:	4b16      	ldr	r3, [pc, #88]	; (80033a4 <MX_SPI2_Init+0x64>)
 800334c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003350:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003352:	4b14      	ldr	r3, [pc, #80]	; (80033a4 <MX_SPI2_Init+0x64>)
 8003354:	2200      	movs	r2, #0
 8003356:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003358:	4b12      	ldr	r3, [pc, #72]	; (80033a4 <MX_SPI2_Init+0x64>)
 800335a:	2200      	movs	r2, #0
 800335c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800335e:	4b11      	ldr	r3, [pc, #68]	; (80033a4 <MX_SPI2_Init+0x64>)
 8003360:	2200      	movs	r2, #0
 8003362:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003364:	4b0f      	ldr	r3, [pc, #60]	; (80033a4 <MX_SPI2_Init+0x64>)
 8003366:	2200      	movs	r2, #0
 8003368:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800336a:	4b0e      	ldr	r3, [pc, #56]	; (80033a4 <MX_SPI2_Init+0x64>)
 800336c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003370:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003372:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <MX_SPI2_Init+0x64>)
 8003374:	2220      	movs	r2, #32
 8003376:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003378:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <MX_SPI2_Init+0x64>)
 800337a:	2200      	movs	r2, #0
 800337c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800337e:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <MX_SPI2_Init+0x64>)
 8003380:	2200      	movs	r2, #0
 8003382:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003384:	4b07      	ldr	r3, [pc, #28]	; (80033a4 <MX_SPI2_Init+0x64>)
 8003386:	2200      	movs	r2, #0
 8003388:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800338a:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <MX_SPI2_Init+0x64>)
 800338c:	220a      	movs	r2, #10
 800338e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003390:	4804      	ldr	r0, [pc, #16]	; (80033a4 <MX_SPI2_Init+0x64>)
 8003392:	f003 ffbf 	bl	8007314 <HAL_SPI_Init>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800339c:	f7ff fe62 	bl	8003064 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80033a0:	bf00      	nop
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	200009e8 	.word	0x200009e8
 80033a8:	40003800 	.word	0x40003800

080033ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08c      	sub	sp, #48	; 0x30
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b4:	f107 031c 	add.w	r3, r7, #28
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	605a      	str	r2, [r3, #4]
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	60da      	str	r2, [r3, #12]
 80033c2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a41      	ldr	r2, [pc, #260]	; (80034d0 <HAL_SPI_MspInit+0x124>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d12c      	bne.n	8003428 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80033ce:	2300      	movs	r3, #0
 80033d0:	61bb      	str	r3, [r7, #24]
 80033d2:	4b40      	ldr	r3, [pc, #256]	; (80034d4 <HAL_SPI_MspInit+0x128>)
 80033d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d6:	4a3f      	ldr	r2, [pc, #252]	; (80034d4 <HAL_SPI_MspInit+0x128>)
 80033d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033dc:	6453      	str	r3, [r2, #68]	; 0x44
 80033de:	4b3d      	ldr	r3, [pc, #244]	; (80034d4 <HAL_SPI_MspInit+0x128>)
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033e6:	61bb      	str	r3, [r7, #24]
 80033e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]
 80033ee:	4b39      	ldr	r3, [pc, #228]	; (80034d4 <HAL_SPI_MspInit+0x128>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	4a38      	ldr	r2, [pc, #224]	; (80034d4 <HAL_SPI_MspInit+0x128>)
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	6313      	str	r3, [r2, #48]	; 0x30
 80033fa:	4b36      	ldr	r3, [pc, #216]	; (80034d4 <HAL_SPI_MspInit+0x128>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003406:	23e0      	movs	r3, #224	; 0xe0
 8003408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340a:	2302      	movs	r3, #2
 800340c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340e:	2300      	movs	r3, #0
 8003410:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003412:	2303      	movs	r3, #3
 8003414:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003416:	2305      	movs	r3, #5
 8003418:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800341a:	f107 031c 	add.w	r3, r7, #28
 800341e:	4619      	mov	r1, r3
 8003420:	482d      	ldr	r0, [pc, #180]	; (80034d8 <HAL_SPI_MspInit+0x12c>)
 8003422:	f001 f821 	bl	8004468 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003426:	e04f      	b.n	80034c8 <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI2)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a2b      	ldr	r2, [pc, #172]	; (80034dc <HAL_SPI_MspInit+0x130>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d14a      	bne.n	80034c8 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	4b27      	ldr	r3, [pc, #156]	; (80034d4 <HAL_SPI_MspInit+0x128>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	4a26      	ldr	r2, [pc, #152]	; (80034d4 <HAL_SPI_MspInit+0x128>)
 800343c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003440:	6413      	str	r3, [r2, #64]	; 0x40
 8003442:	4b24      	ldr	r3, [pc, #144]	; (80034d4 <HAL_SPI_MspInit+0x128>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	4b20      	ldr	r3, [pc, #128]	; (80034d4 <HAL_SPI_MspInit+0x128>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	4a1f      	ldr	r2, [pc, #124]	; (80034d4 <HAL_SPI_MspInit+0x128>)
 8003458:	f043 0304 	orr.w	r3, r3, #4
 800345c:	6313      	str	r3, [r2, #48]	; 0x30
 800345e:	4b1d      	ldr	r3, [pc, #116]	; (80034d4 <HAL_SPI_MspInit+0x128>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800346a:	2300      	movs	r3, #0
 800346c:	60bb      	str	r3, [r7, #8]
 800346e:	4b19      	ldr	r3, [pc, #100]	; (80034d4 <HAL_SPI_MspInit+0x128>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	4a18      	ldr	r2, [pc, #96]	; (80034d4 <HAL_SPI_MspInit+0x128>)
 8003474:	f043 0302 	orr.w	r3, r3, #2
 8003478:	6313      	str	r3, [r2, #48]	; 0x30
 800347a:	4b16      	ldr	r3, [pc, #88]	; (80034d4 <HAL_SPI_MspInit+0x128>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	60bb      	str	r3, [r7, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003486:	230c      	movs	r3, #12
 8003488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800348a:	2302      	movs	r3, #2
 800348c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348e:	2300      	movs	r3, #0
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003492:	2303      	movs	r3, #3
 8003494:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003496:	2305      	movs	r3, #5
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800349a:	f107 031c 	add.w	r3, r7, #28
 800349e:	4619      	mov	r1, r3
 80034a0:	480f      	ldr	r0, [pc, #60]	; (80034e0 <HAL_SPI_MspInit+0x134>)
 80034a2:	f000 ffe1 	bl	8004468 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ac:	2302      	movs	r3, #2
 80034ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b0:	2300      	movs	r3, #0
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b4:	2303      	movs	r3, #3
 80034b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034b8:	2305      	movs	r3, #5
 80034ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034bc:	f107 031c 	add.w	r3, r7, #28
 80034c0:	4619      	mov	r1, r3
 80034c2:	4808      	ldr	r0, [pc, #32]	; (80034e4 <HAL_SPI_MspInit+0x138>)
 80034c4:	f000 ffd0 	bl	8004468 <HAL_GPIO_Init>
}
 80034c8:	bf00      	nop
 80034ca:	3730      	adds	r7, #48	; 0x30
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40013000 	.word	0x40013000
 80034d4:	40023800 	.word	0x40023800
 80034d8:	40020000 	.word	0x40020000
 80034dc:	40003800 	.word	0x40003800
 80034e0:	40020800 	.word	0x40020800
 80034e4:	40020400 	.word	0x40020400

080034e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ee:	2300      	movs	r3, #0
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	4b10      	ldr	r3, [pc, #64]	; (8003534 <HAL_MspInit+0x4c>)
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	4a0f      	ldr	r2, [pc, #60]	; (8003534 <HAL_MspInit+0x4c>)
 80034f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034fc:	6453      	str	r3, [r2, #68]	; 0x44
 80034fe:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <HAL_MspInit+0x4c>)
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003506:	607b      	str	r3, [r7, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800350a:	2300      	movs	r3, #0
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4b09      	ldr	r3, [pc, #36]	; (8003534 <HAL_MspInit+0x4c>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	4a08      	ldr	r2, [pc, #32]	; (8003534 <HAL_MspInit+0x4c>)
 8003514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003518:	6413      	str	r3, [r2, #64]	; 0x40
 800351a:	4b06      	ldr	r3, [pc, #24]	; (8003534 <HAL_MspInit+0x4c>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003522:	603b      	str	r3, [r7, #0]
 8003524:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003526:	2007      	movs	r0, #7
 8003528:	f000 fb94 	bl	8003c54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800352c:	bf00      	nop
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40023800 	.word	0x40023800

08003538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800353c:	e7fe      	b.n	800353c <NMI_Handler+0x4>

0800353e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800353e:	b480      	push	{r7}
 8003540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003542:	e7fe      	b.n	8003542 <HardFault_Handler+0x4>

08003544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003548:	e7fe      	b.n	8003548 <MemManage_Handler+0x4>

0800354a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800354a:	b480      	push	{r7}
 800354c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800354e:	e7fe      	b.n	800354e <BusFault_Handler+0x4>

08003550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003554:	e7fe      	b.n	8003554 <UsageFault_Handler+0x4>

08003556 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003556:	b480      	push	{r7}
 8003558:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800355a:	bf00      	nop
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003568:	bf00      	nop
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003572:	b480      	push	{r7}
 8003574:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003576:	bf00      	nop
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003584:	f000 f9ee 	bl	8003964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003588:	bf00      	nop
 800358a:	bd80      	pop	{r7, pc}

0800358c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 8003590:	2001      	movs	r0, #1
 8003592:	f001 f91f 	bl	80047d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003596:	bf00      	nop
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80035a0:	4802      	ldr	r0, [pc, #8]	; (80035ac <SDIO_IRQHandler+0x10>)
 80035a2:	f002 ffff 	bl	80065a4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	2000084c 	.word	0x2000084c

080035b0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80035b4:	4802      	ldr	r0, [pc, #8]	; (80035c0 <DMA2_Stream3_IRQHandler+0x10>)
 80035b6:	f000 fce1 	bl	8003f7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	200008d0 	.word	0x200008d0

080035c4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80035c8:	4802      	ldr	r0, [pc, #8]	; (80035d4 <DMA2_Stream6_IRQHandler+0x10>)
 80035ca:	f000 fcd7 	bl	8003f7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000930 	.word	0x20000930

080035d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
	return 1;
 80035dc:	2301      	movs	r3, #1
}
 80035de:	4618      	mov	r0, r3
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <_kill>:

int _kill(int pid, int sig)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80035f2:	f008 fa3d 	bl	800ba70 <__errno>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2216      	movs	r2, #22
 80035fa:	601a      	str	r2, [r3, #0]
	return -1;
 80035fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003600:	4618      	mov	r0, r3
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <_exit>:

void _exit (int status)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003610:	f04f 31ff 	mov.w	r1, #4294967295
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7ff ffe7 	bl	80035e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800361a:	e7fe      	b.n	800361a <_exit+0x12>

0800361c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	e00a      	b.n	8003644 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800362e:	f3af 8000 	nop.w
 8003632:	4601      	mov	r1, r0
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	60ba      	str	r2, [r7, #8]
 800363a:	b2ca      	uxtb	r2, r1
 800363c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	3301      	adds	r3, #1
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	429a      	cmp	r2, r3
 800364a:	dbf0      	blt.n	800362e <_read+0x12>
	}

return len;
 800364c:	687b      	ldr	r3, [r7, #4]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b086      	sub	sp, #24
 800365a:	af00      	add	r7, sp, #0
 800365c:	60f8      	str	r0, [r7, #12]
 800365e:	60b9      	str	r1, [r7, #8]
 8003660:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	e009      	b.n	800367c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	60ba      	str	r2, [r7, #8]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	3301      	adds	r3, #1
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	429a      	cmp	r2, r3
 8003682:	dbf1      	blt.n	8003668 <_write+0x12>
	}
	return len;
 8003684:	687b      	ldr	r3, [r7, #4]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <_close>:

int _close(int file)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
	return -1;
 8003696:	f04f 33ff 	mov.w	r3, #4294967295
}
 800369a:	4618      	mov	r0, r3
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
 80036ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036b6:	605a      	str	r2, [r3, #4]
	return 0;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <_isatty>:

int _isatty(int file)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
	return 1;
 80036ce:	2301      	movs	r3, #1
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
	return 0;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
	...

080036f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003700:	4a14      	ldr	r2, [pc, #80]	; (8003754 <_sbrk+0x5c>)
 8003702:	4b15      	ldr	r3, [pc, #84]	; (8003758 <_sbrk+0x60>)
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800370c:	4b13      	ldr	r3, [pc, #76]	; (800375c <_sbrk+0x64>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d102      	bne.n	800371a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003714:	4b11      	ldr	r3, [pc, #68]	; (800375c <_sbrk+0x64>)
 8003716:	4a12      	ldr	r2, [pc, #72]	; (8003760 <_sbrk+0x68>)
 8003718:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800371a:	4b10      	ldr	r3, [pc, #64]	; (800375c <_sbrk+0x64>)
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4413      	add	r3, r2
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	429a      	cmp	r2, r3
 8003726:	d207      	bcs.n	8003738 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003728:	f008 f9a2 	bl	800ba70 <__errno>
 800372c:	4603      	mov	r3, r0
 800372e:	220c      	movs	r2, #12
 8003730:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003732:	f04f 33ff 	mov.w	r3, #4294967295
 8003736:	e009      	b.n	800374c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003738:	4b08      	ldr	r3, [pc, #32]	; (800375c <_sbrk+0x64>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800373e:	4b07      	ldr	r3, [pc, #28]	; (800375c <_sbrk+0x64>)
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4413      	add	r3, r2
 8003746:	4a05      	ldr	r2, [pc, #20]	; (800375c <_sbrk+0x64>)
 8003748:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800374a:	68fb      	ldr	r3, [r7, #12]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	20020000 	.word	0x20020000
 8003758:	00000400 	.word	0x00000400
 800375c:	20000a40 	.word	0x20000a40
 8003760:	20000ae0 	.word	0x20000ae0

08003764 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003768:	4b06      	ldr	r3, [pc, #24]	; (8003784 <SystemInit+0x20>)
 800376a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376e:	4a05      	ldr	r2, [pc, #20]	; (8003784 <SystemInit+0x20>)
 8003770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003774:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003778:	bf00      	nop
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	e000ed00 	.word	0xe000ed00

08003788 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800378c:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <MX_USART2_UART_Init+0x4c>)
 800378e:	4a12      	ldr	r2, [pc, #72]	; (80037d8 <MX_USART2_UART_Init+0x50>)
 8003790:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003792:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <MX_USART2_UART_Init+0x4c>)
 8003794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003798:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800379a:	4b0e      	ldr	r3, [pc, #56]	; (80037d4 <MX_USART2_UART_Init+0x4c>)
 800379c:	2200      	movs	r2, #0
 800379e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80037a0:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <MX_USART2_UART_Init+0x4c>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80037a6:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <MX_USART2_UART_Init+0x4c>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80037ac:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <MX_USART2_UART_Init+0x4c>)
 80037ae:	220c      	movs	r2, #12
 80037b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037b2:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <MX_USART2_UART_Init+0x4c>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80037b8:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <MX_USART2_UART_Init+0x4c>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80037be:	4805      	ldr	r0, [pc, #20]	; (80037d4 <MX_USART2_UART_Init+0x4c>)
 80037c0:	f004 f9da 	bl	8007b78 <HAL_UART_Init>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80037ca:	f7ff fc4b 	bl	8003064 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80037ce:	bf00      	nop
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20000a44 	.word	0x20000a44
 80037d8:	40004400 	.word	0x40004400

080037dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08a      	sub	sp, #40	; 0x28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e4:	f107 0314 	add.w	r3, r7, #20
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	605a      	str	r2, [r3, #4]
 80037ee:	609a      	str	r2, [r3, #8]
 80037f0:	60da      	str	r2, [r3, #12]
 80037f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a19      	ldr	r2, [pc, #100]	; (8003860 <HAL_UART_MspInit+0x84>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d12b      	bne.n	8003856 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80037fe:	2300      	movs	r3, #0
 8003800:	613b      	str	r3, [r7, #16]
 8003802:	4b18      	ldr	r3, [pc, #96]	; (8003864 <HAL_UART_MspInit+0x88>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	4a17      	ldr	r2, [pc, #92]	; (8003864 <HAL_UART_MspInit+0x88>)
 8003808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800380c:	6413      	str	r3, [r2, #64]	; 0x40
 800380e:	4b15      	ldr	r3, [pc, #84]	; (8003864 <HAL_UART_MspInit+0x88>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003816:	613b      	str	r3, [r7, #16]
 8003818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800381a:	2300      	movs	r3, #0
 800381c:	60fb      	str	r3, [r7, #12]
 800381e:	4b11      	ldr	r3, [pc, #68]	; (8003864 <HAL_UART_MspInit+0x88>)
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	4a10      	ldr	r2, [pc, #64]	; (8003864 <HAL_UART_MspInit+0x88>)
 8003824:	f043 0301 	orr.w	r3, r3, #1
 8003828:	6313      	str	r3, [r2, #48]	; 0x30
 800382a:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <HAL_UART_MspInit+0x88>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003836:	230c      	movs	r3, #12
 8003838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800383a:	2302      	movs	r3, #2
 800383c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383e:	2300      	movs	r3, #0
 8003840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003842:	2303      	movs	r3, #3
 8003844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003846:	2307      	movs	r3, #7
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800384a:	f107 0314 	add.w	r3, r7, #20
 800384e:	4619      	mov	r1, r3
 8003850:	4805      	ldr	r0, [pc, #20]	; (8003868 <HAL_UART_MspInit+0x8c>)
 8003852:	f000 fe09 	bl	8004468 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003856:	bf00      	nop
 8003858:	3728      	adds	r7, #40	; 0x28
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40004400 	.word	0x40004400
 8003864:	40023800 	.word	0x40023800
 8003868:	40020000 	.word	0x40020000

0800386c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800386c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003870:	480d      	ldr	r0, [pc, #52]	; (80038a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003872:	490e      	ldr	r1, [pc, #56]	; (80038ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003874:	4a0e      	ldr	r2, [pc, #56]	; (80038b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003878:	e002      	b.n	8003880 <LoopCopyDataInit>

0800387a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800387a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800387c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800387e:	3304      	adds	r3, #4

08003880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003884:	d3f9      	bcc.n	800387a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003886:	4a0b      	ldr	r2, [pc, #44]	; (80038b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003888:	4c0b      	ldr	r4, [pc, #44]	; (80038b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800388a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800388c:	e001      	b.n	8003892 <LoopFillZerobss>

0800388e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800388e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003890:	3204      	adds	r2, #4

08003892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003894:	d3fb      	bcc.n	800388e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003896:	f7ff ff65 	bl	8003764 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800389a:	f008 f8ef 	bl	800ba7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800389e:	f7fe fd85 	bl	80023ac <main>
  bx  lr    
 80038a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80038a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80038a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038ac:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 80038b0:	0800f0ec 	.word	0x0800f0ec
  ldr r2, =_sbss
 80038b4:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 80038b8:	20000ae0 	.word	0x20000ae0

080038bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038bc:	e7fe      	b.n	80038bc <ADC_IRQHandler>
	...

080038c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038c4:	4b0e      	ldr	r3, [pc, #56]	; (8003900 <HAL_Init+0x40>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a0d      	ldr	r2, [pc, #52]	; (8003900 <HAL_Init+0x40>)
 80038ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038d0:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <HAL_Init+0x40>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a0a      	ldr	r2, [pc, #40]	; (8003900 <HAL_Init+0x40>)
 80038d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038dc:	4b08      	ldr	r3, [pc, #32]	; (8003900 <HAL_Init+0x40>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a07      	ldr	r2, [pc, #28]	; (8003900 <HAL_Init+0x40>)
 80038e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038e8:	2003      	movs	r0, #3
 80038ea:	f000 f9b3 	bl	8003c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038ee:	2000      	movs	r0, #0
 80038f0:	f000 f808 	bl	8003904 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038f4:	f7ff fdf8 	bl	80034e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	40023c00 	.word	0x40023c00

08003904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800390c:	4b12      	ldr	r3, [pc, #72]	; (8003958 <HAL_InitTick+0x54>)
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	4b12      	ldr	r3, [pc, #72]	; (800395c <HAL_InitTick+0x58>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	4619      	mov	r1, r3
 8003916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800391a:	fbb3 f3f1 	udiv	r3, r3, r1
 800391e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003922:	4618      	mov	r0, r3
 8003924:	f000 f9d9 	bl	8003cda <HAL_SYSTICK_Config>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e00e      	b.n	8003950 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b0f      	cmp	r3, #15
 8003936:	d80a      	bhi.n	800394e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003938:	2200      	movs	r2, #0
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	f04f 30ff 	mov.w	r0, #4294967295
 8003940:	f000 f993 	bl	8003c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003944:	4a06      	ldr	r2, [pc, #24]	; (8003960 <HAL_InitTick+0x5c>)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800394a:	2300      	movs	r3, #0
 800394c:	e000      	b.n	8003950 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
}
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	20000104 	.word	0x20000104
 800395c:	2000010c 	.word	0x2000010c
 8003960:	20000108 	.word	0x20000108

08003964 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003968:	4b06      	ldr	r3, [pc, #24]	; (8003984 <HAL_IncTick+0x20>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	461a      	mov	r2, r3
 800396e:	4b06      	ldr	r3, [pc, #24]	; (8003988 <HAL_IncTick+0x24>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4413      	add	r3, r2
 8003974:	4a04      	ldr	r2, [pc, #16]	; (8003988 <HAL_IncTick+0x24>)
 8003976:	6013      	str	r3, [r2, #0]
}
 8003978:	bf00      	nop
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	2000010c 	.word	0x2000010c
 8003988:	20000a88 	.word	0x20000a88

0800398c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  return uwTick;
 8003990:	4b03      	ldr	r3, [pc, #12]	; (80039a0 <HAL_GetTick+0x14>)
 8003992:	681b      	ldr	r3, [r3, #0]
}
 8003994:	4618      	mov	r0, r3
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	20000a88 	.word	0x20000a88

080039a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039ac:	f7ff ffee 	bl	800398c <HAL_GetTick>
 80039b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039bc:	d005      	beq.n	80039ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039be:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <HAL_Delay+0x44>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	461a      	mov	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4413      	add	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039ca:	bf00      	nop
 80039cc:	f7ff ffde 	bl	800398c <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d8f7      	bhi.n	80039cc <HAL_Delay+0x28>
  {
  }
}
 80039dc:	bf00      	nop
 80039de:	bf00      	nop
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	2000010c 	.word	0x2000010c

080039ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039fc:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <__NVIC_SetPriorityGrouping+0x44>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a08:	4013      	ands	r3, r2
 8003a0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a1e:	4a04      	ldr	r2, [pc, #16]	; (8003a30 <__NVIC_SetPriorityGrouping+0x44>)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	60d3      	str	r3, [r2, #12]
}
 8003a24:	bf00      	nop
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	e000ed00 	.word	0xe000ed00

08003a34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a38:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <__NVIC_GetPriorityGrouping+0x18>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	0a1b      	lsrs	r3, r3, #8
 8003a3e:	f003 0307 	and.w	r3, r3, #7
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	e000ed00 	.word	0xe000ed00

08003a50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	db0b      	blt.n	8003a7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a62:	79fb      	ldrb	r3, [r7, #7]
 8003a64:	f003 021f 	and.w	r2, r3, #31
 8003a68:	4907      	ldr	r1, [pc, #28]	; (8003a88 <__NVIC_EnableIRQ+0x38>)
 8003a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6e:	095b      	lsrs	r3, r3, #5
 8003a70:	2001      	movs	r0, #1
 8003a72:	fa00 f202 	lsl.w	r2, r0, r2
 8003a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	e000e100 	.word	0xe000e100

08003a8c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	db12      	blt.n	8003ac4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a9e:	79fb      	ldrb	r3, [r7, #7]
 8003aa0:	f003 021f 	and.w	r2, r3, #31
 8003aa4:	490a      	ldr	r1, [pc, #40]	; (8003ad0 <__NVIC_DisableIRQ+0x44>)
 8003aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aaa:	095b      	lsrs	r3, r3, #5
 8003aac:	2001      	movs	r0, #1
 8003aae:	fa00 f202 	lsl.w	r2, r0, r2
 8003ab2:	3320      	adds	r3, #32
 8003ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003ab8:	f3bf 8f4f 	dsb	sy
}
 8003abc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003abe:	f3bf 8f6f 	isb	sy
}
 8003ac2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	e000e100 	.word	0xe000e100

08003ad4 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	4603      	mov	r3, r0
 8003adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	db0e      	blt.n	8003b04 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8003ae6:	4a0b      	ldr	r2, [pc, #44]	; (8003b14 <__NVIC_GetPendingIRQ+0x40>)
 8003ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aec:	095b      	lsrs	r3, r3, #5
 8003aee:	3340      	adds	r3, #64	; 0x40
 8003af0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003af4:	79fb      	ldrb	r3, [r7, #7]
 8003af6:	f003 031f 	and.w	r3, r3, #31
 8003afa:	fa22 f303 	lsr.w	r3, r2, r3
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	e000      	b.n	8003b06 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8003b04:	2300      	movs	r3, #0
  }
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	e000e100 	.word	0xe000e100

08003b18 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	db0c      	blt.n	8003b44 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b2a:	79fb      	ldrb	r3, [r7, #7]
 8003b2c:	f003 021f 	and.w	r2, r3, #31
 8003b30:	4907      	ldr	r1, [pc, #28]	; (8003b50 <__NVIC_ClearPendingIRQ+0x38>)
 8003b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	2001      	movs	r0, #1
 8003b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b3e:	3360      	adds	r3, #96	; 0x60
 8003b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	e000e100 	.word	0xe000e100

08003b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	6039      	str	r1, [r7, #0]
 8003b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	db0a      	blt.n	8003b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	490c      	ldr	r1, [pc, #48]	; (8003ba0 <__NVIC_SetPriority+0x4c>)
 8003b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b72:	0112      	lsls	r2, r2, #4
 8003b74:	b2d2      	uxtb	r2, r2
 8003b76:	440b      	add	r3, r1
 8003b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b7c:	e00a      	b.n	8003b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	4908      	ldr	r1, [pc, #32]	; (8003ba4 <__NVIC_SetPriority+0x50>)
 8003b84:	79fb      	ldrb	r3, [r7, #7]
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	3b04      	subs	r3, #4
 8003b8c:	0112      	lsls	r2, r2, #4
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	440b      	add	r3, r1
 8003b92:	761a      	strb	r2, [r3, #24]
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	e000e100 	.word	0xe000e100
 8003ba4:	e000ed00 	.word	0xe000ed00

08003ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b089      	sub	sp, #36	; 0x24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f1c3 0307 	rsb	r3, r3, #7
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	bf28      	it	cs
 8003bc6:	2304      	movcs	r3, #4
 8003bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	3304      	adds	r3, #4
 8003bce:	2b06      	cmp	r3, #6
 8003bd0:	d902      	bls.n	8003bd8 <NVIC_EncodePriority+0x30>
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	3b03      	subs	r3, #3
 8003bd6:	e000      	b.n	8003bda <NVIC_EncodePriority+0x32>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	43da      	mvns	r2, r3
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	401a      	ands	r2, r3
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfa:	43d9      	mvns	r1, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c00:	4313      	orrs	r3, r2
         );
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3724      	adds	r7, #36	; 0x24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
	...

08003c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c20:	d301      	bcc.n	8003c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c22:	2301      	movs	r3, #1
 8003c24:	e00f      	b.n	8003c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c26:	4a0a      	ldr	r2, [pc, #40]	; (8003c50 <SysTick_Config+0x40>)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c2e:	210f      	movs	r1, #15
 8003c30:	f04f 30ff 	mov.w	r0, #4294967295
 8003c34:	f7ff ff8e 	bl	8003b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c38:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <SysTick_Config+0x40>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c3e:	4b04      	ldr	r3, [pc, #16]	; (8003c50 <SysTick_Config+0x40>)
 8003c40:	2207      	movs	r2, #7
 8003c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	e000e010 	.word	0xe000e010

08003c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7ff fec5 	bl	80039ec <__NVIC_SetPriorityGrouping>
}
 8003c62:	bf00      	nop
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b086      	sub	sp, #24
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	4603      	mov	r3, r0
 8003c72:	60b9      	str	r1, [r7, #8]
 8003c74:	607a      	str	r2, [r7, #4]
 8003c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c7c:	f7ff feda 	bl	8003a34 <__NVIC_GetPriorityGrouping>
 8003c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	68b9      	ldr	r1, [r7, #8]
 8003c86:	6978      	ldr	r0, [r7, #20]
 8003c88:	f7ff ff8e 	bl	8003ba8 <NVIC_EncodePriority>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c92:	4611      	mov	r1, r2
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff ff5d 	bl	8003b54 <__NVIC_SetPriority>
}
 8003c9a:	bf00      	nop
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b082      	sub	sp, #8
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	4603      	mov	r3, r0
 8003caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff fecd 	bl	8003a50 <__NVIC_EnableIRQ>
}
 8003cb6:	bf00      	nop
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b082      	sub	sp, #8
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff fedd 	bl	8003a8c <__NVIC_DisableIRQ>
}
 8003cd2:	bf00      	nop
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b082      	sub	sp, #8
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff ff94 	bl	8003c10 <SysTick_Config>
 8003ce8:	4603      	mov	r3, r0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b082      	sub	sp, #8
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8003cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fee7 	bl	8003ad4 <__NVIC_GetPendingIRQ>
 8003d06:	4603      	mov	r3, r0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff fefa 	bl	8003b18 <__NVIC_ClearPendingIRQ>
}
 8003d24:	bf00      	nop
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d38:	f7ff fe28 	bl	800398c <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e099      	b.n	8003e7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0201 	bic.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d68:	e00f      	b.n	8003d8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d6a:	f7ff fe0f 	bl	800398c <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b05      	cmp	r3, #5
 8003d76:	d908      	bls.n	8003d8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2203      	movs	r2, #3
 8003d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e078      	b.n	8003e7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1e8      	bne.n	8003d6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	4b38      	ldr	r3, [pc, #224]	; (8003e84 <HAL_DMA_Init+0x158>)
 8003da4:	4013      	ands	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003db6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d107      	bne.n	8003df4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dec:	4313      	orrs	r3, r2
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f023 0307 	bic.w	r3, r3, #7
 8003e0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d117      	bne.n	8003e4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00e      	beq.n	8003e4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 fa9d 	bl	8004370 <DMA_CheckFifoParam>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d008      	beq.n	8003e4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2240      	movs	r2, #64	; 0x40
 8003e40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e016      	b.n	8003e7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 fa54 	bl	8004304 <DMA_CalcBaseAndBitshift>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e64:	223f      	movs	r2, #63	; 0x3f
 8003e66:	409a      	lsls	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3718      	adds	r7, #24
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	f010803f 	.word	0xf010803f

08003e88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e96:	2300      	movs	r3, #0
 8003e98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <HAL_DMA_Start_IT+0x26>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	e040      	b.n	8003f30 <HAL_DMA_Start_IT+0xa8>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d12f      	bne.n	8003f22 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	68b9      	ldr	r1, [r7, #8]
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f9e6 	bl	80042a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee0:	223f      	movs	r2, #63	; 0x3f
 8003ee2:	409a      	lsls	r2, r3
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0216 	orr.w	r2, r2, #22
 8003ef6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d007      	beq.n	8003f10 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0208 	orr.w	r2, r2, #8
 8003f0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f042 0201 	orr.w	r2, r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	e005      	b.n	8003f2e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d004      	beq.n	8003f56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2280      	movs	r2, #128	; 0x80
 8003f50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e00c      	b.n	8003f70 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2205      	movs	r2, #5
 8003f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0201 	bic.w	r2, r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f88:	4b8e      	ldr	r3, [pc, #568]	; (80041c4 <HAL_DMA_IRQHandler+0x248>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a8e      	ldr	r2, [pc, #568]	; (80041c8 <HAL_DMA_IRQHandler+0x24c>)
 8003f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f92:	0a9b      	lsrs	r3, r3, #10
 8003f94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa6:	2208      	movs	r2, #8
 8003fa8:	409a      	lsls	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4013      	ands	r3, r2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d01a      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d013      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0204 	bic.w	r2, r2, #4
 8003fce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd4:	2208      	movs	r2, #8
 8003fd6:	409a      	lsls	r2, r3
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe0:	f043 0201 	orr.w	r2, r3, #1
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fec:	2201      	movs	r2, #1
 8003fee:	409a      	lsls	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d012      	beq.n	800401e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00b      	beq.n	800401e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400a:	2201      	movs	r2, #1
 800400c:	409a      	lsls	r2, r3
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004016:	f043 0202 	orr.w	r2, r3, #2
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004022:	2204      	movs	r2, #4
 8004024:	409a      	lsls	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4013      	ands	r3, r2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d012      	beq.n	8004054 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00b      	beq.n	8004054 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004040:	2204      	movs	r2, #4
 8004042:	409a      	lsls	r2, r3
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404c:	f043 0204 	orr.w	r2, r3, #4
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004058:	2210      	movs	r2, #16
 800405a:	409a      	lsls	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4013      	ands	r3, r2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d043      	beq.n	80040ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d03c      	beq.n	80040ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004076:	2210      	movs	r2, #16
 8004078:	409a      	lsls	r2, r3
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d018      	beq.n	80040be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d108      	bne.n	80040ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d024      	beq.n	80040ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	4798      	blx	r3
 80040aa:	e01f      	b.n	80040ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d01b      	beq.n	80040ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	4798      	blx	r3
 80040bc:	e016      	b.n	80040ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d107      	bne.n	80040dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0208 	bic.w	r2, r2, #8
 80040da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d003      	beq.n	80040ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f0:	2220      	movs	r2, #32
 80040f2:	409a      	lsls	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4013      	ands	r3, r2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 808f 	beq.w	800421c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0310 	and.w	r3, r3, #16
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 8087 	beq.w	800421c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004112:	2220      	movs	r2, #32
 8004114:	409a      	lsls	r2, r3
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b05      	cmp	r3, #5
 8004124:	d136      	bne.n	8004194 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0216 	bic.w	r2, r2, #22
 8004134:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	695a      	ldr	r2, [r3, #20]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004144:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	2b00      	cmp	r3, #0
 800414c:	d103      	bne.n	8004156 <HAL_DMA_IRQHandler+0x1da>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004152:	2b00      	cmp	r3, #0
 8004154:	d007      	beq.n	8004166 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0208 	bic.w	r2, r2, #8
 8004164:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800416a:	223f      	movs	r2, #63	; 0x3f
 800416c:	409a      	lsls	r2, r3
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004186:	2b00      	cmp	r3, #0
 8004188:	d07e      	beq.n	8004288 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	4798      	blx	r3
        }
        return;
 8004192:	e079      	b.n	8004288 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d01d      	beq.n	80041de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10d      	bne.n	80041cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d031      	beq.n	800421c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	4798      	blx	r3
 80041c0:	e02c      	b.n	800421c <HAL_DMA_IRQHandler+0x2a0>
 80041c2:	bf00      	nop
 80041c4:	20000104 	.word	0x20000104
 80041c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d023      	beq.n	800421c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	4798      	blx	r3
 80041dc:	e01e      	b.n	800421c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10f      	bne.n	800420c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0210 	bic.w	r2, r2, #16
 80041fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004220:	2b00      	cmp	r3, #0
 8004222:	d032      	beq.n	800428a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	d022      	beq.n	8004276 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2205      	movs	r2, #5
 8004234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0201 	bic.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	3301      	adds	r3, #1
 800424c:	60bb      	str	r3, [r7, #8]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	429a      	cmp	r2, r3
 8004252:	d307      	bcc.n	8004264 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f2      	bne.n	8004248 <HAL_DMA_IRQHandler+0x2cc>
 8004262:	e000      	b.n	8004266 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004264:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800427a:	2b00      	cmp	r3, #0
 800427c:	d005      	beq.n	800428a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	4798      	blx	r3
 8004286:	e000      	b.n	800428a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004288:	bf00      	nop
    }
  }
}
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800429c:	4618      	mov	r0, r3
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	2b40      	cmp	r3, #64	; 0x40
 80042d4:	d108      	bne.n	80042e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80042e6:	e007      	b.n	80042f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	60da      	str	r2, [r3, #12]
}
 80042f8:	bf00      	nop
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	b2db      	uxtb	r3, r3
 8004312:	3b10      	subs	r3, #16
 8004314:	4a14      	ldr	r2, [pc, #80]	; (8004368 <DMA_CalcBaseAndBitshift+0x64>)
 8004316:	fba2 2303 	umull	r2, r3, r2, r3
 800431a:	091b      	lsrs	r3, r3, #4
 800431c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800431e:	4a13      	ldr	r2, [pc, #76]	; (800436c <DMA_CalcBaseAndBitshift+0x68>)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4413      	add	r3, r2
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b03      	cmp	r3, #3
 8004330:	d909      	bls.n	8004346 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800433a:	f023 0303 	bic.w	r3, r3, #3
 800433e:	1d1a      	adds	r2, r3, #4
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	659a      	str	r2, [r3, #88]	; 0x58
 8004344:	e007      	b.n	8004356 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800434e:	f023 0303 	bic.w	r3, r3, #3
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800435a:	4618      	mov	r0, r3
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	aaaaaaab 	.word	0xaaaaaaab
 800436c:	0800ec68 	.word	0x0800ec68

08004370 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004380:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d11f      	bne.n	80043ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2b03      	cmp	r3, #3
 800438e:	d856      	bhi.n	800443e <DMA_CheckFifoParam+0xce>
 8004390:	a201      	add	r2, pc, #4	; (adr r2, 8004398 <DMA_CheckFifoParam+0x28>)
 8004392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004396:	bf00      	nop
 8004398:	080043a9 	.word	0x080043a9
 800439c:	080043bb 	.word	0x080043bb
 80043a0:	080043a9 	.word	0x080043a9
 80043a4:	0800443f 	.word	0x0800443f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d046      	beq.n	8004442 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043b8:	e043      	b.n	8004442 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043c2:	d140      	bne.n	8004446 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043c8:	e03d      	b.n	8004446 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043d2:	d121      	bne.n	8004418 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b03      	cmp	r3, #3
 80043d8:	d837      	bhi.n	800444a <DMA_CheckFifoParam+0xda>
 80043da:	a201      	add	r2, pc, #4	; (adr r2, 80043e0 <DMA_CheckFifoParam+0x70>)
 80043dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e0:	080043f1 	.word	0x080043f1
 80043e4:	080043f7 	.word	0x080043f7
 80043e8:	080043f1 	.word	0x080043f1
 80043ec:	08004409 	.word	0x08004409
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	73fb      	strb	r3, [r7, #15]
      break;
 80043f4:	e030      	b.n	8004458 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d025      	beq.n	800444e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004406:	e022      	b.n	800444e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004410:	d11f      	bne.n	8004452 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004416:	e01c      	b.n	8004452 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b02      	cmp	r3, #2
 800441c:	d903      	bls.n	8004426 <DMA_CheckFifoParam+0xb6>
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b03      	cmp	r3, #3
 8004422:	d003      	beq.n	800442c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004424:	e018      	b.n	8004458 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	73fb      	strb	r3, [r7, #15]
      break;
 800442a:	e015      	b.n	8004458 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00e      	beq.n	8004456 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	73fb      	strb	r3, [r7, #15]
      break;
 800443c:	e00b      	b.n	8004456 <DMA_CheckFifoParam+0xe6>
      break;
 800443e:	bf00      	nop
 8004440:	e00a      	b.n	8004458 <DMA_CheckFifoParam+0xe8>
      break;
 8004442:	bf00      	nop
 8004444:	e008      	b.n	8004458 <DMA_CheckFifoParam+0xe8>
      break;
 8004446:	bf00      	nop
 8004448:	e006      	b.n	8004458 <DMA_CheckFifoParam+0xe8>
      break;
 800444a:	bf00      	nop
 800444c:	e004      	b.n	8004458 <DMA_CheckFifoParam+0xe8>
      break;
 800444e:	bf00      	nop
 8004450:	e002      	b.n	8004458 <DMA_CheckFifoParam+0xe8>
      break;   
 8004452:	bf00      	nop
 8004454:	e000      	b.n	8004458 <DMA_CheckFifoParam+0xe8>
      break;
 8004456:	bf00      	nop
    }
  } 
  
  return status; 
 8004458:	7bfb      	ldrb	r3, [r7, #15]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop

08004468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004468:	b480      	push	{r7}
 800446a:	b089      	sub	sp, #36	; 0x24
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004472:	2300      	movs	r3, #0
 8004474:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004476:	2300      	movs	r3, #0
 8004478:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800447a:	2300      	movs	r3, #0
 800447c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800447e:	2300      	movs	r3, #0
 8004480:	61fb      	str	r3, [r7, #28]
 8004482:	e159      	b.n	8004738 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004484:	2201      	movs	r2, #1
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	4013      	ands	r3, r2
 8004496:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	429a      	cmp	r2, r3
 800449e:	f040 8148 	bne.w	8004732 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d005      	beq.n	80044ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d130      	bne.n	800451c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	2203      	movs	r2, #3
 80044c6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ca:	43db      	mvns	r3, r3
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	4013      	ands	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044f0:	2201      	movs	r2, #1
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	fa02 f303 	lsl.w	r3, r2, r3
 80044f8:	43db      	mvns	r3, r3
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	4013      	ands	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	091b      	lsrs	r3, r3, #4
 8004506:	f003 0201 	and.w	r2, r3, #1
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	4313      	orrs	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f003 0303 	and.w	r3, r3, #3
 8004524:	2b03      	cmp	r3, #3
 8004526:	d017      	beq.n	8004558 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	2203      	movs	r2, #3
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	43db      	mvns	r3, r3
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	4013      	ands	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	4313      	orrs	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 0303 	and.w	r3, r3, #3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d123      	bne.n	80045ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	08da      	lsrs	r2, r3, #3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3208      	adds	r2, #8
 800456c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004570:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	220f      	movs	r2, #15
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	43db      	mvns	r3, r3
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	4013      	ands	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	691a      	ldr	r2, [r3, #16]
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	4313      	orrs	r3, r2
 800459c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	08da      	lsrs	r2, r3, #3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	3208      	adds	r2, #8
 80045a6:	69b9      	ldr	r1, [r7, #24]
 80045a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	2203      	movs	r2, #3
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	43db      	mvns	r3, r3
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4013      	ands	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f003 0203 	and.w	r2, r3, #3
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 80a2 	beq.w	8004732 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ee:	2300      	movs	r3, #0
 80045f0:	60fb      	str	r3, [r7, #12]
 80045f2:	4b57      	ldr	r3, [pc, #348]	; (8004750 <HAL_GPIO_Init+0x2e8>)
 80045f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f6:	4a56      	ldr	r2, [pc, #344]	; (8004750 <HAL_GPIO_Init+0x2e8>)
 80045f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045fc:	6453      	str	r3, [r2, #68]	; 0x44
 80045fe:	4b54      	ldr	r3, [pc, #336]	; (8004750 <HAL_GPIO_Init+0x2e8>)
 8004600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800460a:	4a52      	ldr	r2, [pc, #328]	; (8004754 <HAL_GPIO_Init+0x2ec>)
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	089b      	lsrs	r3, r3, #2
 8004610:	3302      	adds	r3, #2
 8004612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004616:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	220f      	movs	r2, #15
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	43db      	mvns	r3, r3
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	4013      	ands	r3, r2
 800462c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a49      	ldr	r2, [pc, #292]	; (8004758 <HAL_GPIO_Init+0x2f0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d019      	beq.n	800466a <HAL_GPIO_Init+0x202>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a48      	ldr	r2, [pc, #288]	; (800475c <HAL_GPIO_Init+0x2f4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d013      	beq.n	8004666 <HAL_GPIO_Init+0x1fe>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a47      	ldr	r2, [pc, #284]	; (8004760 <HAL_GPIO_Init+0x2f8>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d00d      	beq.n	8004662 <HAL_GPIO_Init+0x1fa>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a46      	ldr	r2, [pc, #280]	; (8004764 <HAL_GPIO_Init+0x2fc>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d007      	beq.n	800465e <HAL_GPIO_Init+0x1f6>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a45      	ldr	r2, [pc, #276]	; (8004768 <HAL_GPIO_Init+0x300>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d101      	bne.n	800465a <HAL_GPIO_Init+0x1f2>
 8004656:	2304      	movs	r3, #4
 8004658:	e008      	b.n	800466c <HAL_GPIO_Init+0x204>
 800465a:	2307      	movs	r3, #7
 800465c:	e006      	b.n	800466c <HAL_GPIO_Init+0x204>
 800465e:	2303      	movs	r3, #3
 8004660:	e004      	b.n	800466c <HAL_GPIO_Init+0x204>
 8004662:	2302      	movs	r3, #2
 8004664:	e002      	b.n	800466c <HAL_GPIO_Init+0x204>
 8004666:	2301      	movs	r3, #1
 8004668:	e000      	b.n	800466c <HAL_GPIO_Init+0x204>
 800466a:	2300      	movs	r3, #0
 800466c:	69fa      	ldr	r2, [r7, #28]
 800466e:	f002 0203 	and.w	r2, r2, #3
 8004672:	0092      	lsls	r2, r2, #2
 8004674:	4093      	lsls	r3, r2
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	4313      	orrs	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800467c:	4935      	ldr	r1, [pc, #212]	; (8004754 <HAL_GPIO_Init+0x2ec>)
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	089b      	lsrs	r3, r3, #2
 8004682:	3302      	adds	r3, #2
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800468a:	4b38      	ldr	r3, [pc, #224]	; (800476c <HAL_GPIO_Init+0x304>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	43db      	mvns	r3, r3
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	4013      	ands	r3, r2
 8004698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046ae:	4a2f      	ldr	r2, [pc, #188]	; (800476c <HAL_GPIO_Init+0x304>)
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046b4:	4b2d      	ldr	r3, [pc, #180]	; (800476c <HAL_GPIO_Init+0x304>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	43db      	mvns	r3, r3
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4013      	ands	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046d8:	4a24      	ldr	r2, [pc, #144]	; (800476c <HAL_GPIO_Init+0x304>)
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046de:	4b23      	ldr	r3, [pc, #140]	; (800476c <HAL_GPIO_Init+0x304>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	43db      	mvns	r3, r3
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	4013      	ands	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004702:	4a1a      	ldr	r2, [pc, #104]	; (800476c <HAL_GPIO_Init+0x304>)
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004708:	4b18      	ldr	r3, [pc, #96]	; (800476c <HAL_GPIO_Init+0x304>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	43db      	mvns	r3, r3
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	4013      	ands	r3, r2
 8004716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	4313      	orrs	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800472c:	4a0f      	ldr	r2, [pc, #60]	; (800476c <HAL_GPIO_Init+0x304>)
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	3301      	adds	r3, #1
 8004736:	61fb      	str	r3, [r7, #28]
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	2b0f      	cmp	r3, #15
 800473c:	f67f aea2 	bls.w	8004484 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004740:	bf00      	nop
 8004742:	bf00      	nop
 8004744:	3724      	adds	r7, #36	; 0x24
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	40023800 	.word	0x40023800
 8004754:	40013800 	.word	0x40013800
 8004758:	40020000 	.word	0x40020000
 800475c:	40020400 	.word	0x40020400
 8004760:	40020800 	.word	0x40020800
 8004764:	40020c00 	.word	0x40020c00
 8004768:	40021000 	.word	0x40021000
 800476c:	40013c00 	.word	0x40013c00

08004770 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	460b      	mov	r3, r1
 800477a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691a      	ldr	r2, [r3, #16]
 8004780:	887b      	ldrh	r3, [r7, #2]
 8004782:	4013      	ands	r3, r2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d002      	beq.n	800478e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004788:	2301      	movs	r3, #1
 800478a:	73fb      	strb	r3, [r7, #15]
 800478c:	e001      	b.n	8004792 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800478e:	2300      	movs	r3, #0
 8004790:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004792:	7bfb      	ldrb	r3, [r7, #15]
}
 8004794:	4618      	mov	r0, r3
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	807b      	strh	r3, [r7, #2]
 80047ac:	4613      	mov	r3, r2
 80047ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047b0:	787b      	ldrb	r3, [r7, #1]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047b6:	887a      	ldrh	r2, [r7, #2]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047bc:	e003      	b.n	80047c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047be:	887b      	ldrh	r3, [r7, #2]
 80047c0:	041a      	lsls	r2, r3, #16
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	619a      	str	r2, [r3, #24]
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
	...

080047d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	4603      	mov	r3, r0
 80047dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80047de:	4b08      	ldr	r3, [pc, #32]	; (8004800 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047e0:	695a      	ldr	r2, [r3, #20]
 80047e2:	88fb      	ldrh	r3, [r7, #6]
 80047e4:	4013      	ands	r3, r2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d006      	beq.n	80047f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047ea:	4a05      	ldr	r2, [pc, #20]	; (8004800 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047ec:	88fb      	ldrh	r3, [r7, #6]
 80047ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047f0:	88fb      	ldrh	r3, [r7, #6]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fd ff7a 	bl	80026ec <HAL_GPIO_EXTI_Callback>
  }
}
 80047f8:	bf00      	nop
 80047fa:	3708      	adds	r7, #8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	40013c00 	.word	0x40013c00

08004804 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e12b      	b.n	8004a6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d106      	bne.n	8004830 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7fd fd76 	bl	800231c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2224      	movs	r2, #36	; 0x24
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0201 	bic.w	r2, r2, #1
 8004846:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004856:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004866:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004868:	f001 fbfc 	bl	8006064 <HAL_RCC_GetPCLK1Freq>
 800486c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	4a81      	ldr	r2, [pc, #516]	; (8004a78 <HAL_I2C_Init+0x274>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d807      	bhi.n	8004888 <HAL_I2C_Init+0x84>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4a80      	ldr	r2, [pc, #512]	; (8004a7c <HAL_I2C_Init+0x278>)
 800487c:	4293      	cmp	r3, r2
 800487e:	bf94      	ite	ls
 8004880:	2301      	movls	r3, #1
 8004882:	2300      	movhi	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	e006      	b.n	8004896 <HAL_I2C_Init+0x92>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4a7d      	ldr	r2, [pc, #500]	; (8004a80 <HAL_I2C_Init+0x27c>)
 800488c:	4293      	cmp	r3, r2
 800488e:	bf94      	ite	ls
 8004890:	2301      	movls	r3, #1
 8004892:	2300      	movhi	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e0e7      	b.n	8004a6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	4a78      	ldr	r2, [pc, #480]	; (8004a84 <HAL_I2C_Init+0x280>)
 80048a2:	fba2 2303 	umull	r2, r3, r2, r3
 80048a6:	0c9b      	lsrs	r3, r3, #18
 80048a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	4a6a      	ldr	r2, [pc, #424]	; (8004a78 <HAL_I2C_Init+0x274>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d802      	bhi.n	80048d8 <HAL_I2C_Init+0xd4>
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	3301      	adds	r3, #1
 80048d6:	e009      	b.n	80048ec <HAL_I2C_Init+0xe8>
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80048de:	fb02 f303 	mul.w	r3, r2, r3
 80048e2:	4a69      	ldr	r2, [pc, #420]	; (8004a88 <HAL_I2C_Init+0x284>)
 80048e4:	fba2 2303 	umull	r2, r3, r2, r3
 80048e8:	099b      	lsrs	r3, r3, #6
 80048ea:	3301      	adds	r3, #1
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6812      	ldr	r2, [r2, #0]
 80048f0:	430b      	orrs	r3, r1
 80048f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80048fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	495c      	ldr	r1, [pc, #368]	; (8004a78 <HAL_I2C_Init+0x274>)
 8004908:	428b      	cmp	r3, r1
 800490a:	d819      	bhi.n	8004940 <HAL_I2C_Init+0x13c>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	1e59      	subs	r1, r3, #1
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	fbb1 f3f3 	udiv	r3, r1, r3
 800491a:	1c59      	adds	r1, r3, #1
 800491c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004920:	400b      	ands	r3, r1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <HAL_I2C_Init+0x138>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	1e59      	subs	r1, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	fbb1 f3f3 	udiv	r3, r1, r3
 8004934:	3301      	adds	r3, #1
 8004936:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800493a:	e051      	b.n	80049e0 <HAL_I2C_Init+0x1dc>
 800493c:	2304      	movs	r3, #4
 800493e:	e04f      	b.n	80049e0 <HAL_I2C_Init+0x1dc>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d111      	bne.n	800496c <HAL_I2C_Init+0x168>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	1e58      	subs	r0, r3, #1
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6859      	ldr	r1, [r3, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	440b      	add	r3, r1
 8004956:	fbb0 f3f3 	udiv	r3, r0, r3
 800495a:	3301      	adds	r3, #1
 800495c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004960:	2b00      	cmp	r3, #0
 8004962:	bf0c      	ite	eq
 8004964:	2301      	moveq	r3, #1
 8004966:	2300      	movne	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	e012      	b.n	8004992 <HAL_I2C_Init+0x18e>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	1e58      	subs	r0, r3, #1
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6859      	ldr	r1, [r3, #4]
 8004974:	460b      	mov	r3, r1
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	440b      	add	r3, r1
 800497a:	0099      	lsls	r1, r3, #2
 800497c:	440b      	add	r3, r1
 800497e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004982:	3301      	adds	r3, #1
 8004984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004988:	2b00      	cmp	r3, #0
 800498a:	bf0c      	ite	eq
 800498c:	2301      	moveq	r3, #1
 800498e:	2300      	movne	r3, #0
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <HAL_I2C_Init+0x196>
 8004996:	2301      	movs	r3, #1
 8004998:	e022      	b.n	80049e0 <HAL_I2C_Init+0x1dc>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10e      	bne.n	80049c0 <HAL_I2C_Init+0x1bc>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	1e58      	subs	r0, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6859      	ldr	r1, [r3, #4]
 80049aa:	460b      	mov	r3, r1
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	440b      	add	r3, r1
 80049b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80049b4:	3301      	adds	r3, #1
 80049b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049be:	e00f      	b.n	80049e0 <HAL_I2C_Init+0x1dc>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	1e58      	subs	r0, r3, #1
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6859      	ldr	r1, [r3, #4]
 80049c8:	460b      	mov	r3, r1
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	440b      	add	r3, r1
 80049ce:	0099      	lsls	r1, r3, #2
 80049d0:	440b      	add	r3, r1
 80049d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80049d6:	3301      	adds	r3, #1
 80049d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049e0:	6879      	ldr	r1, [r7, #4]
 80049e2:	6809      	ldr	r1, [r1, #0]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	69da      	ldr	r2, [r3, #28]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6911      	ldr	r1, [r2, #16]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	68d2      	ldr	r2, [r2, #12]
 8004a1a:	4311      	orrs	r1, r2
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6812      	ldr	r2, [r2, #0]
 8004a20:	430b      	orrs	r3, r1
 8004a22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	695a      	ldr	r2, [r3, #20]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0201 	orr.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	000186a0 	.word	0x000186a0
 8004a7c:	001e847f 	.word	0x001e847f
 8004a80:	003d08ff 	.word	0x003d08ff
 8004a84:	431bde83 	.word	0x431bde83
 8004a88:	10624dd3 	.word	0x10624dd3

08004a8c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b088      	sub	sp, #32
 8004a90:	af02      	add	r7, sp, #8
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	4608      	mov	r0, r1
 8004a96:	4611      	mov	r1, r2
 8004a98:	461a      	mov	r2, r3
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	817b      	strh	r3, [r7, #10]
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	813b      	strh	r3, [r7, #8]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004aa6:	f7fe ff71 	bl	800398c <HAL_GetTick>
 8004aaa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b20      	cmp	r3, #32
 8004ab6:	f040 80d9 	bne.w	8004c6c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	2319      	movs	r3, #25
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	496d      	ldr	r1, [pc, #436]	; (8004c78 <HAL_I2C_Mem_Write+0x1ec>)
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 fc7f 	bl	80053c8 <I2C_WaitOnFlagUntilTimeout>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e0cc      	b.n	8004c6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <HAL_I2C_Mem_Write+0x56>
 8004ade:	2302      	movs	r3, #2
 8004ae0:	e0c5      	b.n	8004c6e <HAL_I2C_Mem_Write+0x1e2>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d007      	beq.n	8004b08 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2221      	movs	r2, #33	; 0x21
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2240      	movs	r2, #64	; 0x40
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a3a      	ldr	r2, [r7, #32]
 8004b32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4a4d      	ldr	r2, [pc, #308]	; (8004c7c <HAL_I2C_Mem_Write+0x1f0>)
 8004b48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b4a:	88f8      	ldrh	r0, [r7, #6]
 8004b4c:	893a      	ldrh	r2, [r7, #8]
 8004b4e:	8979      	ldrh	r1, [r7, #10]
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	9301      	str	r3, [sp, #4]
 8004b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	4603      	mov	r3, r0
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 fab6 	bl	80050cc <I2C_RequestMemoryWrite>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d052      	beq.n	8004c0c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e081      	b.n	8004c6e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 fd00 	bl	8005574 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00d      	beq.n	8004b96 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	d107      	bne.n	8004b92 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e06b      	b.n	8004c6e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	781a      	ldrb	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	d11b      	bne.n	8004c0c <HAL_I2C_Mem_Write+0x180>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d017      	beq.n	8004c0c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	781a      	ldrb	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	3b01      	subs	r3, #1
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1aa      	bne.n	8004b6a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 fcec 	bl	80055f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00d      	beq.n	8004c40 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d107      	bne.n	8004c3c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c3a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e016      	b.n	8004c6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	e000      	b.n	8004c6e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c6c:	2302      	movs	r3, #2
  }
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	00100002 	.word	0x00100002
 8004c7c:	ffff0000 	.word	0xffff0000

08004c80 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b08c      	sub	sp, #48	; 0x30
 8004c84:	af02      	add	r7, sp, #8
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	4608      	mov	r0, r1
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	4603      	mov	r3, r0
 8004c90:	817b      	strh	r3, [r7, #10]
 8004c92:	460b      	mov	r3, r1
 8004c94:	813b      	strh	r3, [r7, #8]
 8004c96:	4613      	mov	r3, r2
 8004c98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c9a:	f7fe fe77 	bl	800398c <HAL_GetTick>
 8004c9e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b20      	cmp	r3, #32
 8004caa:	f040 8208 	bne.w	80050be <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	2319      	movs	r3, #25
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	497b      	ldr	r1, [pc, #492]	; (8004ea4 <HAL_I2C_Mem_Read+0x224>)
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 fb85 	bl	80053c8 <I2C_WaitOnFlagUntilTimeout>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e1fb      	b.n	80050c0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d101      	bne.n	8004cd6 <HAL_I2C_Mem_Read+0x56>
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	e1f4      	b.n	80050c0 <HAL_I2C_Mem_Read+0x440>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d007      	beq.n	8004cfc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0201 	orr.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2222      	movs	r2, #34	; 0x22
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2240      	movs	r2, #64	; 0x40
 8004d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	4a5b      	ldr	r2, [pc, #364]	; (8004ea8 <HAL_I2C_Mem_Read+0x228>)
 8004d3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d3e:	88f8      	ldrh	r0, [r7, #6]
 8004d40:	893a      	ldrh	r2, [r7, #8]
 8004d42:	8979      	ldrh	r1, [r7, #10]
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	9301      	str	r3, [sp, #4]
 8004d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 fa52 	bl	80051f8 <I2C_RequestMemoryRead>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e1b0      	b.n	80050c0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d113      	bne.n	8004d8e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d66:	2300      	movs	r3, #0
 8004d68:	623b      	str	r3, [r7, #32]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	623b      	str	r3, [r7, #32]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	623b      	str	r3, [r7, #32]
 8004d7a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	e184      	b.n	8005098 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d11b      	bne.n	8004dce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004da6:	2300      	movs	r3, #0
 8004da8:	61fb      	str	r3, [r7, #28]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	61fb      	str	r3, [r7, #28]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	61fb      	str	r3, [r7, #28]
 8004dba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	e164      	b.n	8005098 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d11b      	bne.n	8004e0e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004df4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004df6:	2300      	movs	r3, #0
 8004df8:	61bb      	str	r3, [r7, #24]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	61bb      	str	r3, [r7, #24]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	61bb      	str	r3, [r7, #24]
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	e144      	b.n	8005098 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e0e:	2300      	movs	r3, #0
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	617b      	str	r3, [r7, #20]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	617b      	str	r3, [r7, #20]
 8004e22:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004e24:	e138      	b.n	8005098 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	f200 80f1 	bhi.w	8005012 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d123      	bne.n	8004e80 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 fc1b 	bl	8005678 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e139      	b.n	80050c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	691a      	ldr	r2, [r3, #16]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	b2d2      	uxtb	r2, r2
 8004e58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e7e:	e10b      	b.n	8005098 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d14e      	bne.n	8004f26 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8e:	2200      	movs	r2, #0
 8004e90:	4906      	ldr	r1, [pc, #24]	; (8004eac <HAL_I2C_Mem_Read+0x22c>)
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 fa98 	bl	80053c8 <I2C_WaitOnFlagUntilTimeout>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d008      	beq.n	8004eb0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e10e      	b.n	80050c0 <HAL_I2C_Mem_Read+0x440>
 8004ea2:	bf00      	nop
 8004ea4:	00100002 	.word	0x00100002
 8004ea8:	ffff0000 	.word	0xffff0000
 8004eac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ebe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	3b01      	subs	r3, #1
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	691a      	ldr	r2, [r3, #16]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	b2d2      	uxtb	r2, r2
 8004efe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	1c5a      	adds	r2, r3, #1
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f24:	e0b8      	b.n	8005098 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	4966      	ldr	r1, [pc, #408]	; (80050c8 <HAL_I2C_Mem_Read+0x448>)
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 fa49 	bl	80053c8 <I2C_WaitOnFlagUntilTimeout>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e0bf      	b.n	80050c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	691a      	ldr	r2, [r3, #16]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	1c5a      	adds	r2, r3, #1
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f88:	2200      	movs	r2, #0
 8004f8a:	494f      	ldr	r1, [pc, #316]	; (80050c8 <HAL_I2C_Mem_Read+0x448>)
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 fa1b 	bl	80053c8 <I2C_WaitOnFlagUntilTimeout>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e091      	b.n	80050c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004faa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	691a      	ldr	r2, [r3, #16]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	b2d2      	uxtb	r2, r2
 8004fb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	691a      	ldr	r2, [r3, #16]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005006:	b29b      	uxth	r3, r3
 8005008:	3b01      	subs	r3, #1
 800500a:	b29a      	uxth	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005010:	e042      	b.n	8005098 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005014:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 fb2e 	bl	8005678 <I2C_WaitOnRXNEFlagUntilTimeout>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e04c      	b.n	80050c0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	b2d2      	uxtb	r2, r2
 8005032:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005042:	3b01      	subs	r3, #1
 8005044:	b29a      	uxth	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504e:	b29b      	uxth	r3, r3
 8005050:	3b01      	subs	r3, #1
 8005052:	b29a      	uxth	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	f003 0304 	and.w	r3, r3, #4
 8005062:	2b04      	cmp	r3, #4
 8005064:	d118      	bne.n	8005098 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	b2d2      	uxtb	r2, r2
 8005072:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005082:	3b01      	subs	r3, #1
 8005084:	b29a      	uxth	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509c:	2b00      	cmp	r3, #0
 800509e:	f47f aec2 	bne.w	8004e26 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2220      	movs	r2, #32
 80050a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	e000      	b.n	80050c0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80050be:	2302      	movs	r3, #2
  }
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3728      	adds	r7, #40	; 0x28
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	00010004 	.word	0x00010004

080050cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b088      	sub	sp, #32
 80050d0:	af02      	add	r7, sp, #8
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	4608      	mov	r0, r1
 80050d6:	4611      	mov	r1, r2
 80050d8:	461a      	mov	r2, r3
 80050da:	4603      	mov	r3, r0
 80050dc:	817b      	strh	r3, [r7, #10]
 80050de:	460b      	mov	r3, r1
 80050e0:	813b      	strh	r3, [r7, #8]
 80050e2:	4613      	mov	r3, r2
 80050e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 f960 	bl	80053c8 <I2C_WaitOnFlagUntilTimeout>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00d      	beq.n	800512a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800511c:	d103      	bne.n	8005126 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005124:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e05f      	b.n	80051ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800512a:	897b      	ldrh	r3, [r7, #10]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	461a      	mov	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005138:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	6a3a      	ldr	r2, [r7, #32]
 800513e:	492d      	ldr	r1, [pc, #180]	; (80051f4 <I2C_RequestMemoryWrite+0x128>)
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f000 f998 	bl	8005476 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e04c      	b.n	80051ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005150:	2300      	movs	r3, #0
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	617b      	str	r3, [r7, #20]
 8005164:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005168:	6a39      	ldr	r1, [r7, #32]
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 fa02 	bl	8005574 <I2C_WaitOnTXEFlagUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00d      	beq.n	8005192 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	2b04      	cmp	r3, #4
 800517c:	d107      	bne.n	800518e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800518c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e02b      	b.n	80051ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005192:	88fb      	ldrh	r3, [r7, #6]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d105      	bne.n	80051a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005198:	893b      	ldrh	r3, [r7, #8]
 800519a:	b2da      	uxtb	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	611a      	str	r2, [r3, #16]
 80051a2:	e021      	b.n	80051e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051a4:	893b      	ldrh	r3, [r7, #8]
 80051a6:	0a1b      	lsrs	r3, r3, #8
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b4:	6a39      	ldr	r1, [r7, #32]
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f000 f9dc 	bl	8005574 <I2C_WaitOnTXEFlagUntilTimeout>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00d      	beq.n	80051de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d107      	bne.n	80051da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e005      	b.n	80051ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051de:	893b      	ldrh	r3, [r7, #8]
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3718      	adds	r7, #24
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	00010002 	.word	0x00010002

080051f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b088      	sub	sp, #32
 80051fc:	af02      	add	r7, sp, #8
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	4608      	mov	r0, r1
 8005202:	4611      	mov	r1, r2
 8005204:	461a      	mov	r2, r3
 8005206:	4603      	mov	r3, r0
 8005208:	817b      	strh	r3, [r7, #10]
 800520a:	460b      	mov	r3, r1
 800520c:	813b      	strh	r3, [r7, #8]
 800520e:	4613      	mov	r3, r2
 8005210:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005220:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005230:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	2200      	movs	r2, #0
 800523a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 f8c2 	bl	80053c8 <I2C_WaitOnFlagUntilTimeout>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00d      	beq.n	8005266 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005258:	d103      	bne.n	8005262 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005260:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e0aa      	b.n	80053bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005266:	897b      	ldrh	r3, [r7, #10]
 8005268:	b2db      	uxtb	r3, r3
 800526a:	461a      	mov	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005274:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	6a3a      	ldr	r2, [r7, #32]
 800527a:	4952      	ldr	r1, [pc, #328]	; (80053c4 <I2C_RequestMemoryRead+0x1cc>)
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 f8fa 	bl	8005476 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e097      	b.n	80053bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800528c:	2300      	movs	r3, #0
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	617b      	str	r3, [r7, #20]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a4:	6a39      	ldr	r1, [r7, #32]
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 f964 	bl	8005574 <I2C_WaitOnTXEFlagUntilTimeout>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00d      	beq.n	80052ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d107      	bne.n	80052ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e076      	b.n	80053bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052ce:	88fb      	ldrh	r3, [r7, #6]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d105      	bne.n	80052e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052d4:	893b      	ldrh	r3, [r7, #8]
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	611a      	str	r2, [r3, #16]
 80052de:	e021      	b.n	8005324 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80052e0:	893b      	ldrh	r3, [r7, #8]
 80052e2:	0a1b      	lsrs	r3, r3, #8
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f0:	6a39      	ldr	r1, [r7, #32]
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 f93e 	bl	8005574 <I2C_WaitOnTXEFlagUntilTimeout>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00d      	beq.n	800531a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	2b04      	cmp	r3, #4
 8005304:	d107      	bne.n	8005316 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005314:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e050      	b.n	80053bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800531a:	893b      	ldrh	r3, [r7, #8]
 800531c:	b2da      	uxtb	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005326:	6a39      	ldr	r1, [r7, #32]
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 f923 	bl	8005574 <I2C_WaitOnTXEFlagUntilTimeout>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00d      	beq.n	8005350 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005338:	2b04      	cmp	r3, #4
 800533a:	d107      	bne.n	800534c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800534a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e035      	b.n	80053bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800535e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	2200      	movs	r2, #0
 8005368:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 f82b 	bl	80053c8 <I2C_WaitOnFlagUntilTimeout>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00d      	beq.n	8005394 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005386:	d103      	bne.n	8005390 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800538e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e013      	b.n	80053bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005394:	897b      	ldrh	r3, [r7, #10]
 8005396:	b2db      	uxtb	r3, r3
 8005398:	f043 0301 	orr.w	r3, r3, #1
 800539c:	b2da      	uxtb	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	6a3a      	ldr	r2, [r7, #32]
 80053a8:	4906      	ldr	r1, [pc, #24]	; (80053c4 <I2C_RequestMemoryRead+0x1cc>)
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 f863 	bl	8005476 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e000      	b.n	80053bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3718      	adds	r7, #24
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	00010002 	.word	0x00010002

080053c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	603b      	str	r3, [r7, #0]
 80053d4:	4613      	mov	r3, r2
 80053d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053d8:	e025      	b.n	8005426 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e0:	d021      	beq.n	8005426 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053e2:	f7fe fad3 	bl	800398c <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d302      	bcc.n	80053f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d116      	bne.n	8005426 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2220      	movs	r2, #32
 8005402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	f043 0220 	orr.w	r2, r3, #32
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e023      	b.n	800546e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	0c1b      	lsrs	r3, r3, #16
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b01      	cmp	r3, #1
 800542e:	d10d      	bne.n	800544c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	43da      	mvns	r2, r3
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	4013      	ands	r3, r2
 800543c:	b29b      	uxth	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	bf0c      	ite	eq
 8005442:	2301      	moveq	r3, #1
 8005444:	2300      	movne	r3, #0
 8005446:	b2db      	uxtb	r3, r3
 8005448:	461a      	mov	r2, r3
 800544a:	e00c      	b.n	8005466 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	43da      	mvns	r2, r3
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	4013      	ands	r3, r2
 8005458:	b29b      	uxth	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	bf0c      	ite	eq
 800545e:	2301      	moveq	r3, #1
 8005460:	2300      	movne	r3, #0
 8005462:	b2db      	uxtb	r3, r3
 8005464:	461a      	mov	r2, r3
 8005466:	79fb      	ldrb	r3, [r7, #7]
 8005468:	429a      	cmp	r2, r3
 800546a:	d0b6      	beq.n	80053da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b084      	sub	sp, #16
 800547a:	af00      	add	r7, sp, #0
 800547c:	60f8      	str	r0, [r7, #12]
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	607a      	str	r2, [r7, #4]
 8005482:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005484:	e051      	b.n	800552a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005494:	d123      	bne.n	80054de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2220      	movs	r2, #32
 80054ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	f043 0204 	orr.w	r2, r3, #4
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e046      	b.n	800556c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e4:	d021      	beq.n	800552a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054e6:	f7fe fa51 	bl	800398c <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d302      	bcc.n	80054fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d116      	bne.n	800552a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2220      	movs	r2, #32
 8005506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	f043 0220 	orr.w	r2, r3, #32
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e020      	b.n	800556c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	0c1b      	lsrs	r3, r3, #16
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b01      	cmp	r3, #1
 8005532:	d10c      	bne.n	800554e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	43da      	mvns	r2, r3
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	4013      	ands	r3, r2
 8005540:	b29b      	uxth	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	bf14      	ite	ne
 8005546:	2301      	movne	r3, #1
 8005548:	2300      	moveq	r3, #0
 800554a:	b2db      	uxtb	r3, r3
 800554c:	e00b      	b.n	8005566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	43da      	mvns	r2, r3
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	4013      	ands	r3, r2
 800555a:	b29b      	uxth	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	bf14      	ite	ne
 8005560:	2301      	movne	r3, #1
 8005562:	2300      	moveq	r3, #0
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d18d      	bne.n	8005486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005580:	e02d      	b.n	80055de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 f8ce 	bl	8005724 <I2C_IsAcknowledgeFailed>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e02d      	b.n	80055ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005598:	d021      	beq.n	80055de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800559a:	f7fe f9f7 	bl	800398c <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d302      	bcc.n	80055b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d116      	bne.n	80055de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	f043 0220 	orr.w	r2, r3, #32
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e007      	b.n	80055ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e8:	2b80      	cmp	r3, #128	; 0x80
 80055ea:	d1ca      	bne.n	8005582 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b084      	sub	sp, #16
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	60b9      	str	r1, [r7, #8]
 8005600:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005602:	e02d      	b.n	8005660 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f000 f88d 	bl	8005724 <I2C_IsAcknowledgeFailed>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e02d      	b.n	8005670 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561a:	d021      	beq.n	8005660 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800561c:	f7fe f9b6 	bl	800398c <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	429a      	cmp	r2, r3
 800562a:	d302      	bcc.n	8005632 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d116      	bne.n	8005660 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2220      	movs	r2, #32
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564c:	f043 0220 	orr.w	r2, r3, #32
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e007      	b.n	8005670 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	f003 0304 	and.w	r3, r3, #4
 800566a:	2b04      	cmp	r3, #4
 800566c:	d1ca      	bne.n	8005604 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005684:	e042      	b.n	800570c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	f003 0310 	and.w	r3, r3, #16
 8005690:	2b10      	cmp	r3, #16
 8005692:	d119      	bne.n	80056c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f06f 0210 	mvn.w	r2, #16
 800569c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2220      	movs	r2, #32
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e029      	b.n	800571c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c8:	f7fe f960 	bl	800398c <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d302      	bcc.n	80056de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d116      	bne.n	800570c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f8:	f043 0220 	orr.w	r2, r3, #32
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e007      	b.n	800571c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005716:	2b40      	cmp	r3, #64	; 0x40
 8005718:	d1b5      	bne.n	8005686 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800573a:	d11b      	bne.n	8005774 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005744:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2220      	movs	r2, #32
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005760:	f043 0204 	orr.w	r2, r3, #4
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e000      	b.n	8005776 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
	...

08005784 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e267      	b.n	8005c66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d075      	beq.n	800588e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057a2:	4b88      	ldr	r3, [pc, #544]	; (80059c4 <HAL_RCC_OscConfig+0x240>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f003 030c 	and.w	r3, r3, #12
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	d00c      	beq.n	80057c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057ae:	4b85      	ldr	r3, [pc, #532]	; (80059c4 <HAL_RCC_OscConfig+0x240>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057b6:	2b08      	cmp	r3, #8
 80057b8:	d112      	bne.n	80057e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057ba:	4b82      	ldr	r3, [pc, #520]	; (80059c4 <HAL_RCC_OscConfig+0x240>)
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057c6:	d10b      	bne.n	80057e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057c8:	4b7e      	ldr	r3, [pc, #504]	; (80059c4 <HAL_RCC_OscConfig+0x240>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d05b      	beq.n	800588c <HAL_RCC_OscConfig+0x108>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d157      	bne.n	800588c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e242      	b.n	8005c66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057e8:	d106      	bne.n	80057f8 <HAL_RCC_OscConfig+0x74>
 80057ea:	4b76      	ldr	r3, [pc, #472]	; (80059c4 <HAL_RCC_OscConfig+0x240>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a75      	ldr	r2, [pc, #468]	; (80059c4 <HAL_RCC_OscConfig+0x240>)
 80057f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	e01d      	b.n	8005834 <HAL_RCC_OscConfig+0xb0>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005800:	d10c      	bne.n	800581c <HAL_RCC_OscConfig+0x98>
 8005802:	4b70      	ldr	r3, [pc, #448]	; (80059c4 <HAL_RCC_OscConfig+0x240>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a6f      	ldr	r2, [pc, #444]	; (80059c4 <HAL_RCC_OscConfig+0x240>)
 8005808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	4b6d      	ldr	r3, [pc, #436]	; (80059c4 <HAL_RCC_OscConfig+0x240>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a6c      	ldr	r2, [pc, #432]	; (80059c4 <HAL_RCC_OscConfig+0x240>)
 8005814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005818:	6013      	str	r3, [r2, #0]
 800581a:	e00b      	b.n	8005834 <HAL_RCC_OscConfig+0xb0>
 800581c:	4b69      	ldr	r3, [pc, #420]	; (80059c4 <HAL_RCC_OscConfig+0x240>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a68      	ldr	r2, [pc, #416]	; (80059c4 <HAL_RCC_OscConfig+0x240>)
 8005822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005826:	6013      	str	r3, [r2, #0]
 8005828:	4b66      	ldr	r3, [pc, #408]	; (80059c4 <HAL_RCC_OscConfig+0x240>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a65      	ldr	r2, [pc, #404]	; (80059c4 <HAL_RCC_OscConfig+0x240>)
 800582e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d013      	beq.n	8005864 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800583c:	f7fe f8a6 	bl	800398c <HAL_GetTick>
 8005840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005842:	e008      	b.n	8005856 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005844:	f7fe f8a2 	bl	800398c <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b64      	cmp	r3, #100	; 0x64
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e207      	b.n	8005c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005856:	4b5b      	ldr	r3, [pc, #364]	; (80059c4 <HAL_RCC_OscConfig+0x240>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d0f0      	beq.n	8005844 <HAL_RCC_OscConfig+0xc0>
 8005862:	e014      	b.n	800588e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005864:	f7fe f892 	bl	800398c <HAL_GetTick>
 8005868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800586a:	e008      	b.n	800587e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800586c:	f7fe f88e 	bl	800398c <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	2b64      	cmp	r3, #100	; 0x64
 8005878:	d901      	bls.n	800587e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e1f3      	b.n	8005c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800587e:	4b51      	ldr	r3, [pc, #324]	; (80059c4 <HAL_RCC_OscConfig+0x240>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1f0      	bne.n	800586c <HAL_RCC_OscConfig+0xe8>
 800588a:	e000      	b.n	800588e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800588c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d063      	beq.n	8005962 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800589a:	4b4a      	ldr	r3, [pc, #296]	; (80059c4 <HAL_RCC_OscConfig+0x240>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f003 030c 	and.w	r3, r3, #12
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00b      	beq.n	80058be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058a6:	4b47      	ldr	r3, [pc, #284]	; (80059c4 <HAL_RCC_OscConfig+0x240>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058ae:	2b08      	cmp	r3, #8
 80058b0:	d11c      	bne.n	80058ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058b2:	4b44      	ldr	r3, [pc, #272]	; (80059c4 <HAL_RCC_OscConfig+0x240>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d116      	bne.n	80058ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058be:	4b41      	ldr	r3, [pc, #260]	; (80059c4 <HAL_RCC_OscConfig+0x240>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d005      	beq.n	80058d6 <HAL_RCC_OscConfig+0x152>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d001      	beq.n	80058d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e1c7      	b.n	8005c66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058d6:	4b3b      	ldr	r3, [pc, #236]	; (80059c4 <HAL_RCC_OscConfig+0x240>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	00db      	lsls	r3, r3, #3
 80058e4:	4937      	ldr	r1, [pc, #220]	; (80059c4 <HAL_RCC_OscConfig+0x240>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ea:	e03a      	b.n	8005962 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d020      	beq.n	8005936 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058f4:	4b34      	ldr	r3, [pc, #208]	; (80059c8 <HAL_RCC_OscConfig+0x244>)
 80058f6:	2201      	movs	r2, #1
 80058f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fa:	f7fe f847 	bl	800398c <HAL_GetTick>
 80058fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005900:	e008      	b.n	8005914 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005902:	f7fe f843 	bl	800398c <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	2b02      	cmp	r3, #2
 800590e:	d901      	bls.n	8005914 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e1a8      	b.n	8005c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005914:	4b2b      	ldr	r3, [pc, #172]	; (80059c4 <HAL_RCC_OscConfig+0x240>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d0f0      	beq.n	8005902 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005920:	4b28      	ldr	r3, [pc, #160]	; (80059c4 <HAL_RCC_OscConfig+0x240>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	00db      	lsls	r3, r3, #3
 800592e:	4925      	ldr	r1, [pc, #148]	; (80059c4 <HAL_RCC_OscConfig+0x240>)
 8005930:	4313      	orrs	r3, r2
 8005932:	600b      	str	r3, [r1, #0]
 8005934:	e015      	b.n	8005962 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005936:	4b24      	ldr	r3, [pc, #144]	; (80059c8 <HAL_RCC_OscConfig+0x244>)
 8005938:	2200      	movs	r2, #0
 800593a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800593c:	f7fe f826 	bl	800398c <HAL_GetTick>
 8005940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005942:	e008      	b.n	8005956 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005944:	f7fe f822 	bl	800398c <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e187      	b.n	8005c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005956:	4b1b      	ldr	r3, [pc, #108]	; (80059c4 <HAL_RCC_OscConfig+0x240>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1f0      	bne.n	8005944 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0308 	and.w	r3, r3, #8
 800596a:	2b00      	cmp	r3, #0
 800596c:	d036      	beq.n	80059dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d016      	beq.n	80059a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005976:	4b15      	ldr	r3, [pc, #84]	; (80059cc <HAL_RCC_OscConfig+0x248>)
 8005978:	2201      	movs	r2, #1
 800597a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800597c:	f7fe f806 	bl	800398c <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005984:	f7fe f802 	bl	800398c <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e167      	b.n	8005c66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005996:	4b0b      	ldr	r3, [pc, #44]	; (80059c4 <HAL_RCC_OscConfig+0x240>)
 8005998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d0f0      	beq.n	8005984 <HAL_RCC_OscConfig+0x200>
 80059a2:	e01b      	b.n	80059dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059a4:	4b09      	ldr	r3, [pc, #36]	; (80059cc <HAL_RCC_OscConfig+0x248>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059aa:	f7fd ffef 	bl	800398c <HAL_GetTick>
 80059ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059b0:	e00e      	b.n	80059d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059b2:	f7fd ffeb 	bl	800398c <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d907      	bls.n	80059d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e150      	b.n	8005c66 <HAL_RCC_OscConfig+0x4e2>
 80059c4:	40023800 	.word	0x40023800
 80059c8:	42470000 	.word	0x42470000
 80059cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059d0:	4b88      	ldr	r3, [pc, #544]	; (8005bf4 <HAL_RCC_OscConfig+0x470>)
 80059d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1ea      	bne.n	80059b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0304 	and.w	r3, r3, #4
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 8097 	beq.w	8005b18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059ea:	2300      	movs	r3, #0
 80059ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059ee:	4b81      	ldr	r3, [pc, #516]	; (8005bf4 <HAL_RCC_OscConfig+0x470>)
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10f      	bne.n	8005a1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059fa:	2300      	movs	r3, #0
 80059fc:	60bb      	str	r3, [r7, #8]
 80059fe:	4b7d      	ldr	r3, [pc, #500]	; (8005bf4 <HAL_RCC_OscConfig+0x470>)
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	4a7c      	ldr	r2, [pc, #496]	; (8005bf4 <HAL_RCC_OscConfig+0x470>)
 8005a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a08:	6413      	str	r3, [r2, #64]	; 0x40
 8005a0a:	4b7a      	ldr	r3, [pc, #488]	; (8005bf4 <HAL_RCC_OscConfig+0x470>)
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a12:	60bb      	str	r3, [r7, #8]
 8005a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a16:	2301      	movs	r3, #1
 8005a18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a1a:	4b77      	ldr	r3, [pc, #476]	; (8005bf8 <HAL_RCC_OscConfig+0x474>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d118      	bne.n	8005a58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a26:	4b74      	ldr	r3, [pc, #464]	; (8005bf8 <HAL_RCC_OscConfig+0x474>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a73      	ldr	r2, [pc, #460]	; (8005bf8 <HAL_RCC_OscConfig+0x474>)
 8005a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a32:	f7fd ffab 	bl	800398c <HAL_GetTick>
 8005a36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a38:	e008      	b.n	8005a4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a3a:	f7fd ffa7 	bl	800398c <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e10c      	b.n	8005c66 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a4c:	4b6a      	ldr	r3, [pc, #424]	; (8005bf8 <HAL_RCC_OscConfig+0x474>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0f0      	beq.n	8005a3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d106      	bne.n	8005a6e <HAL_RCC_OscConfig+0x2ea>
 8005a60:	4b64      	ldr	r3, [pc, #400]	; (8005bf4 <HAL_RCC_OscConfig+0x470>)
 8005a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a64:	4a63      	ldr	r2, [pc, #396]	; (8005bf4 <HAL_RCC_OscConfig+0x470>)
 8005a66:	f043 0301 	orr.w	r3, r3, #1
 8005a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a6c:	e01c      	b.n	8005aa8 <HAL_RCC_OscConfig+0x324>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	2b05      	cmp	r3, #5
 8005a74:	d10c      	bne.n	8005a90 <HAL_RCC_OscConfig+0x30c>
 8005a76:	4b5f      	ldr	r3, [pc, #380]	; (8005bf4 <HAL_RCC_OscConfig+0x470>)
 8005a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7a:	4a5e      	ldr	r2, [pc, #376]	; (8005bf4 <HAL_RCC_OscConfig+0x470>)
 8005a7c:	f043 0304 	orr.w	r3, r3, #4
 8005a80:	6713      	str	r3, [r2, #112]	; 0x70
 8005a82:	4b5c      	ldr	r3, [pc, #368]	; (8005bf4 <HAL_RCC_OscConfig+0x470>)
 8005a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a86:	4a5b      	ldr	r2, [pc, #364]	; (8005bf4 <HAL_RCC_OscConfig+0x470>)
 8005a88:	f043 0301 	orr.w	r3, r3, #1
 8005a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a8e:	e00b      	b.n	8005aa8 <HAL_RCC_OscConfig+0x324>
 8005a90:	4b58      	ldr	r3, [pc, #352]	; (8005bf4 <HAL_RCC_OscConfig+0x470>)
 8005a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a94:	4a57      	ldr	r2, [pc, #348]	; (8005bf4 <HAL_RCC_OscConfig+0x470>)
 8005a96:	f023 0301 	bic.w	r3, r3, #1
 8005a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a9c:	4b55      	ldr	r3, [pc, #340]	; (8005bf4 <HAL_RCC_OscConfig+0x470>)
 8005a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa0:	4a54      	ldr	r2, [pc, #336]	; (8005bf4 <HAL_RCC_OscConfig+0x470>)
 8005aa2:	f023 0304 	bic.w	r3, r3, #4
 8005aa6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d015      	beq.n	8005adc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ab0:	f7fd ff6c 	bl	800398c <HAL_GetTick>
 8005ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ab6:	e00a      	b.n	8005ace <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ab8:	f7fd ff68 	bl	800398c <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e0cb      	b.n	8005c66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ace:	4b49      	ldr	r3, [pc, #292]	; (8005bf4 <HAL_RCC_OscConfig+0x470>)
 8005ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0ee      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x334>
 8005ada:	e014      	b.n	8005b06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005adc:	f7fd ff56 	bl	800398c <HAL_GetTick>
 8005ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ae2:	e00a      	b.n	8005afa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ae4:	f7fd ff52 	bl	800398c <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e0b5      	b.n	8005c66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005afa:	4b3e      	ldr	r3, [pc, #248]	; (8005bf4 <HAL_RCC_OscConfig+0x470>)
 8005afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1ee      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b06:	7dfb      	ldrb	r3, [r7, #23]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d105      	bne.n	8005b18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b0c:	4b39      	ldr	r3, [pc, #228]	; (8005bf4 <HAL_RCC_OscConfig+0x470>)
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b10:	4a38      	ldr	r2, [pc, #224]	; (8005bf4 <HAL_RCC_OscConfig+0x470>)
 8005b12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 80a1 	beq.w	8005c64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b22:	4b34      	ldr	r3, [pc, #208]	; (8005bf4 <HAL_RCC_OscConfig+0x470>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f003 030c 	and.w	r3, r3, #12
 8005b2a:	2b08      	cmp	r3, #8
 8005b2c:	d05c      	beq.n	8005be8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d141      	bne.n	8005bba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b36:	4b31      	ldr	r3, [pc, #196]	; (8005bfc <HAL_RCC_OscConfig+0x478>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b3c:	f7fd ff26 	bl	800398c <HAL_GetTick>
 8005b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b42:	e008      	b.n	8005b56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b44:	f7fd ff22 	bl	800398c <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e087      	b.n	8005c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b56:	4b27      	ldr	r3, [pc, #156]	; (8005bf4 <HAL_RCC_OscConfig+0x470>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1f0      	bne.n	8005b44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	69da      	ldr	r2, [r3, #28]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	019b      	lsls	r3, r3, #6
 8005b72:	431a      	orrs	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b78:	085b      	lsrs	r3, r3, #1
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	041b      	lsls	r3, r3, #16
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b84:	061b      	lsls	r3, r3, #24
 8005b86:	491b      	ldr	r1, [pc, #108]	; (8005bf4 <HAL_RCC_OscConfig+0x470>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b8c:	4b1b      	ldr	r3, [pc, #108]	; (8005bfc <HAL_RCC_OscConfig+0x478>)
 8005b8e:	2201      	movs	r2, #1
 8005b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b92:	f7fd fefb 	bl	800398c <HAL_GetTick>
 8005b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b98:	e008      	b.n	8005bac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b9a:	f7fd fef7 	bl	800398c <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d901      	bls.n	8005bac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e05c      	b.n	8005c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bac:	4b11      	ldr	r3, [pc, #68]	; (8005bf4 <HAL_RCC_OscConfig+0x470>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d0f0      	beq.n	8005b9a <HAL_RCC_OscConfig+0x416>
 8005bb8:	e054      	b.n	8005c64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bba:	4b10      	ldr	r3, [pc, #64]	; (8005bfc <HAL_RCC_OscConfig+0x478>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc0:	f7fd fee4 	bl	800398c <HAL_GetTick>
 8005bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bc6:	e008      	b.n	8005bda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bc8:	f7fd fee0 	bl	800398c <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d901      	bls.n	8005bda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e045      	b.n	8005c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bda:	4b06      	ldr	r3, [pc, #24]	; (8005bf4 <HAL_RCC_OscConfig+0x470>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1f0      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x444>
 8005be6:	e03d      	b.n	8005c64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d107      	bne.n	8005c00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e038      	b.n	8005c66 <HAL_RCC_OscConfig+0x4e2>
 8005bf4:	40023800 	.word	0x40023800
 8005bf8:	40007000 	.word	0x40007000
 8005bfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c00:	4b1b      	ldr	r3, [pc, #108]	; (8005c70 <HAL_RCC_OscConfig+0x4ec>)
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d028      	beq.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d121      	bne.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d11a      	bne.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c30:	4013      	ands	r3, r2
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d111      	bne.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c46:	085b      	lsrs	r3, r3, #1
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d107      	bne.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d001      	beq.n	8005c64 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e000      	b.n	8005c66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	40023800 	.word	0x40023800

08005c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e0cc      	b.n	8005e22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c88:	4b68      	ldr	r3, [pc, #416]	; (8005e2c <HAL_RCC_ClockConfig+0x1b8>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	683a      	ldr	r2, [r7, #0]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d90c      	bls.n	8005cb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c96:	4b65      	ldr	r3, [pc, #404]	; (8005e2c <HAL_RCC_ClockConfig+0x1b8>)
 8005c98:	683a      	ldr	r2, [r7, #0]
 8005c9a:	b2d2      	uxtb	r2, r2
 8005c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c9e:	4b63      	ldr	r3, [pc, #396]	; (8005e2c <HAL_RCC_ClockConfig+0x1b8>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0307 	and.w	r3, r3, #7
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d001      	beq.n	8005cb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e0b8      	b.n	8005e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d020      	beq.n	8005cfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d005      	beq.n	8005cd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cc8:	4b59      	ldr	r3, [pc, #356]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	4a58      	ldr	r2, [pc, #352]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005cce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005cd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0308 	and.w	r3, r3, #8
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d005      	beq.n	8005cec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ce0:	4b53      	ldr	r3, [pc, #332]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	4a52      	ldr	r2, [pc, #328]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005cea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cec:	4b50      	ldr	r3, [pc, #320]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	494d      	ldr	r1, [pc, #308]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d044      	beq.n	8005d94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d107      	bne.n	8005d22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d12:	4b47      	ldr	r3, [pc, #284]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d119      	bne.n	8005d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e07f      	b.n	8005e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d003      	beq.n	8005d32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d2e:	2b03      	cmp	r3, #3
 8005d30:	d107      	bne.n	8005d42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d32:	4b3f      	ldr	r3, [pc, #252]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d109      	bne.n	8005d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e06f      	b.n	8005e22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d42:	4b3b      	ldr	r3, [pc, #236]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e067      	b.n	8005e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d52:	4b37      	ldr	r3, [pc, #220]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f023 0203 	bic.w	r2, r3, #3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	4934      	ldr	r1, [pc, #208]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d64:	f7fd fe12 	bl	800398c <HAL_GetTick>
 8005d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d6a:	e00a      	b.n	8005d82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d6c:	f7fd fe0e 	bl	800398c <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e04f      	b.n	8005e22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d82:	4b2b      	ldr	r3, [pc, #172]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f003 020c 	and.w	r2, r3, #12
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d1eb      	bne.n	8005d6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d94:	4b25      	ldr	r3, [pc, #148]	; (8005e2c <HAL_RCC_ClockConfig+0x1b8>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0307 	and.w	r3, r3, #7
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d20c      	bcs.n	8005dbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005da2:	4b22      	ldr	r3, [pc, #136]	; (8005e2c <HAL_RCC_ClockConfig+0x1b8>)
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	b2d2      	uxtb	r2, r2
 8005da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005daa:	4b20      	ldr	r3, [pc, #128]	; (8005e2c <HAL_RCC_ClockConfig+0x1b8>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0307 	and.w	r3, r3, #7
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d001      	beq.n	8005dbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e032      	b.n	8005e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0304 	and.w	r3, r3, #4
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d008      	beq.n	8005dda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dc8:	4b19      	ldr	r3, [pc, #100]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	4916      	ldr	r1, [pc, #88]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0308 	and.w	r3, r3, #8
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d009      	beq.n	8005dfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005de6:	4b12      	ldr	r3, [pc, #72]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	490e      	ldr	r1, [pc, #56]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005dfa:	f000 f821 	bl	8005e40 <HAL_RCC_GetSysClockFreq>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	4b0b      	ldr	r3, [pc, #44]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	091b      	lsrs	r3, r3, #4
 8005e06:	f003 030f 	and.w	r3, r3, #15
 8005e0a:	490a      	ldr	r1, [pc, #40]	; (8005e34 <HAL_RCC_ClockConfig+0x1c0>)
 8005e0c:	5ccb      	ldrb	r3, [r1, r3]
 8005e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e12:	4a09      	ldr	r2, [pc, #36]	; (8005e38 <HAL_RCC_ClockConfig+0x1c4>)
 8005e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e16:	4b09      	ldr	r3, [pc, #36]	; (8005e3c <HAL_RCC_ClockConfig+0x1c8>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fd fd72 	bl	8003904 <HAL_InitTick>

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	40023c00 	.word	0x40023c00
 8005e30:	40023800 	.word	0x40023800
 8005e34:	0800ec50 	.word	0x0800ec50
 8005e38:	20000104 	.word	0x20000104
 8005e3c:	20000108 	.word	0x20000108

08005e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e44:	b094      	sub	sp, #80	; 0x50
 8005e46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	647b      	str	r3, [r7, #68]	; 0x44
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e50:	2300      	movs	r3, #0
 8005e52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005e54:	2300      	movs	r3, #0
 8005e56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e58:	4b79      	ldr	r3, [pc, #484]	; (8006040 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f003 030c 	and.w	r3, r3, #12
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d00d      	beq.n	8005e80 <HAL_RCC_GetSysClockFreq+0x40>
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	f200 80e1 	bhi.w	800602c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d002      	beq.n	8005e74 <HAL_RCC_GetSysClockFreq+0x34>
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	d003      	beq.n	8005e7a <HAL_RCC_GetSysClockFreq+0x3a>
 8005e72:	e0db      	b.n	800602c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e74:	4b73      	ldr	r3, [pc, #460]	; (8006044 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e76:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005e78:	e0db      	b.n	8006032 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e7a:	4b73      	ldr	r3, [pc, #460]	; (8006048 <HAL_RCC_GetSysClockFreq+0x208>)
 8005e7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e7e:	e0d8      	b.n	8006032 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e80:	4b6f      	ldr	r3, [pc, #444]	; (8006040 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e88:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e8a:	4b6d      	ldr	r3, [pc, #436]	; (8006040 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d063      	beq.n	8005f5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e96:	4b6a      	ldr	r3, [pc, #424]	; (8006040 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	099b      	lsrs	r3, r3, #6
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ea0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ea8:	633b      	str	r3, [r7, #48]	; 0x30
 8005eaa:	2300      	movs	r3, #0
 8005eac:	637b      	str	r3, [r7, #52]	; 0x34
 8005eae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005eb2:	4622      	mov	r2, r4
 8005eb4:	462b      	mov	r3, r5
 8005eb6:	f04f 0000 	mov.w	r0, #0
 8005eba:	f04f 0100 	mov.w	r1, #0
 8005ebe:	0159      	lsls	r1, r3, #5
 8005ec0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ec4:	0150      	lsls	r0, r2, #5
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	4621      	mov	r1, r4
 8005ecc:	1a51      	subs	r1, r2, r1
 8005ece:	6139      	str	r1, [r7, #16]
 8005ed0:	4629      	mov	r1, r5
 8005ed2:	eb63 0301 	sbc.w	r3, r3, r1
 8005ed6:	617b      	str	r3, [r7, #20]
 8005ed8:	f04f 0200 	mov.w	r2, #0
 8005edc:	f04f 0300 	mov.w	r3, #0
 8005ee0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ee4:	4659      	mov	r1, fp
 8005ee6:	018b      	lsls	r3, r1, #6
 8005ee8:	4651      	mov	r1, sl
 8005eea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005eee:	4651      	mov	r1, sl
 8005ef0:	018a      	lsls	r2, r1, #6
 8005ef2:	4651      	mov	r1, sl
 8005ef4:	ebb2 0801 	subs.w	r8, r2, r1
 8005ef8:	4659      	mov	r1, fp
 8005efa:	eb63 0901 	sbc.w	r9, r3, r1
 8005efe:	f04f 0200 	mov.w	r2, #0
 8005f02:	f04f 0300 	mov.w	r3, #0
 8005f06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f12:	4690      	mov	r8, r2
 8005f14:	4699      	mov	r9, r3
 8005f16:	4623      	mov	r3, r4
 8005f18:	eb18 0303 	adds.w	r3, r8, r3
 8005f1c:	60bb      	str	r3, [r7, #8]
 8005f1e:	462b      	mov	r3, r5
 8005f20:	eb49 0303 	adc.w	r3, r9, r3
 8005f24:	60fb      	str	r3, [r7, #12]
 8005f26:	f04f 0200 	mov.w	r2, #0
 8005f2a:	f04f 0300 	mov.w	r3, #0
 8005f2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f32:	4629      	mov	r1, r5
 8005f34:	024b      	lsls	r3, r1, #9
 8005f36:	4621      	mov	r1, r4
 8005f38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	024a      	lsls	r2, r1, #9
 8005f40:	4610      	mov	r0, r2
 8005f42:	4619      	mov	r1, r3
 8005f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f46:	2200      	movs	r2, #0
 8005f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f50:	f7fa fea2 	bl	8000c98 <__aeabi_uldivmod>
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	4613      	mov	r3, r2
 8005f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f5c:	e058      	b.n	8006010 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f5e:	4b38      	ldr	r3, [pc, #224]	; (8006040 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	099b      	lsrs	r3, r3, #6
 8005f64:	2200      	movs	r2, #0
 8005f66:	4618      	mov	r0, r3
 8005f68:	4611      	mov	r1, r2
 8005f6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f6e:	623b      	str	r3, [r7, #32]
 8005f70:	2300      	movs	r3, #0
 8005f72:	627b      	str	r3, [r7, #36]	; 0x24
 8005f74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f78:	4642      	mov	r2, r8
 8005f7a:	464b      	mov	r3, r9
 8005f7c:	f04f 0000 	mov.w	r0, #0
 8005f80:	f04f 0100 	mov.w	r1, #0
 8005f84:	0159      	lsls	r1, r3, #5
 8005f86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f8a:	0150      	lsls	r0, r2, #5
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4641      	mov	r1, r8
 8005f92:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f96:	4649      	mov	r1, r9
 8005f98:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f9c:	f04f 0200 	mov.w	r2, #0
 8005fa0:	f04f 0300 	mov.w	r3, #0
 8005fa4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005fa8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005fac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005fb0:	ebb2 040a 	subs.w	r4, r2, sl
 8005fb4:	eb63 050b 	sbc.w	r5, r3, fp
 8005fb8:	f04f 0200 	mov.w	r2, #0
 8005fbc:	f04f 0300 	mov.w	r3, #0
 8005fc0:	00eb      	lsls	r3, r5, #3
 8005fc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fc6:	00e2      	lsls	r2, r4, #3
 8005fc8:	4614      	mov	r4, r2
 8005fca:	461d      	mov	r5, r3
 8005fcc:	4643      	mov	r3, r8
 8005fce:	18e3      	adds	r3, r4, r3
 8005fd0:	603b      	str	r3, [r7, #0]
 8005fd2:	464b      	mov	r3, r9
 8005fd4:	eb45 0303 	adc.w	r3, r5, r3
 8005fd8:	607b      	str	r3, [r7, #4]
 8005fda:	f04f 0200 	mov.w	r2, #0
 8005fde:	f04f 0300 	mov.w	r3, #0
 8005fe2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005fe6:	4629      	mov	r1, r5
 8005fe8:	028b      	lsls	r3, r1, #10
 8005fea:	4621      	mov	r1, r4
 8005fec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ff0:	4621      	mov	r1, r4
 8005ff2:	028a      	lsls	r2, r1, #10
 8005ff4:	4610      	mov	r0, r2
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	61bb      	str	r3, [r7, #24]
 8005ffe:	61fa      	str	r2, [r7, #28]
 8006000:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006004:	f7fa fe48 	bl	8000c98 <__aeabi_uldivmod>
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	4613      	mov	r3, r2
 800600e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006010:	4b0b      	ldr	r3, [pc, #44]	; (8006040 <HAL_RCC_GetSysClockFreq+0x200>)
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	0c1b      	lsrs	r3, r3, #16
 8006016:	f003 0303 	and.w	r3, r3, #3
 800601a:	3301      	adds	r3, #1
 800601c:	005b      	lsls	r3, r3, #1
 800601e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006020:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006024:	fbb2 f3f3 	udiv	r3, r2, r3
 8006028:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800602a:	e002      	b.n	8006032 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800602c:	4b05      	ldr	r3, [pc, #20]	; (8006044 <HAL_RCC_GetSysClockFreq+0x204>)
 800602e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006030:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006034:	4618      	mov	r0, r3
 8006036:	3750      	adds	r7, #80	; 0x50
 8006038:	46bd      	mov	sp, r7
 800603a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800603e:	bf00      	nop
 8006040:	40023800 	.word	0x40023800
 8006044:	00f42400 	.word	0x00f42400
 8006048:	007a1200 	.word	0x007a1200

0800604c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800604c:	b480      	push	{r7}
 800604e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006050:	4b03      	ldr	r3, [pc, #12]	; (8006060 <HAL_RCC_GetHCLKFreq+0x14>)
 8006052:	681b      	ldr	r3, [r3, #0]
}
 8006054:	4618      	mov	r0, r3
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	20000104 	.word	0x20000104

08006064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006068:	f7ff fff0 	bl	800604c <HAL_RCC_GetHCLKFreq>
 800606c:	4602      	mov	r2, r0
 800606e:	4b05      	ldr	r3, [pc, #20]	; (8006084 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	0a9b      	lsrs	r3, r3, #10
 8006074:	f003 0307 	and.w	r3, r3, #7
 8006078:	4903      	ldr	r1, [pc, #12]	; (8006088 <HAL_RCC_GetPCLK1Freq+0x24>)
 800607a:	5ccb      	ldrb	r3, [r1, r3]
 800607c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006080:	4618      	mov	r0, r3
 8006082:	bd80      	pop	{r7, pc}
 8006084:	40023800 	.word	0x40023800
 8006088:	0800ec60 	.word	0x0800ec60

0800608c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006090:	f7ff ffdc 	bl	800604c <HAL_RCC_GetHCLKFreq>
 8006094:	4602      	mov	r2, r0
 8006096:	4b05      	ldr	r3, [pc, #20]	; (80060ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	0b5b      	lsrs	r3, r3, #13
 800609c:	f003 0307 	and.w	r3, r3, #7
 80060a0:	4903      	ldr	r1, [pc, #12]	; (80060b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060a2:	5ccb      	ldrb	r3, [r1, r3]
 80060a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	40023800 	.word	0x40023800
 80060b0:	0800ec60 	.word	0x0800ec60

080060b4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e022      	b.n	800610c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d105      	bne.n	80060de <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f7fc ffe9 	bl	80030b0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2203      	movs	r2, #3
 80060e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f814 	bl	8006114 <HAL_SD_InitCard>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d001      	beq.n	80060f6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e00a      	b.n	800610c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006114:	b5b0      	push	{r4, r5, r7, lr}
 8006116:	b08e      	sub	sp, #56	; 0x38
 8006118:	af04      	add	r7, sp, #16
 800611a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800611c:	2300      	movs	r3, #0
 800611e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006120:	2300      	movs	r3, #0
 8006122:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006124:	2300      	movs	r3, #0
 8006126:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006128:	2300      	movs	r3, #0
 800612a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800612c:	2300      	movs	r3, #0
 800612e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006130:	2376      	movs	r3, #118	; 0x76
 8006132:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681d      	ldr	r5, [r3, #0]
 8006138:	466c      	mov	r4, sp
 800613a:	f107 0314 	add.w	r3, r7, #20
 800613e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006142:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006146:	f107 0308 	add.w	r3, r7, #8
 800614a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800614c:	4628      	mov	r0, r5
 800614e:	f002 f8d5 	bl	80082fc <SDIO_Init>
 8006152:	4603      	mov	r3, r0
 8006154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800615c:	2b00      	cmp	r3, #0
 800615e:	d001      	beq.n	8006164 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e04f      	b.n	8006204 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006164:	4b29      	ldr	r3, [pc, #164]	; (800620c <HAL_SD_InitCard+0xf8>)
 8006166:	2200      	movs	r2, #0
 8006168:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4618      	mov	r0, r3
 8006170:	f002 f90d 	bl	800838e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006174:	4b25      	ldr	r3, [pc, #148]	; (800620c <HAL_SD_InitCard+0xf8>)
 8006176:	2201      	movs	r2, #1
 8006178:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800617a:	2002      	movs	r0, #2
 800617c:	f7fd fc12 	bl	80039a4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 ff6b 	bl	800705c <SD_PowerON>
 8006186:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006188:	6a3b      	ldr	r3, [r7, #32]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00b      	beq.n	80061a6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	431a      	orrs	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e02e      	b.n	8006204 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fe8a 	bl	8006ec0 <SD_InitCard>
 80061ac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80061ae:	6a3b      	ldr	r3, [r7, #32]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00b      	beq.n	80061cc <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e01b      	b.n	8006204 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061d4:	4618      	mov	r0, r3
 80061d6:	f002 f96c 	bl	80084b2 <SDMMC_CmdBlockLength>
 80061da:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80061dc:	6a3b      	ldr	r3, [r7, #32]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00f      	beq.n	8006202 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a0a      	ldr	r2, [pc, #40]	; (8006210 <HAL_SD_InitCard+0xfc>)
 80061e8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	431a      	orrs	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e000      	b.n	8006204 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3728      	adds	r7, #40	; 0x28
 8006208:	46bd      	mov	sp, r7
 800620a:	bdb0      	pop	{r4, r5, r7, pc}
 800620c:	422580a0 	.word	0x422580a0
 8006210:	004005ff 	.word	0x004005ff

08006214 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b08c      	sub	sp, #48	; 0x30
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d107      	bne.n	800623c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006230:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e0c0      	b.n	80063be <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006242:	b2db      	uxtb	r3, r3
 8006244:	2b01      	cmp	r3, #1
 8006246:	f040 80b9 	bne.w	80063bc <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	441a      	add	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800625a:	429a      	cmp	r2, r3
 800625c:	d907      	bls.n	800626e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006262:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e0a7      	b.n	80063be <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2203      	movs	r2, #3
 8006272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2200      	movs	r2, #0
 800627c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	6812      	ldr	r2, [r2, #0]
 8006288:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800628c:	f043 0302 	orr.w	r3, r3, #2
 8006290:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	4a4c      	ldr	r2, [pc, #304]	; (80063c8 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8006298:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629e:	4a4b      	ldr	r2, [pc, #300]	; (80063cc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80062a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a6:	2200      	movs	r2, #0
 80062a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ae:	2200      	movs	r2, #0
 80062b0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	430a      	orrs	r2, r1
 80062cc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	3380      	adds	r3, #128	; 0x80
 80062d8:	4619      	mov	r1, r3
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	025b      	lsls	r3, r3, #9
 80062e0:	089b      	lsrs	r3, r3, #2
 80062e2:	f7fd fdd1 	bl	8003e88 <HAL_DMA_Start_IT>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d017      	beq.n	800631c <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80062fa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a33      	ldr	r2, [pc, #204]	; (80063d0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006302:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006308:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e050      	b.n	80063be <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800631c:	4b2d      	ldr	r3, [pc, #180]	; (80063d4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800631e:	2201      	movs	r2, #1
 8006320:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006326:	2b01      	cmp	r3, #1
 8006328:	d002      	beq.n	8006330 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800632a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632c:	025b      	lsls	r3, r3, #9
 800632e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006330:	f04f 33ff 	mov.w	r3, #4294967295
 8006334:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	025b      	lsls	r3, r3, #9
 800633a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800633c:	2390      	movs	r3, #144	; 0x90
 800633e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006340:	2302      	movs	r3, #2
 8006342:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006344:	2300      	movs	r3, #0
 8006346:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006348:	2301      	movs	r3, #1
 800634a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f107 0210 	add.w	r2, r7, #16
 8006354:	4611      	mov	r1, r2
 8006356:	4618      	mov	r0, r3
 8006358:	f002 f87f 	bl	800845a <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d90a      	bls.n	8006378 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2282      	movs	r2, #130	; 0x82
 8006366:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800636e:	4618      	mov	r0, r3
 8006370:	f002 f8e3 	bl	800853a <SDMMC_CmdReadMultiBlock>
 8006374:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006376:	e009      	b.n	800638c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2281      	movs	r2, #129	; 0x81
 800637c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006384:	4618      	mov	r0, r3
 8006386:	f002 f8b6 	bl	80084f6 <SDMMC_CmdReadSingleBlock>
 800638a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800638c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638e:	2b00      	cmp	r3, #0
 8006390:	d012      	beq.n	80063b8 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a0e      	ldr	r2, [pc, #56]	; (80063d0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006398:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800639e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a0:	431a      	orrs	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e002      	b.n	80063be <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80063b8:	2300      	movs	r3, #0
 80063ba:	e000      	b.n	80063be <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80063bc:	2302      	movs	r3, #2
  }
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3730      	adds	r7, #48	; 0x30
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	08006ccf 	.word	0x08006ccf
 80063cc:	08006d41 	.word	0x08006d41
 80063d0:	004005ff 	.word	0x004005ff
 80063d4:	4225858c 	.word	0x4225858c

080063d8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08c      	sub	sp, #48	; 0x30
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
 80063e4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d107      	bne.n	8006400 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e0c5      	b.n	800658c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b01      	cmp	r3, #1
 800640a:	f040 80be 	bne.w	800658a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006414:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	441a      	add	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800641e:	429a      	cmp	r2, r3
 8006420:	d907      	bls.n	8006432 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006426:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e0ac      	b.n	800658c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2203      	movs	r2, #3
 8006436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2200      	movs	r2, #0
 8006440:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	6812      	ldr	r2, [r2, #0]
 800644c:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8006450:	f043 0302 	orr.w	r3, r3, #2
 8006454:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800645a:	4a4e      	ldr	r2, [pc, #312]	; (8006594 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800645c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006462:	4a4d      	ldr	r2, [pc, #308]	; (8006598 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006464:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800646a:	2200      	movs	r2, #0
 800646c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006472:	2b01      	cmp	r3, #1
 8006474:	d002      	beq.n	800647c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8006476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006478:	025b      	lsls	r3, r3, #9
 800647a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d90a      	bls.n	8006498 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	22a0      	movs	r2, #160	; 0xa0
 8006486:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800648e:	4618      	mov	r0, r3
 8006490:	f002 f897 	bl	80085c2 <SDMMC_CmdWriteMultiBlock>
 8006494:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006496:	e009      	b.n	80064ac <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2290      	movs	r2, #144	; 0x90
 800649c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064a4:	4618      	mov	r0, r3
 80064a6:	f002 f86a 	bl	800857e <SDMMC_CmdWriteSingleBlock>
 80064aa:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80064ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d012      	beq.n	80064d8 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a39      	ldr	r2, [pc, #228]	; (800659c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80064b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c0:	431a      	orrs	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e059      	b.n	800658c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80064d8:	4b31      	ldr	r3, [pc, #196]	; (80065a0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80064da:	2201      	movs	r2, #1
 80064dc:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e2:	2240      	movs	r2, #64	; 0x40
 80064e4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f6:	689a      	ldr	r2, [r3, #8]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006506:	68b9      	ldr	r1, [r7, #8]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3380      	adds	r3, #128	; 0x80
 800650e:	461a      	mov	r2, r3
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	025b      	lsls	r3, r3, #9
 8006514:	089b      	lsrs	r3, r3, #2
 8006516:	f7fd fcb7 	bl	8003e88 <HAL_DMA_Start_IT>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d01c      	beq.n	800655a <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	6812      	ldr	r2, [r2, #0]
 800652a:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800652e:	f023 0302 	bic.w	r3, r3, #2
 8006532:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a18      	ldr	r2, [pc, #96]	; (800659c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800653a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006540:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e018      	b.n	800658c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800655a:	f04f 33ff 	mov.w	r3, #4294967295
 800655e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	025b      	lsls	r3, r3, #9
 8006564:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006566:	2390      	movs	r3, #144	; 0x90
 8006568:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800656a:	2300      	movs	r3, #0
 800656c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800656e:	2300      	movs	r3, #0
 8006570:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006572:	2301      	movs	r3, #1
 8006574:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f107 0210 	add.w	r2, r7, #16
 800657e:	4611      	mov	r1, r2
 8006580:	4618      	mov	r0, r3
 8006582:	f001 ff6a 	bl	800845a <SDIO_ConfigData>

      return HAL_OK;
 8006586:	2300      	movs	r3, #0
 8006588:	e000      	b.n	800658c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800658a:	2302      	movs	r3, #2
  }
}
 800658c:	4618      	mov	r0, r3
 800658e:	3730      	adds	r7, #48	; 0x30
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	08006ca5 	.word	0x08006ca5
 8006598:	08006d41 	.word	0x08006d41
 800659c:	004005ff 	.word	0x004005ff
 80065a0:	4225858c 	.word	0x4225858c

080065a4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d008      	beq.n	80065d2 <HAL_SD_IRQHandler+0x2e>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f003 0308 	and.w	r3, r3, #8
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 fdfc 	bl	80071c8 <SD_Read_IT>
 80065d0:	e165      	b.n	800689e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f000 808f 	beq.w	8006700 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065ea:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	6812      	ldr	r2, [r2, #0]
 80065f6:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80065fa:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80065fe:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 0201 	bic.w	r2, r2, #1
 800660e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f003 0308 	and.w	r3, r3, #8
 8006616:	2b00      	cmp	r3, #0
 8006618:	d039      	beq.n	800668e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f003 0302 	and.w	r3, r3, #2
 8006620:	2b00      	cmp	r3, #0
 8006622:	d104      	bne.n	800662e <HAL_SD_IRQHandler+0x8a>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f003 0320 	and.w	r3, r3, #32
 800662a:	2b00      	cmp	r3, #0
 800662c:	d011      	beq.n	8006652 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4618      	mov	r0, r3
 8006634:	f001 ffe8 	bl	8008608 <SDMMC_CmdStopTransfer>
 8006638:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d008      	beq.n	8006652 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	431a      	orrs	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f92f 	bl	80068b0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f240 523a 	movw	r2, #1338	; 0x53a
 800665a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b00      	cmp	r3, #0
 8006672:	d104      	bne.n	800667e <HAL_SD_IRQHandler+0xda>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f002 fc06 	bl	8008e90 <HAL_SD_RxCpltCallback>
 8006684:	e10b      	b.n	800689e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f002 fbf8 	bl	8008e7c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800668c:	e107      	b.n	800689e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 8102 	beq.w	800689e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f003 0320 	and.w	r3, r3, #32
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d011      	beq.n	80066c8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f001 ffad 	bl	8008608 <SDMMC_CmdStopTransfer>
 80066ae:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d008      	beq.n	80066c8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	431a      	orrs	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f8f4 	bl	80068b0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f040 80e5 	bne.w	800689e <HAL_SD_IRQHandler+0x2fa>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f040 80df 	bne.w	800689e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 0208 	bic.w	r2, r2, #8
 80066ee:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f002 fbbf 	bl	8008e7c <HAL_SD_TxCpltCallback>
}
 80066fe:	e0ce      	b.n	800689e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d008      	beq.n	8006720 <HAL_SD_IRQHandler+0x17c>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f003 0308 	and.w	r3, r3, #8
 8006714:	2b00      	cmp	r3, #0
 8006716:	d003      	beq.n	8006720 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fda6 	bl	800726a <SD_Write_IT>
 800671e:	e0be      	b.n	800689e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006726:	f240 233a 	movw	r3, #570	; 0x23a
 800672a:	4013      	ands	r3, r2
 800672c:	2b00      	cmp	r3, #0
 800672e:	f000 80b6 	beq.w	800689e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	2b00      	cmp	r3, #0
 800673e:	d005      	beq.n	800674c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006744:	f043 0202 	orr.w	r2, r3, #2
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006752:	f003 0308 	and.w	r3, r3, #8
 8006756:	2b00      	cmp	r3, #0
 8006758:	d005      	beq.n	8006766 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675e:	f043 0208 	orr.w	r2, r3, #8
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800676c:	f003 0320 	and.w	r3, r3, #32
 8006770:	2b00      	cmp	r3, #0
 8006772:	d005      	beq.n	8006780 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006778:	f043 0220 	orr.w	r2, r3, #32
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006786:	f003 0310 	and.w	r3, r3, #16
 800678a:	2b00      	cmp	r3, #0
 800678c:	d005      	beq.n	800679a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006792:	f043 0210 	orr.w	r2, r3, #16
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d005      	beq.n	80067b4 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ac:	f043 0208 	orr.w	r2, r3, #8
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f240 723a 	movw	r2, #1850	; 0x73a
 80067bc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	6812      	ldr	r2, [r2, #0]
 80067c8:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80067cc:	f023 0302 	bic.w	r3, r3, #2
 80067d0:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f001 ff16 	bl	8008608 <SDMMC_CmdStopTransfer>
 80067dc:	4602      	mov	r2, r0
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e2:	431a      	orrs	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f003 0308 	and.w	r3, r3, #8
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00a      	beq.n	8006808 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 f855 	bl	80068b0 <HAL_SD_ErrorCallback>
}
 8006806:	e04a      	b.n	800689e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800680e:	2b00      	cmp	r3, #0
 8006810:	d045      	beq.n	800689e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f003 0310 	and.w	r3, r3, #16
 8006818:	2b00      	cmp	r3, #0
 800681a:	d104      	bne.n	8006826 <HAL_SD_IRQHandler+0x282>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f003 0320 	and.w	r3, r3, #32
 8006822:	2b00      	cmp	r3, #0
 8006824:	d011      	beq.n	800684a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682a:	4a1f      	ldr	r2, [pc, #124]	; (80068a8 <HAL_SD_IRQHandler+0x304>)
 800682c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006832:	4618      	mov	r0, r3
 8006834:	f7fd fb80 	bl	8003f38 <HAL_DMA_Abort_IT>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d02f      	beq.n	800689e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006842:	4618      	mov	r0, r3
 8006844:	f000 face 	bl	8006de4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006848:	e029      	b.n	800689e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	2b00      	cmp	r3, #0
 8006852:	d104      	bne.n	800685e <HAL_SD_IRQHandler+0x2ba>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f003 0302 	and.w	r3, r3, #2
 800685a:	2b00      	cmp	r3, #0
 800685c:	d011      	beq.n	8006882 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006862:	4a12      	ldr	r2, [pc, #72]	; (80068ac <HAL_SD_IRQHandler+0x308>)
 8006864:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686a:	4618      	mov	r0, r3
 800686c:	f7fd fb64 	bl	8003f38 <HAL_DMA_Abort_IT>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d013      	beq.n	800689e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687a:	4618      	mov	r0, r3
 800687c:	f000 fae9 	bl	8006e52 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006880:	e00d      	b.n	800689e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f002 fae6 	bl	8008e68 <HAL_SD_AbortCallback>
}
 800689c:	e7ff      	b.n	800689e <HAL_SD_IRQHandler+0x2fa>
 800689e:	bf00      	nop
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	08006de5 	.word	0x08006de5
 80068ac:	08006e53 	.word	0x08006e53

080068b0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068d2:	0f9b      	lsrs	r3, r3, #30
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068de:	0e9b      	lsrs	r3, r3, #26
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	f003 030f 	and.w	r3, r3, #15
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068f0:	0e1b      	lsrs	r3, r3, #24
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	f003 0303 	and.w	r3, r3, #3
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006902:	0c1b      	lsrs	r3, r3, #16
 8006904:	b2da      	uxtb	r2, r3
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800690e:	0a1b      	lsrs	r3, r3, #8
 8006910:	b2da      	uxtb	r2, r3
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800691a:	b2da      	uxtb	r2, r3
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006924:	0d1b      	lsrs	r3, r3, #20
 8006926:	b29a      	uxth	r2, r3
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006930:	0c1b      	lsrs	r3, r3, #16
 8006932:	b2db      	uxtb	r3, r3
 8006934:	f003 030f 	and.w	r3, r3, #15
 8006938:	b2da      	uxtb	r2, r3
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006942:	0bdb      	lsrs	r3, r3, #15
 8006944:	b2db      	uxtb	r3, r3
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	b2da      	uxtb	r2, r3
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006954:	0b9b      	lsrs	r3, r3, #14
 8006956:	b2db      	uxtb	r3, r3
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	b2da      	uxtb	r2, r3
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006966:	0b5b      	lsrs	r3, r3, #13
 8006968:	b2db      	uxtb	r3, r3
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	b2da      	uxtb	r2, r3
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006978:	0b1b      	lsrs	r3, r3, #12
 800697a:	b2db      	uxtb	r3, r3
 800697c:	f003 0301 	and.w	r3, r3, #1
 8006980:	b2da      	uxtb	r2, r3
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2200      	movs	r2, #0
 800698a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006990:	2b00      	cmp	r3, #0
 8006992:	d163      	bne.n	8006a5c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006998:	009a      	lsls	r2, r3, #2
 800699a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800699e:	4013      	ands	r3, r2
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80069a4:	0f92      	lsrs	r2, r2, #30
 80069a6:	431a      	orrs	r2, r3
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069b0:	0edb      	lsrs	r3, r3, #27
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	f003 0307 	and.w	r3, r3, #7
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069c2:	0e1b      	lsrs	r3, r3, #24
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	f003 0307 	and.w	r3, r3, #7
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069d4:	0d5b      	lsrs	r3, r3, #21
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	f003 0307 	and.w	r3, r3, #7
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069e6:	0c9b      	lsrs	r3, r3, #18
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	f003 0307 	and.w	r3, r3, #7
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069f8:	0bdb      	lsrs	r3, r3, #15
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	f003 0307 	and.w	r3, r3, #7
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	7e1b      	ldrb	r3, [r3, #24]
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	f003 0307 	and.w	r3, r3, #7
 8006a1a:	3302      	adds	r3, #2
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006a26:	fb03 f202 	mul.w	r2, r3, r2
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	7a1b      	ldrb	r3, [r3, #8]
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	f003 030f 	and.w	r3, r3, #15
 8006a38:	2201      	movs	r2, #1
 8006a3a:	409a      	lsls	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006a48:	0a52      	lsrs	r2, r2, #9
 8006a4a:	fb03 f202 	mul.w	r2, r3, r2
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a58:	661a      	str	r2, [r3, #96]	; 0x60
 8006a5a:	e031      	b.n	8006ac0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d11d      	bne.n	8006aa0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a68:	041b      	lsls	r3, r3, #16
 8006a6a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a72:	0c1b      	lsrs	r3, r3, #16
 8006a74:	431a      	orrs	r2, r3
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	029a      	lsls	r2, r3, #10
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a94:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	661a      	str	r2, [r3, #96]	; 0x60
 8006a9e:	e00f      	b.n	8006ac0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a58      	ldr	r2, [pc, #352]	; (8006c08 <HAL_SD_GetCardCSD+0x344>)
 8006aa6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e09d      	b.n	8006bfc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ac4:	0b9b      	lsrs	r3, r3, #14
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ad6:	09db      	lsrs	r3, r3, #7
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ade:	b2da      	uxtb	r2, r3
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af8:	0fdb      	lsrs	r3, r3, #31
 8006afa:	b2da      	uxtb	r2, r3
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b04:	0f5b      	lsrs	r3, r3, #29
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	f003 0303 	and.w	r3, r3, #3
 8006b0c:	b2da      	uxtb	r2, r3
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b16:	0e9b      	lsrs	r3, r3, #26
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	f003 0307 	and.w	r3, r3, #7
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b28:	0d9b      	lsrs	r3, r3, #22
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	f003 030f 	and.w	r3, r3, #15
 8006b30:	b2da      	uxtb	r2, r3
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b3a:	0d5b      	lsrs	r3, r3, #21
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b56:	0c1b      	lsrs	r3, r3, #16
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6a:	0bdb      	lsrs	r3, r3, #15
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7e:	0b9b      	lsrs	r3, r3, #14
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b92:	0b5b      	lsrs	r3, r3, #13
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba6:	0b1b      	lsrs	r3, r3, #12
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	b2da      	uxtb	r2, r3
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bba:	0a9b      	lsrs	r3, r3, #10
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	f003 0303 	and.w	r3, r3, #3
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bce:	0a1b      	lsrs	r3, r3, #8
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	f003 0303 	and.w	r3, r3, #3
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be2:	085b      	lsrs	r3, r3, #1
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bea:	b2da      	uxtb	r2, r3
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr
 8006c08:	004005ff 	.word	0x004005ff

08006c0c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006c70:	f107 030c 	add.w	r3, r7, #12
 8006c74:	4619      	mov	r1, r3
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fa7e 	bl	8007178 <SD_SendStatus>
 8006c7c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d005      	beq.n	8006c90 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	0a5b      	lsrs	r3, r3, #9
 8006c94:	f003 030f 	and.w	r3, r3, #15
 8006c98:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006c9a:	693b      	ldr	r3, [r7, #16]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3718      	adds	r7, #24
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cc0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006cc2:	bf00      	nop
 8006cc4:	3714      	adds	r7, #20
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr

08006cce <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b084      	sub	sp, #16
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cda:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce0:	2b82      	cmp	r3, #130	; 0x82
 8006ce2:	d111      	bne.n	8006d08 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f001 fc8d 	bl	8008608 <SDMMC_CmdStopTransfer>
 8006cee:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d008      	beq.n	8006d08 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	431a      	orrs	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f7ff fdd4 	bl	80068b0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f022 0208 	bic.w	r2, r2, #8
 8006d16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006d20:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f002 f8ad 	bl	8008e90 <HAL_SD_RxCpltCallback>
#endif
}
 8006d36:	bf00      	nop
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
	...

08006d40 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7fd fa9e 	bl	8004290 <HAL_DMA_GetError>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d03e      	beq.n	8006dd8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d60:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d68:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d002      	beq.n	8006d76 <SD_DMAError+0x36>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d12d      	bne.n	8006dd2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a19      	ldr	r2, [pc, #100]	; (8006de0 <SD_DMAError+0xa0>)
 8006d7c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006d8c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006d9a:	6978      	ldr	r0, [r7, #20]
 8006d9c:	f7ff ff62 	bl	8006c64 <HAL_SD_GetCardState>
 8006da0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2b06      	cmp	r3, #6
 8006da6:	d002      	beq.n	8006dae <SD_DMAError+0x6e>
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2b05      	cmp	r3, #5
 8006dac:	d10a      	bne.n	8006dc4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4618      	mov	r0, r3
 8006db4:	f001 fc28 	bl	8008608 <SDMMC_CmdStopTransfer>
 8006db8:	4602      	mov	r2, r0
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006dd2:	6978      	ldr	r0, [r7, #20]
 8006dd4:	f7ff fd6c 	bl	80068b0 <HAL_SD_ErrorCallback>
#endif
  }
}
 8006dd8:	bf00      	nop
 8006dda:	3718      	adds	r7, #24
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	004005ff 	.word	0x004005ff

08006de4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f240 523a 	movw	r2, #1338	; 0x53a
 8006dfa:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f7ff ff31 	bl	8006c64 <HAL_SD_GetCardState>
 8006e02:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	2b06      	cmp	r3, #6
 8006e16:	d002      	beq.n	8006e1e <SD_DMATxAbort+0x3a>
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2b05      	cmp	r3, #5
 8006e1c:	d10a      	bne.n	8006e34 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4618      	mov	r0, r3
 8006e24:	f001 fbf0 	bl	8008608 <SDMMC_CmdStopTransfer>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2e:	431a      	orrs	r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d103      	bne.n	8006e44 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f002 f813 	bl	8008e68 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006e42:	e002      	b.n	8006e4a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f7ff fd33 	bl	80068b0 <HAL_SD_ErrorCallback>
}
 8006e4a:	bf00      	nop
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b084      	sub	sp, #16
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f240 523a 	movw	r2, #1338	; 0x53a
 8006e68:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f7ff fefa 	bl	8006c64 <HAL_SD_GetCardState>
 8006e70:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	2b06      	cmp	r3, #6
 8006e84:	d002      	beq.n	8006e8c <SD_DMARxAbort+0x3a>
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	2b05      	cmp	r3, #5
 8006e8a:	d10a      	bne.n	8006ea2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f001 fbb9 	bl	8008608 <SDMMC_CmdStopTransfer>
 8006e96:	4602      	mov	r2, r0
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9c:	431a      	orrs	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d103      	bne.n	8006eb2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f001 ffdc 	bl	8008e68 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006eb0:	e002      	b.n	8006eb8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f7ff fcfc 	bl	80068b0 <HAL_SD_ErrorCallback>
}
 8006eb8:	bf00      	nop
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006ec0:	b5b0      	push	{r4, r5, r7, lr}
 8006ec2:	b094      	sub	sp, #80	; 0x50
 8006ec4:	af04      	add	r7, sp, #16
 8006ec6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f001 fa6a 	bl	80083aa <SDIO_GetPowerState>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d102      	bne.n	8006ee2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006edc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006ee0:	e0b8      	b.n	8007054 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d02f      	beq.n	8006f4a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f001 fc51 	bl	8008796 <SDMMC_CmdSendCID>
 8006ef4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d001      	beq.n	8006f00 <SD_InitCard+0x40>
    {
      return errorstate;
 8006efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006efe:	e0a9      	b.n	8007054 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2100      	movs	r1, #0
 8006f06:	4618      	mov	r0, r3
 8006f08:	f001 fa94 	bl	8008434 <SDIO_GetResponse>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2104      	movs	r1, #4
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f001 fa8b 	bl	8008434 <SDIO_GetResponse>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2108      	movs	r1, #8
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f001 fa82 	bl	8008434 <SDIO_GetResponse>
 8006f30:	4602      	mov	r2, r0
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	210c      	movs	r1, #12
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f001 fa79 	bl	8008434 <SDIO_GetResponse>
 8006f42:	4602      	mov	r2, r0
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f4e:	2b03      	cmp	r3, #3
 8006f50:	d00d      	beq.n	8006f6e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f107 020e 	add.w	r2, r7, #14
 8006f5a:	4611      	mov	r1, r2
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f001 fc57 	bl	8008810 <SDMMC_CmdSetRelAdd>
 8006f62:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d001      	beq.n	8006f6e <SD_InitCard+0xae>
    {
      return errorstate;
 8006f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f6c:	e072      	b.n	8007054 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f72:	2b03      	cmp	r3, #3
 8006f74:	d036      	beq.n	8006fe4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006f76:	89fb      	ldrh	r3, [r7, #14]
 8006f78:	461a      	mov	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f86:	041b      	lsls	r3, r3, #16
 8006f88:	4619      	mov	r1, r3
 8006f8a:	4610      	mov	r0, r2
 8006f8c:	f001 fc21 	bl	80087d2 <SDMMC_CmdSendCSD>
 8006f90:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d001      	beq.n	8006f9c <SD_InitCard+0xdc>
    {
      return errorstate;
 8006f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f9a:	e05b      	b.n	8007054 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f001 fa46 	bl	8008434 <SDIO_GetResponse>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2104      	movs	r1, #4
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f001 fa3d 	bl	8008434 <SDIO_GetResponse>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2108      	movs	r1, #8
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f001 fa34 	bl	8008434 <SDIO_GetResponse>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	210c      	movs	r1, #12
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f001 fa2b 	bl	8008434 <SDIO_GetResponse>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2104      	movs	r1, #4
 8006fea:	4618      	mov	r0, r3
 8006fec:	f001 fa22 	bl	8008434 <SDIO_GetResponse>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	0d1a      	lsrs	r2, r3, #20
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006ff8:	f107 0310 	add.w	r3, r7, #16
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7ff fc60 	bl	80068c4 <HAL_SD_GetCardCSD>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d002      	beq.n	8007010 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800700a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800700e:	e021      	b.n	8007054 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6819      	ldr	r1, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007018:	041b      	lsls	r3, r3, #16
 800701a:	2200      	movs	r2, #0
 800701c:	461c      	mov	r4, r3
 800701e:	4615      	mov	r5, r2
 8007020:	4622      	mov	r2, r4
 8007022:	462b      	mov	r3, r5
 8007024:	4608      	mov	r0, r1
 8007026:	f001 fb11 	bl	800864c <SDMMC_CmdSelDesel>
 800702a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800702c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <SD_InitCard+0x176>
  {
    return errorstate;
 8007032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007034:	e00e      	b.n	8007054 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681d      	ldr	r5, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	466c      	mov	r4, sp
 800703e:	f103 0210 	add.w	r2, r3, #16
 8007042:	ca07      	ldmia	r2, {r0, r1, r2}
 8007044:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007048:	3304      	adds	r3, #4
 800704a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800704c:	4628      	mov	r0, r5
 800704e:	f001 f955 	bl	80082fc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3740      	adds	r7, #64	; 0x40
 8007058:	46bd      	mov	sp, r7
 800705a:	bdb0      	pop	{r4, r5, r7, pc}

0800705c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b086      	sub	sp, #24
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007064:	2300      	movs	r3, #0
 8007066:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007068:	2300      	movs	r3, #0
 800706a:	617b      	str	r3, [r7, #20]
 800706c:	2300      	movs	r3, #0
 800706e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4618      	mov	r0, r3
 8007076:	f001 fb0c 	bl	8008692 <SDMMC_CmdGoIdleState>
 800707a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d001      	beq.n	8007086 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	e072      	b.n	800716c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4618      	mov	r0, r3
 800708c:	f001 fb1f 	bl	80086ce <SDMMC_CmdOperCond>
 8007090:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00d      	beq.n	80070b4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f001 faf5 	bl	8008692 <SDMMC_CmdGoIdleState>
 80070a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d004      	beq.n	80070ba <SD_PowerON+0x5e>
    {
      return errorstate;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	e05b      	b.n	800716c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d137      	bne.n	8007132 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2100      	movs	r1, #0
 80070c8:	4618      	mov	r0, r3
 80070ca:	f001 fb1f 	bl	800870c <SDMMC_CmdAppCommand>
 80070ce:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d02d      	beq.n	8007132 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80070d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80070da:	e047      	b.n	800716c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2100      	movs	r1, #0
 80070e2:	4618      	mov	r0, r3
 80070e4:	f001 fb12 	bl	800870c <SDMMC_CmdAppCommand>
 80070e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d001      	beq.n	80070f4 <SD_PowerON+0x98>
    {
      return errorstate;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	e03b      	b.n	800716c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	491e      	ldr	r1, [pc, #120]	; (8007174 <SD_PowerON+0x118>)
 80070fa:	4618      	mov	r0, r3
 80070fc:	f001 fb28 	bl	8008750 <SDMMC_CmdAppOperCommand>
 8007100:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007108:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800710c:	e02e      	b.n	800716c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2100      	movs	r1, #0
 8007114:	4618      	mov	r0, r3
 8007116:	f001 f98d 	bl	8008434 <SDIO_GetResponse>
 800711a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	0fdb      	lsrs	r3, r3, #31
 8007120:	2b01      	cmp	r3, #1
 8007122:	d101      	bne.n	8007128 <SD_PowerON+0xcc>
 8007124:	2301      	movs	r3, #1
 8007126:	e000      	b.n	800712a <SD_PowerON+0xce>
 8007128:	2300      	movs	r3, #0
 800712a:	613b      	str	r3, [r7, #16]

    count++;
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	3301      	adds	r3, #1
 8007130:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007138:	4293      	cmp	r3, r2
 800713a:	d802      	bhi.n	8007142 <SD_PowerON+0xe6>
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d0cc      	beq.n	80070dc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007148:	4293      	cmp	r3, r2
 800714a:	d902      	bls.n	8007152 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800714c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007150:	e00c      	b.n	800716c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d003      	beq.n	8007164 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	645a      	str	r2, [r3, #68]	; 0x44
 8007162:	e002      	b.n	800716a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3718      	adds	r7, #24
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	c1100000 	.word	0xc1100000

08007178 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d102      	bne.n	800718e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800718c:	e018      	b.n	80071c0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007196:	041b      	lsls	r3, r3, #16
 8007198:	4619      	mov	r1, r3
 800719a:	4610      	mov	r0, r2
 800719c:	f001 fb59 	bl	8008852 <SDMMC_CmdSendStatus>
 80071a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d001      	beq.n	80071ac <SD_SendStatus+0x34>
  {
    return errorstate;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	e009      	b.n	80071c0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2100      	movs	r1, #0
 80071b2:	4618      	mov	r0, r3
 80071b4:	f001 f93e 	bl	8008434 <SDIO_GetResponse>
 80071b8:	4602      	mov	r2, r0
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071da:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d03f      	beq.n	8007262 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80071e2:	2300      	movs	r3, #0
 80071e4:	617b      	str	r3, [r7, #20]
 80071e6:	e033      	b.n	8007250 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f001 f8b0 	bl	8008352 <SDIO_ReadFIFO>
 80071f2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	b2da      	uxtb	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	3301      	adds	r3, #1
 8007200:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	3b01      	subs	r3, #1
 8007206:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	0a1b      	lsrs	r3, r3, #8
 800720c:	b2da      	uxtb	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	3301      	adds	r3, #1
 8007216:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	3b01      	subs	r3, #1
 800721c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	0c1b      	lsrs	r3, r3, #16
 8007222:	b2da      	uxtb	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	3301      	adds	r3, #1
 800722c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	3b01      	subs	r3, #1
 8007232:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	0e1b      	lsrs	r3, r3, #24
 8007238:	b2da      	uxtb	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	3301      	adds	r3, #1
 8007242:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	3b01      	subs	r3, #1
 8007248:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	3301      	adds	r3, #1
 800724e:	617b      	str	r3, [r7, #20]
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	2b07      	cmp	r3, #7
 8007254:	d9c8      	bls.n	80071e8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007262:	bf00      	nop
 8007264:	3718      	adds	r7, #24
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b086      	sub	sp, #24
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d043      	beq.n	800730c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007284:	2300      	movs	r3, #0
 8007286:	617b      	str	r3, [r7, #20]
 8007288:	e037      	b.n	80072fa <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	3301      	adds	r3, #1
 8007294:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	3b01      	subs	r3, #1
 800729a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	021a      	lsls	r2, r3, #8
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	3301      	adds	r3, #1
 80072ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	3b01      	subs	r3, #1
 80072b2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	041a      	lsls	r2, r3, #16
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	4313      	orrs	r3, r2
 80072be:	60bb      	str	r3, [r7, #8]
      tmp++;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	3301      	adds	r3, #1
 80072c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	3b01      	subs	r3, #1
 80072ca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	061a      	lsls	r2, r3, #24
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	3301      	adds	r3, #1
 80072dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	3b01      	subs	r3, #1
 80072e2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f107 0208 	add.w	r2, r7, #8
 80072ec:	4611      	mov	r1, r2
 80072ee:	4618      	mov	r0, r3
 80072f0:	f001 f83c 	bl	800836c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	3301      	adds	r3, #1
 80072f8:	617b      	str	r3, [r7, #20]
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	2b07      	cmp	r3, #7
 80072fe:	d9c4      	bls.n	800728a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800730c:	bf00      	nop
 800730e:	3718      	adds	r7, #24
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d101      	bne.n	8007326 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e07b      	b.n	800741e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732a:	2b00      	cmp	r3, #0
 800732c:	d108      	bne.n	8007340 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007336:	d009      	beq.n	800734c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	61da      	str	r2, [r3, #28]
 800733e:	e005      	b.n	800734c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d106      	bne.n	800736c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7fc f820 	bl	80033ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2202      	movs	r2, #2
 8007370:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007382:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007394:	431a      	orrs	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800739e:	431a      	orrs	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	f003 0302 	and.w	r3, r3, #2
 80073a8:	431a      	orrs	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	431a      	orrs	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073bc:	431a      	orrs	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073c6:	431a      	orrs	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a1b      	ldr	r3, [r3, #32]
 80073cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d0:	ea42 0103 	orr.w	r1, r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	430a      	orrs	r2, r1
 80073e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	699b      	ldr	r3, [r3, #24]
 80073e8:	0c1b      	lsrs	r3, r3, #16
 80073ea:	f003 0104 	and.w	r1, r3, #4
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f2:	f003 0210 	and.w	r2, r3, #16
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	430a      	orrs	r2, r1
 80073fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	69da      	ldr	r2, [r3, #28]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800740c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3708      	adds	r7, #8
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b088      	sub	sp, #32
 800742a:	af00      	add	r7, sp, #0
 800742c:	60f8      	str	r0, [r7, #12]
 800742e:	60b9      	str	r1, [r7, #8]
 8007430:	603b      	str	r3, [r7, #0]
 8007432:	4613      	mov	r3, r2
 8007434:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007440:	2b01      	cmp	r3, #1
 8007442:	d101      	bne.n	8007448 <HAL_SPI_Transmit+0x22>
 8007444:	2302      	movs	r3, #2
 8007446:	e126      	b.n	8007696 <HAL_SPI_Transmit+0x270>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007450:	f7fc fa9c 	bl	800398c <HAL_GetTick>
 8007454:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007456:	88fb      	ldrh	r3, [r7, #6]
 8007458:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b01      	cmp	r3, #1
 8007464:	d002      	beq.n	800746c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007466:	2302      	movs	r3, #2
 8007468:	77fb      	strb	r3, [r7, #31]
    goto error;
 800746a:	e10b      	b.n	8007684 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d002      	beq.n	8007478 <HAL_SPI_Transmit+0x52>
 8007472:	88fb      	ldrh	r3, [r7, #6]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d102      	bne.n	800747e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800747c:	e102      	b.n	8007684 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2203      	movs	r2, #3
 8007482:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	88fa      	ldrh	r2, [r7, #6]
 8007496:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	88fa      	ldrh	r2, [r7, #6]
 800749c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074c4:	d10f      	bne.n	80074e6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f0:	2b40      	cmp	r3, #64	; 0x40
 80074f2:	d007      	beq.n	8007504 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007502:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800750c:	d14b      	bne.n	80075a6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d002      	beq.n	800751c <HAL_SPI_Transmit+0xf6>
 8007516:	8afb      	ldrh	r3, [r7, #22]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d13e      	bne.n	800759a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007520:	881a      	ldrh	r2, [r3, #0]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752c:	1c9a      	adds	r2, r3, #2
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007536:	b29b      	uxth	r3, r3
 8007538:	3b01      	subs	r3, #1
 800753a:	b29a      	uxth	r2, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007540:	e02b      	b.n	800759a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f003 0302 	and.w	r3, r3, #2
 800754c:	2b02      	cmp	r3, #2
 800754e:	d112      	bne.n	8007576 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007554:	881a      	ldrh	r2, [r3, #0]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007560:	1c9a      	adds	r2, r3, #2
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800756a:	b29b      	uxth	r3, r3
 800756c:	3b01      	subs	r3, #1
 800756e:	b29a      	uxth	r2, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	86da      	strh	r2, [r3, #54]	; 0x36
 8007574:	e011      	b.n	800759a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007576:	f7fc fa09 	bl	800398c <HAL_GetTick>
 800757a:	4602      	mov	r2, r0
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	683a      	ldr	r2, [r7, #0]
 8007582:	429a      	cmp	r2, r3
 8007584:	d803      	bhi.n	800758e <HAL_SPI_Transmit+0x168>
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800758c:	d102      	bne.n	8007594 <HAL_SPI_Transmit+0x16e>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d102      	bne.n	800759a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007598:	e074      	b.n	8007684 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800759e:	b29b      	uxth	r3, r3
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1ce      	bne.n	8007542 <HAL_SPI_Transmit+0x11c>
 80075a4:	e04c      	b.n	8007640 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d002      	beq.n	80075b4 <HAL_SPI_Transmit+0x18e>
 80075ae:	8afb      	ldrh	r3, [r7, #22]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d140      	bne.n	8007636 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	330c      	adds	r3, #12
 80075be:	7812      	ldrb	r2, [r2, #0]
 80075c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c6:	1c5a      	adds	r2, r3, #1
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	3b01      	subs	r3, #1
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80075da:	e02c      	b.n	8007636 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f003 0302 	and.w	r3, r3, #2
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d113      	bne.n	8007612 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	330c      	adds	r3, #12
 80075f4:	7812      	ldrb	r2, [r2, #0]
 80075f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fc:	1c5a      	adds	r2, r3, #1
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007606:	b29b      	uxth	r3, r3
 8007608:	3b01      	subs	r3, #1
 800760a:	b29a      	uxth	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007610:	e011      	b.n	8007636 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007612:	f7fc f9bb 	bl	800398c <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	429a      	cmp	r2, r3
 8007620:	d803      	bhi.n	800762a <HAL_SPI_Transmit+0x204>
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007628:	d102      	bne.n	8007630 <HAL_SPI_Transmit+0x20a>
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d102      	bne.n	8007636 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007630:	2303      	movs	r3, #3
 8007632:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007634:	e026      	b.n	8007684 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800763a:	b29b      	uxth	r3, r3
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1cd      	bne.n	80075dc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007640:	69ba      	ldr	r2, [r7, #24]
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f000 fa55 	bl	8007af4 <SPI_EndRxTxTransaction>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d002      	beq.n	8007656 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2220      	movs	r2, #32
 8007654:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10a      	bne.n	8007674 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800765e:	2300      	movs	r3, #0
 8007660:	613b      	str	r3, [r7, #16]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	613b      	str	r3, [r7, #16]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	613b      	str	r3, [r7, #16]
 8007672:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007678:	2b00      	cmp	r3, #0
 800767a:	d002      	beq.n	8007682 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	77fb      	strb	r3, [r7, #31]
 8007680:	e000      	b.n	8007684 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007682:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007694:	7ffb      	ldrb	r3, [r7, #31]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3720      	adds	r7, #32
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b08c      	sub	sp, #48	; 0x30
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	60f8      	str	r0, [r7, #12]
 80076a6:	60b9      	str	r1, [r7, #8]
 80076a8:	607a      	str	r2, [r7, #4]
 80076aa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80076ac:	2301      	movs	r3, #1
 80076ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80076b0:	2300      	movs	r3, #0
 80076b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d101      	bne.n	80076c4 <HAL_SPI_TransmitReceive+0x26>
 80076c0:	2302      	movs	r3, #2
 80076c2:	e18a      	b.n	80079da <HAL_SPI_TransmitReceive+0x33c>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076cc:	f7fc f95e 	bl	800398c <HAL_GetTick>
 80076d0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80076e2:	887b      	ldrh	r3, [r7, #2]
 80076e4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80076e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d00f      	beq.n	800770e <HAL_SPI_TransmitReceive+0x70>
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076f4:	d107      	bne.n	8007706 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d103      	bne.n	8007706 <HAL_SPI_TransmitReceive+0x68>
 80076fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007702:	2b04      	cmp	r3, #4
 8007704:	d003      	beq.n	800770e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007706:	2302      	movs	r3, #2
 8007708:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800770c:	e15b      	b.n	80079c6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d005      	beq.n	8007720 <HAL_SPI_TransmitReceive+0x82>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d002      	beq.n	8007720 <HAL_SPI_TransmitReceive+0x82>
 800771a:	887b      	ldrh	r3, [r7, #2]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d103      	bne.n	8007728 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007726:	e14e      	b.n	80079c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800772e:	b2db      	uxtb	r3, r3
 8007730:	2b04      	cmp	r3, #4
 8007732:	d003      	beq.n	800773c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2205      	movs	r2, #5
 8007738:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	887a      	ldrh	r2, [r7, #2]
 800774c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	887a      	ldrh	r2, [r7, #2]
 8007752:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	887a      	ldrh	r2, [r7, #2]
 800775e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	887a      	ldrh	r2, [r7, #2]
 8007764:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777c:	2b40      	cmp	r3, #64	; 0x40
 800777e:	d007      	beq.n	8007790 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800778e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007798:	d178      	bne.n	800788c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d002      	beq.n	80077a8 <HAL_SPI_TransmitReceive+0x10a>
 80077a2:	8b7b      	ldrh	r3, [r7, #26]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d166      	bne.n	8007876 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ac:	881a      	ldrh	r2, [r3, #0]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b8:	1c9a      	adds	r2, r3, #2
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	3b01      	subs	r3, #1
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077cc:	e053      	b.n	8007876 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f003 0302 	and.w	r3, r3, #2
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d11b      	bne.n	8007814 <HAL_SPI_TransmitReceive+0x176>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d016      	beq.n	8007814 <HAL_SPI_TransmitReceive+0x176>
 80077e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d113      	bne.n	8007814 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f0:	881a      	ldrh	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fc:	1c9a      	adds	r2, r3, #2
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007806:	b29b      	uxth	r3, r3
 8007808:	3b01      	subs	r3, #1
 800780a:	b29a      	uxth	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007810:	2300      	movs	r3, #0
 8007812:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b01      	cmp	r3, #1
 8007820:	d119      	bne.n	8007856 <HAL_SPI_TransmitReceive+0x1b8>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007826:	b29b      	uxth	r3, r3
 8007828:	2b00      	cmp	r3, #0
 800782a:	d014      	beq.n	8007856 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68da      	ldr	r2, [r3, #12]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007836:	b292      	uxth	r2, r2
 8007838:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783e:	1c9a      	adds	r2, r3, #2
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007848:	b29b      	uxth	r3, r3
 800784a:	3b01      	subs	r3, #1
 800784c:	b29a      	uxth	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007852:	2301      	movs	r3, #1
 8007854:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007856:	f7fc f899 	bl	800398c <HAL_GetTick>
 800785a:	4602      	mov	r2, r0
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007862:	429a      	cmp	r2, r3
 8007864:	d807      	bhi.n	8007876 <HAL_SPI_TransmitReceive+0x1d8>
 8007866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800786c:	d003      	beq.n	8007876 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007874:	e0a7      	b.n	80079c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800787a:	b29b      	uxth	r3, r3
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1a6      	bne.n	80077ce <HAL_SPI_TransmitReceive+0x130>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007884:	b29b      	uxth	r3, r3
 8007886:	2b00      	cmp	r3, #0
 8007888:	d1a1      	bne.n	80077ce <HAL_SPI_TransmitReceive+0x130>
 800788a:	e07c      	b.n	8007986 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d002      	beq.n	800789a <HAL_SPI_TransmitReceive+0x1fc>
 8007894:	8b7b      	ldrh	r3, [r7, #26]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d16b      	bne.n	8007972 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	330c      	adds	r3, #12
 80078a4:	7812      	ldrb	r2, [r2, #0]
 80078a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ac:	1c5a      	adds	r2, r3, #1
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	3b01      	subs	r3, #1
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078c0:	e057      	b.n	8007972 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	f003 0302 	and.w	r3, r3, #2
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d11c      	bne.n	800790a <HAL_SPI_TransmitReceive+0x26c>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d017      	beq.n	800790a <HAL_SPI_TransmitReceive+0x26c>
 80078da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d114      	bne.n	800790a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	330c      	adds	r3, #12
 80078ea:	7812      	ldrb	r2, [r2, #0]
 80078ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f2:	1c5a      	adds	r2, r3, #1
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	3b01      	subs	r3, #1
 8007900:	b29a      	uxth	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007906:	2300      	movs	r3, #0
 8007908:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f003 0301 	and.w	r3, r3, #1
 8007914:	2b01      	cmp	r3, #1
 8007916:	d119      	bne.n	800794c <HAL_SPI_TransmitReceive+0x2ae>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800791c:	b29b      	uxth	r3, r3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d014      	beq.n	800794c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68da      	ldr	r2, [r3, #12]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792c:	b2d2      	uxtb	r2, r2
 800792e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007934:	1c5a      	adds	r2, r3, #1
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800793e:	b29b      	uxth	r3, r3
 8007940:	3b01      	subs	r3, #1
 8007942:	b29a      	uxth	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007948:	2301      	movs	r3, #1
 800794a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800794c:	f7fc f81e 	bl	800398c <HAL_GetTick>
 8007950:	4602      	mov	r2, r0
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	1ad3      	subs	r3, r2, r3
 8007956:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007958:	429a      	cmp	r2, r3
 800795a:	d803      	bhi.n	8007964 <HAL_SPI_TransmitReceive+0x2c6>
 800795c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007962:	d102      	bne.n	800796a <HAL_SPI_TransmitReceive+0x2cc>
 8007964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007966:	2b00      	cmp	r3, #0
 8007968:	d103      	bne.n	8007972 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007970:	e029      	b.n	80079c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007976:	b29b      	uxth	r3, r3
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1a2      	bne.n	80078c2 <HAL_SPI_TransmitReceive+0x224>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007980:	b29b      	uxth	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d19d      	bne.n	80078c2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007988:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	f000 f8b2 	bl	8007af4 <SPI_EndRxTxTransaction>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d006      	beq.n	80079a4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2220      	movs	r2, #32
 80079a0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80079a2:	e010      	b.n	80079c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10b      	bne.n	80079c4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079ac:	2300      	movs	r3, #0
 80079ae:	617b      	str	r3, [r7, #20]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	617b      	str	r3, [r7, #20]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	617b      	str	r3, [r7, #20]
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	e000      	b.n	80079c6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80079c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80079d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3730      	adds	r7, #48	; 0x30
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
	...

080079e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b088      	sub	sp, #32
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	603b      	str	r3, [r7, #0]
 80079f0:	4613      	mov	r3, r2
 80079f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80079f4:	f7fb ffca 	bl	800398c <HAL_GetTick>
 80079f8:	4602      	mov	r2, r0
 80079fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fc:	1a9b      	subs	r3, r3, r2
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	4413      	add	r3, r2
 8007a02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007a04:	f7fb ffc2 	bl	800398c <HAL_GetTick>
 8007a08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007a0a:	4b39      	ldr	r3, [pc, #228]	; (8007af0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	015b      	lsls	r3, r3, #5
 8007a10:	0d1b      	lsrs	r3, r3, #20
 8007a12:	69fa      	ldr	r2, [r7, #28]
 8007a14:	fb02 f303 	mul.w	r3, r2, r3
 8007a18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a1a:	e054      	b.n	8007ac6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a22:	d050      	beq.n	8007ac6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a24:	f7fb ffb2 	bl	800398c <HAL_GetTick>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	69fa      	ldr	r2, [r7, #28]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d902      	bls.n	8007a3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d13d      	bne.n	8007ab6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	685a      	ldr	r2, [r3, #4]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a52:	d111      	bne.n	8007a78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a5c:	d004      	beq.n	8007a68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a66:	d107      	bne.n	8007a78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a80:	d10f      	bne.n	8007aa2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a90:	601a      	str	r2, [r3, #0]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007aa0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e017      	b.n	8007ae6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d101      	bne.n	8007ac0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007abc:	2300      	movs	r3, #0
 8007abe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	689a      	ldr	r2, [r3, #8]
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	4013      	ands	r3, r2
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	bf0c      	ite	eq
 8007ad6:	2301      	moveq	r3, #1
 8007ad8:	2300      	movne	r3, #0
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	461a      	mov	r2, r3
 8007ade:	79fb      	ldrb	r3, [r7, #7]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d19b      	bne.n	8007a1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3720      	adds	r7, #32
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	20000104 	.word	0x20000104

08007af4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b088      	sub	sp, #32
 8007af8:	af02      	add	r7, sp, #8
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007b00:	4b1b      	ldr	r3, [pc, #108]	; (8007b70 <SPI_EndRxTxTransaction+0x7c>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a1b      	ldr	r2, [pc, #108]	; (8007b74 <SPI_EndRxTxTransaction+0x80>)
 8007b06:	fba2 2303 	umull	r2, r3, r2, r3
 8007b0a:	0d5b      	lsrs	r3, r3, #21
 8007b0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007b10:	fb02 f303 	mul.w	r3, r2, r3
 8007b14:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b1e:	d112      	bne.n	8007b46 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	2200      	movs	r2, #0
 8007b28:	2180      	movs	r1, #128	; 0x80
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f7ff ff5a 	bl	80079e4 <SPI_WaitFlagStateUntilTimeout>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d016      	beq.n	8007b64 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b3a:	f043 0220 	orr.w	r2, r3, #32
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e00f      	b.n	8007b66 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00a      	beq.n	8007b62 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b5c:	2b80      	cmp	r3, #128	; 0x80
 8007b5e:	d0f2      	beq.n	8007b46 <SPI_EndRxTxTransaction+0x52>
 8007b60:	e000      	b.n	8007b64 <SPI_EndRxTxTransaction+0x70>
        break;
 8007b62:	bf00      	nop
  }

  return HAL_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3718      	adds	r7, #24
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	20000104 	.word	0x20000104
 8007b74:	165e9f81 	.word	0x165e9f81

08007b78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d101      	bne.n	8007b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e03f      	b.n	8007c0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d106      	bne.n	8007ba4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f7fb fe1c 	bl	80037dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2224      	movs	r2, #36	; 0x24
 8007ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68da      	ldr	r2, [r3, #12]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f929 	bl	8007e14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	691a      	ldr	r2, [r3, #16]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007bd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	695a      	ldr	r2, [r3, #20]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007be0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68da      	ldr	r2, [r3, #12]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2220      	movs	r2, #32
 8007bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2220      	movs	r2, #32
 8007c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3708      	adds	r7, #8
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b08a      	sub	sp, #40	; 0x28
 8007c16:	af02      	add	r7, sp, #8
 8007c18:	60f8      	str	r0, [r7, #12]
 8007c1a:	60b9      	str	r1, [r7, #8]
 8007c1c:	603b      	str	r3, [r7, #0]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007c22:	2300      	movs	r3, #0
 8007c24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	2b20      	cmp	r3, #32
 8007c30:	d17c      	bne.n	8007d2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d002      	beq.n	8007c3e <HAL_UART_Transmit+0x2c>
 8007c38:	88fb      	ldrh	r3, [r7, #6]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d101      	bne.n	8007c42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e075      	b.n	8007d2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d101      	bne.n	8007c50 <HAL_UART_Transmit+0x3e>
 8007c4c:	2302      	movs	r3, #2
 8007c4e:	e06e      	b.n	8007d2e <HAL_UART_Transmit+0x11c>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2221      	movs	r2, #33	; 0x21
 8007c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c66:	f7fb fe91 	bl	800398c <HAL_GetTick>
 8007c6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	88fa      	ldrh	r2, [r7, #6]
 8007c70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	88fa      	ldrh	r2, [r7, #6]
 8007c76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c80:	d108      	bne.n	8007c94 <HAL_UART_Transmit+0x82>
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d104      	bne.n	8007c94 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	61bb      	str	r3, [r7, #24]
 8007c92:	e003      	b.n	8007c9c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007ca4:	e02a      	b.n	8007cfc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	9300      	str	r3, [sp, #0]
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	2200      	movs	r2, #0
 8007cae:	2180      	movs	r1, #128	; 0x80
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f000 f840 	bl	8007d36 <UART_WaitOnFlagUntilTimeout>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e036      	b.n	8007d2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10b      	bne.n	8007cde <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	881b      	ldrh	r3, [r3, #0]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	3302      	adds	r3, #2
 8007cda:	61bb      	str	r3, [r7, #24]
 8007cdc:	e007      	b.n	8007cee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	781a      	ldrb	r2, [r3, #0]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	3301      	adds	r3, #1
 8007cec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1cf      	bne.n	8007ca6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	2140      	movs	r1, #64	; 0x40
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f000 f810 	bl	8007d36 <UART_WaitOnFlagUntilTimeout>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d001      	beq.n	8007d20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	e006      	b.n	8007d2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2220      	movs	r2, #32
 8007d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	e000      	b.n	8007d2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007d2c:	2302      	movs	r3, #2
  }
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3720      	adds	r7, #32
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b090      	sub	sp, #64	; 0x40
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	60f8      	str	r0, [r7, #12]
 8007d3e:	60b9      	str	r1, [r7, #8]
 8007d40:	603b      	str	r3, [r7, #0]
 8007d42:	4613      	mov	r3, r2
 8007d44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d46:	e050      	b.n	8007dea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d4e:	d04c      	beq.n	8007dea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d007      	beq.n	8007d66 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d56:	f7fb fe19 	bl	800398c <HAL_GetTick>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	1ad3      	subs	r3, r2, r3
 8007d60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d241      	bcs.n	8007dea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	330c      	adds	r3, #12
 8007d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d70:	e853 3f00 	ldrex	r3, [r3]
 8007d74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	330c      	adds	r3, #12
 8007d84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d86:	637a      	str	r2, [r7, #52]	; 0x34
 8007d88:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d8e:	e841 2300 	strex	r3, r2, [r1]
 8007d92:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1e5      	bne.n	8007d66 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	3314      	adds	r3, #20
 8007da0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	e853 3f00 	ldrex	r3, [r3]
 8007da8:	613b      	str	r3, [r7, #16]
   return(result);
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	f023 0301 	bic.w	r3, r3, #1
 8007db0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3314      	adds	r3, #20
 8007db8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dba:	623a      	str	r2, [r7, #32]
 8007dbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbe:	69f9      	ldr	r1, [r7, #28]
 8007dc0:	6a3a      	ldr	r2, [r7, #32]
 8007dc2:	e841 2300 	strex	r3, r2, [r1]
 8007dc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1e5      	bne.n	8007d9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2220      	movs	r2, #32
 8007dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2220      	movs	r2, #32
 8007dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e00f      	b.n	8007e0a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	4013      	ands	r3, r2
 8007df4:	68ba      	ldr	r2, [r7, #8]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	bf0c      	ite	eq
 8007dfa:	2301      	moveq	r3, #1
 8007dfc:	2300      	movne	r3, #0
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	461a      	mov	r2, r3
 8007e02:	79fb      	ldrb	r3, [r7, #7]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d09f      	beq.n	8007d48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3740      	adds	r7, #64	; 0x40
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
	...

08007e14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e18:	b0c0      	sub	sp, #256	; 0x100
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e30:	68d9      	ldr	r1, [r3, #12]
 8007e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	ea40 0301 	orr.w	r3, r0, r1
 8007e3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e42:	689a      	ldr	r2, [r3, #8]
 8007e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	431a      	orrs	r2, r3
 8007e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e50:	695b      	ldr	r3, [r3, #20]
 8007e52:	431a      	orrs	r2, r3
 8007e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e58:	69db      	ldr	r3, [r3, #28]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007e6c:	f021 010c 	bic.w	r1, r1, #12
 8007e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e7a:	430b      	orrs	r3, r1
 8007e7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	695b      	ldr	r3, [r3, #20]
 8007e86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e8e:	6999      	ldr	r1, [r3, #24]
 8007e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	ea40 0301 	orr.w	r3, r0, r1
 8007e9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	4b8f      	ldr	r3, [pc, #572]	; (80080e0 <UART_SetConfig+0x2cc>)
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d005      	beq.n	8007eb4 <UART_SetConfig+0xa0>
 8007ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	4b8d      	ldr	r3, [pc, #564]	; (80080e4 <UART_SetConfig+0x2d0>)
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d104      	bne.n	8007ebe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007eb4:	f7fe f8ea 	bl	800608c <HAL_RCC_GetPCLK2Freq>
 8007eb8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007ebc:	e003      	b.n	8007ec6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ebe:	f7fe f8d1 	bl	8006064 <HAL_RCC_GetPCLK1Freq>
 8007ec2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eca:	69db      	ldr	r3, [r3, #28]
 8007ecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ed0:	f040 810c 	bne.w	80080ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ed4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ede:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007ee2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007ee6:	4622      	mov	r2, r4
 8007ee8:	462b      	mov	r3, r5
 8007eea:	1891      	adds	r1, r2, r2
 8007eec:	65b9      	str	r1, [r7, #88]	; 0x58
 8007eee:	415b      	adcs	r3, r3
 8007ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ef2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007ef6:	4621      	mov	r1, r4
 8007ef8:	eb12 0801 	adds.w	r8, r2, r1
 8007efc:	4629      	mov	r1, r5
 8007efe:	eb43 0901 	adc.w	r9, r3, r1
 8007f02:	f04f 0200 	mov.w	r2, #0
 8007f06:	f04f 0300 	mov.w	r3, #0
 8007f0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f16:	4690      	mov	r8, r2
 8007f18:	4699      	mov	r9, r3
 8007f1a:	4623      	mov	r3, r4
 8007f1c:	eb18 0303 	adds.w	r3, r8, r3
 8007f20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f24:	462b      	mov	r3, r5
 8007f26:	eb49 0303 	adc.w	r3, r9, r3
 8007f2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007f3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007f42:	460b      	mov	r3, r1
 8007f44:	18db      	adds	r3, r3, r3
 8007f46:	653b      	str	r3, [r7, #80]	; 0x50
 8007f48:	4613      	mov	r3, r2
 8007f4a:	eb42 0303 	adc.w	r3, r2, r3
 8007f4e:	657b      	str	r3, [r7, #84]	; 0x54
 8007f50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007f54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007f58:	f7f8 fe9e 	bl	8000c98 <__aeabi_uldivmod>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	4b61      	ldr	r3, [pc, #388]	; (80080e8 <UART_SetConfig+0x2d4>)
 8007f62:	fba3 2302 	umull	r2, r3, r3, r2
 8007f66:	095b      	lsrs	r3, r3, #5
 8007f68:	011c      	lsls	r4, r3, #4
 8007f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007f78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007f7c:	4642      	mov	r2, r8
 8007f7e:	464b      	mov	r3, r9
 8007f80:	1891      	adds	r1, r2, r2
 8007f82:	64b9      	str	r1, [r7, #72]	; 0x48
 8007f84:	415b      	adcs	r3, r3
 8007f86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007f8c:	4641      	mov	r1, r8
 8007f8e:	eb12 0a01 	adds.w	sl, r2, r1
 8007f92:	4649      	mov	r1, r9
 8007f94:	eb43 0b01 	adc.w	fp, r3, r1
 8007f98:	f04f 0200 	mov.w	r2, #0
 8007f9c:	f04f 0300 	mov.w	r3, #0
 8007fa0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007fa4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007fa8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007fac:	4692      	mov	sl, r2
 8007fae:	469b      	mov	fp, r3
 8007fb0:	4643      	mov	r3, r8
 8007fb2:	eb1a 0303 	adds.w	r3, sl, r3
 8007fb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007fba:	464b      	mov	r3, r9
 8007fbc:	eb4b 0303 	adc.w	r3, fp, r3
 8007fc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007fd0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007fd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007fd8:	460b      	mov	r3, r1
 8007fda:	18db      	adds	r3, r3, r3
 8007fdc:	643b      	str	r3, [r7, #64]	; 0x40
 8007fde:	4613      	mov	r3, r2
 8007fe0:	eb42 0303 	adc.w	r3, r2, r3
 8007fe4:	647b      	str	r3, [r7, #68]	; 0x44
 8007fe6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007fea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007fee:	f7f8 fe53 	bl	8000c98 <__aeabi_uldivmod>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	4611      	mov	r1, r2
 8007ff8:	4b3b      	ldr	r3, [pc, #236]	; (80080e8 <UART_SetConfig+0x2d4>)
 8007ffa:	fba3 2301 	umull	r2, r3, r3, r1
 8007ffe:	095b      	lsrs	r3, r3, #5
 8008000:	2264      	movs	r2, #100	; 0x64
 8008002:	fb02 f303 	mul.w	r3, r2, r3
 8008006:	1acb      	subs	r3, r1, r3
 8008008:	00db      	lsls	r3, r3, #3
 800800a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800800e:	4b36      	ldr	r3, [pc, #216]	; (80080e8 <UART_SetConfig+0x2d4>)
 8008010:	fba3 2302 	umull	r2, r3, r3, r2
 8008014:	095b      	lsrs	r3, r3, #5
 8008016:	005b      	lsls	r3, r3, #1
 8008018:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800801c:	441c      	add	r4, r3
 800801e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008022:	2200      	movs	r2, #0
 8008024:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008028:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800802c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008030:	4642      	mov	r2, r8
 8008032:	464b      	mov	r3, r9
 8008034:	1891      	adds	r1, r2, r2
 8008036:	63b9      	str	r1, [r7, #56]	; 0x38
 8008038:	415b      	adcs	r3, r3
 800803a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800803c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008040:	4641      	mov	r1, r8
 8008042:	1851      	adds	r1, r2, r1
 8008044:	6339      	str	r1, [r7, #48]	; 0x30
 8008046:	4649      	mov	r1, r9
 8008048:	414b      	adcs	r3, r1
 800804a:	637b      	str	r3, [r7, #52]	; 0x34
 800804c:	f04f 0200 	mov.w	r2, #0
 8008050:	f04f 0300 	mov.w	r3, #0
 8008054:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008058:	4659      	mov	r1, fp
 800805a:	00cb      	lsls	r3, r1, #3
 800805c:	4651      	mov	r1, sl
 800805e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008062:	4651      	mov	r1, sl
 8008064:	00ca      	lsls	r2, r1, #3
 8008066:	4610      	mov	r0, r2
 8008068:	4619      	mov	r1, r3
 800806a:	4603      	mov	r3, r0
 800806c:	4642      	mov	r2, r8
 800806e:	189b      	adds	r3, r3, r2
 8008070:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008074:	464b      	mov	r3, r9
 8008076:	460a      	mov	r2, r1
 8008078:	eb42 0303 	adc.w	r3, r2, r3
 800807c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800808c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008090:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008094:	460b      	mov	r3, r1
 8008096:	18db      	adds	r3, r3, r3
 8008098:	62bb      	str	r3, [r7, #40]	; 0x28
 800809a:	4613      	mov	r3, r2
 800809c:	eb42 0303 	adc.w	r3, r2, r3
 80080a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80080a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80080aa:	f7f8 fdf5 	bl	8000c98 <__aeabi_uldivmod>
 80080ae:	4602      	mov	r2, r0
 80080b0:	460b      	mov	r3, r1
 80080b2:	4b0d      	ldr	r3, [pc, #52]	; (80080e8 <UART_SetConfig+0x2d4>)
 80080b4:	fba3 1302 	umull	r1, r3, r3, r2
 80080b8:	095b      	lsrs	r3, r3, #5
 80080ba:	2164      	movs	r1, #100	; 0x64
 80080bc:	fb01 f303 	mul.w	r3, r1, r3
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	00db      	lsls	r3, r3, #3
 80080c4:	3332      	adds	r3, #50	; 0x32
 80080c6:	4a08      	ldr	r2, [pc, #32]	; (80080e8 <UART_SetConfig+0x2d4>)
 80080c8:	fba2 2303 	umull	r2, r3, r2, r3
 80080cc:	095b      	lsrs	r3, r3, #5
 80080ce:	f003 0207 	and.w	r2, r3, #7
 80080d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4422      	add	r2, r4
 80080da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80080dc:	e105      	b.n	80082ea <UART_SetConfig+0x4d6>
 80080de:	bf00      	nop
 80080e0:	40011000 	.word	0x40011000
 80080e4:	40011400 	.word	0x40011400
 80080e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80080ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080f0:	2200      	movs	r2, #0
 80080f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80080f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80080fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80080fe:	4642      	mov	r2, r8
 8008100:	464b      	mov	r3, r9
 8008102:	1891      	adds	r1, r2, r2
 8008104:	6239      	str	r1, [r7, #32]
 8008106:	415b      	adcs	r3, r3
 8008108:	627b      	str	r3, [r7, #36]	; 0x24
 800810a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800810e:	4641      	mov	r1, r8
 8008110:	1854      	adds	r4, r2, r1
 8008112:	4649      	mov	r1, r9
 8008114:	eb43 0501 	adc.w	r5, r3, r1
 8008118:	f04f 0200 	mov.w	r2, #0
 800811c:	f04f 0300 	mov.w	r3, #0
 8008120:	00eb      	lsls	r3, r5, #3
 8008122:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008126:	00e2      	lsls	r2, r4, #3
 8008128:	4614      	mov	r4, r2
 800812a:	461d      	mov	r5, r3
 800812c:	4643      	mov	r3, r8
 800812e:	18e3      	adds	r3, r4, r3
 8008130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008134:	464b      	mov	r3, r9
 8008136:	eb45 0303 	adc.w	r3, r5, r3
 800813a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800813e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800814a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800814e:	f04f 0200 	mov.w	r2, #0
 8008152:	f04f 0300 	mov.w	r3, #0
 8008156:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800815a:	4629      	mov	r1, r5
 800815c:	008b      	lsls	r3, r1, #2
 800815e:	4621      	mov	r1, r4
 8008160:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008164:	4621      	mov	r1, r4
 8008166:	008a      	lsls	r2, r1, #2
 8008168:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800816c:	f7f8 fd94 	bl	8000c98 <__aeabi_uldivmod>
 8008170:	4602      	mov	r2, r0
 8008172:	460b      	mov	r3, r1
 8008174:	4b60      	ldr	r3, [pc, #384]	; (80082f8 <UART_SetConfig+0x4e4>)
 8008176:	fba3 2302 	umull	r2, r3, r3, r2
 800817a:	095b      	lsrs	r3, r3, #5
 800817c:	011c      	lsls	r4, r3, #4
 800817e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008182:	2200      	movs	r2, #0
 8008184:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008188:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800818c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008190:	4642      	mov	r2, r8
 8008192:	464b      	mov	r3, r9
 8008194:	1891      	adds	r1, r2, r2
 8008196:	61b9      	str	r1, [r7, #24]
 8008198:	415b      	adcs	r3, r3
 800819a:	61fb      	str	r3, [r7, #28]
 800819c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081a0:	4641      	mov	r1, r8
 80081a2:	1851      	adds	r1, r2, r1
 80081a4:	6139      	str	r1, [r7, #16]
 80081a6:	4649      	mov	r1, r9
 80081a8:	414b      	adcs	r3, r1
 80081aa:	617b      	str	r3, [r7, #20]
 80081ac:	f04f 0200 	mov.w	r2, #0
 80081b0:	f04f 0300 	mov.w	r3, #0
 80081b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80081b8:	4659      	mov	r1, fp
 80081ba:	00cb      	lsls	r3, r1, #3
 80081bc:	4651      	mov	r1, sl
 80081be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081c2:	4651      	mov	r1, sl
 80081c4:	00ca      	lsls	r2, r1, #3
 80081c6:	4610      	mov	r0, r2
 80081c8:	4619      	mov	r1, r3
 80081ca:	4603      	mov	r3, r0
 80081cc:	4642      	mov	r2, r8
 80081ce:	189b      	adds	r3, r3, r2
 80081d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80081d4:	464b      	mov	r3, r9
 80081d6:	460a      	mov	r2, r1
 80081d8:	eb42 0303 	adc.w	r3, r2, r3
 80081dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80081e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80081ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80081ec:	f04f 0200 	mov.w	r2, #0
 80081f0:	f04f 0300 	mov.w	r3, #0
 80081f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80081f8:	4649      	mov	r1, r9
 80081fa:	008b      	lsls	r3, r1, #2
 80081fc:	4641      	mov	r1, r8
 80081fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008202:	4641      	mov	r1, r8
 8008204:	008a      	lsls	r2, r1, #2
 8008206:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800820a:	f7f8 fd45 	bl	8000c98 <__aeabi_uldivmod>
 800820e:	4602      	mov	r2, r0
 8008210:	460b      	mov	r3, r1
 8008212:	4b39      	ldr	r3, [pc, #228]	; (80082f8 <UART_SetConfig+0x4e4>)
 8008214:	fba3 1302 	umull	r1, r3, r3, r2
 8008218:	095b      	lsrs	r3, r3, #5
 800821a:	2164      	movs	r1, #100	; 0x64
 800821c:	fb01 f303 	mul.w	r3, r1, r3
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	011b      	lsls	r3, r3, #4
 8008224:	3332      	adds	r3, #50	; 0x32
 8008226:	4a34      	ldr	r2, [pc, #208]	; (80082f8 <UART_SetConfig+0x4e4>)
 8008228:	fba2 2303 	umull	r2, r3, r2, r3
 800822c:	095b      	lsrs	r3, r3, #5
 800822e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008232:	441c      	add	r4, r3
 8008234:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008238:	2200      	movs	r2, #0
 800823a:	673b      	str	r3, [r7, #112]	; 0x70
 800823c:	677a      	str	r2, [r7, #116]	; 0x74
 800823e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008242:	4642      	mov	r2, r8
 8008244:	464b      	mov	r3, r9
 8008246:	1891      	adds	r1, r2, r2
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	415b      	adcs	r3, r3
 800824c:	60fb      	str	r3, [r7, #12]
 800824e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008252:	4641      	mov	r1, r8
 8008254:	1851      	adds	r1, r2, r1
 8008256:	6039      	str	r1, [r7, #0]
 8008258:	4649      	mov	r1, r9
 800825a:	414b      	adcs	r3, r1
 800825c:	607b      	str	r3, [r7, #4]
 800825e:	f04f 0200 	mov.w	r2, #0
 8008262:	f04f 0300 	mov.w	r3, #0
 8008266:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800826a:	4659      	mov	r1, fp
 800826c:	00cb      	lsls	r3, r1, #3
 800826e:	4651      	mov	r1, sl
 8008270:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008274:	4651      	mov	r1, sl
 8008276:	00ca      	lsls	r2, r1, #3
 8008278:	4610      	mov	r0, r2
 800827a:	4619      	mov	r1, r3
 800827c:	4603      	mov	r3, r0
 800827e:	4642      	mov	r2, r8
 8008280:	189b      	adds	r3, r3, r2
 8008282:	66bb      	str	r3, [r7, #104]	; 0x68
 8008284:	464b      	mov	r3, r9
 8008286:	460a      	mov	r2, r1
 8008288:	eb42 0303 	adc.w	r3, r2, r3
 800828c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800828e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	663b      	str	r3, [r7, #96]	; 0x60
 8008298:	667a      	str	r2, [r7, #100]	; 0x64
 800829a:	f04f 0200 	mov.w	r2, #0
 800829e:	f04f 0300 	mov.w	r3, #0
 80082a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80082a6:	4649      	mov	r1, r9
 80082a8:	008b      	lsls	r3, r1, #2
 80082aa:	4641      	mov	r1, r8
 80082ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082b0:	4641      	mov	r1, r8
 80082b2:	008a      	lsls	r2, r1, #2
 80082b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80082b8:	f7f8 fcee 	bl	8000c98 <__aeabi_uldivmod>
 80082bc:	4602      	mov	r2, r0
 80082be:	460b      	mov	r3, r1
 80082c0:	4b0d      	ldr	r3, [pc, #52]	; (80082f8 <UART_SetConfig+0x4e4>)
 80082c2:	fba3 1302 	umull	r1, r3, r3, r2
 80082c6:	095b      	lsrs	r3, r3, #5
 80082c8:	2164      	movs	r1, #100	; 0x64
 80082ca:	fb01 f303 	mul.w	r3, r1, r3
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	011b      	lsls	r3, r3, #4
 80082d2:	3332      	adds	r3, #50	; 0x32
 80082d4:	4a08      	ldr	r2, [pc, #32]	; (80082f8 <UART_SetConfig+0x4e4>)
 80082d6:	fba2 2303 	umull	r2, r3, r2, r3
 80082da:	095b      	lsrs	r3, r3, #5
 80082dc:	f003 020f 	and.w	r2, r3, #15
 80082e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4422      	add	r2, r4
 80082e8:	609a      	str	r2, [r3, #8]
}
 80082ea:	bf00      	nop
 80082ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80082f0:	46bd      	mov	sp, r7
 80082f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082f6:	bf00      	nop
 80082f8:	51eb851f 	.word	0x51eb851f

080082fc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80082fc:	b084      	sub	sp, #16
 80082fe:	b480      	push	{r7}
 8008300:	b085      	sub	sp, #20
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
 8008306:	f107 001c 	add.w	r0, r7, #28
 800830a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800830e:	2300      	movs	r3, #0
 8008310:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008312:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008314:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008316:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800831a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800831c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800831e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008322:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008326:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	4313      	orrs	r3, r2
 800832c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008336:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	431a      	orrs	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3714      	adds	r7, #20
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	b004      	add	sp, #16
 8008350:	4770      	bx	lr

08008352 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008352:	b480      	push	{r7}
 8008354:	b083      	sub	sp, #12
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008360:	4618      	mov	r0, r3
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	370c      	adds	r7, #12
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr

0800838e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800838e:	b480      	push	{r7}
 8008390:	b083      	sub	sp, #12
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2203      	movs	r2, #3
 800839a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	370c      	adds	r7, #12
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80083aa:	b480      	push	{r7}
 80083ac:	b083      	sub	sp, #12
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 0303 	and.w	r3, r3, #3
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	370c      	adds	r7, #12
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr

080083c6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80083c6:	b480      	push	{r7}
 80083c8:	b085      	sub	sp, #20
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
 80083ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80083d0:	2300      	movs	r3, #0
 80083d2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80083e4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80083ea:	431a      	orrs	r2, r3
                       Command->CPSM);
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80083f0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008400:	f023 030f 	bic.w	r3, r3, #15
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	431a      	orrs	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3714      	adds	r7, #20
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800841a:	b480      	push	{r7}
 800841c:	b083      	sub	sp, #12
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	b2db      	uxtb	r3, r3
}
 8008428:	4618      	mov	r0, r3
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	3314      	adds	r3, #20
 8008442:	461a      	mov	r2, r3
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	4413      	add	r3, r2
 8008448:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
}  
 800844e:	4618      	mov	r0, r3
 8008450:	3714      	adds	r7, #20
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr

0800845a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800845a:	b480      	push	{r7}
 800845c:	b085      	sub	sp, #20
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
 8008462:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008464:	2300      	movs	r3, #0
 8008466:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	685a      	ldr	r2, [r3, #4]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008480:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008486:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800848c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	4313      	orrs	r3, r2
 8008492:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008498:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	431a      	orrs	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80084a4:	2300      	movs	r3, #0

}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b088      	sub	sp, #32
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
 80084ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80084c0:	2310      	movs	r3, #16
 80084c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80084c4:	2340      	movs	r3, #64	; 0x40
 80084c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80084c8:	2300      	movs	r3, #0
 80084ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80084cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80084d2:	f107 0308 	add.w	r3, r7, #8
 80084d6:	4619      	mov	r1, r3
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f7ff ff74 	bl	80083c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80084de:	f241 3288 	movw	r2, #5000	; 0x1388
 80084e2:	2110      	movs	r1, #16
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 f9d7 	bl	8008898 <SDMMC_GetCmdResp1>
 80084ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084ec:	69fb      	ldr	r3, [r7, #28]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3720      	adds	r7, #32
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b088      	sub	sp, #32
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
 80084fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008504:	2311      	movs	r3, #17
 8008506:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008508:	2340      	movs	r3, #64	; 0x40
 800850a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800850c:	2300      	movs	r3, #0
 800850e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008514:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008516:	f107 0308 	add.w	r3, r7, #8
 800851a:	4619      	mov	r1, r3
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f7ff ff52 	bl	80083c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008522:	f241 3288 	movw	r2, #5000	; 0x1388
 8008526:	2111      	movs	r1, #17
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 f9b5 	bl	8008898 <SDMMC_GetCmdResp1>
 800852e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008530:	69fb      	ldr	r3, [r7, #28]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3720      	adds	r7, #32
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b088      	sub	sp, #32
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008548:	2312      	movs	r3, #18
 800854a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800854c:	2340      	movs	r3, #64	; 0x40
 800854e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008550:	2300      	movs	r3, #0
 8008552:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008558:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800855a:	f107 0308 	add.w	r3, r7, #8
 800855e:	4619      	mov	r1, r3
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f7ff ff30 	bl	80083c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008566:	f241 3288 	movw	r2, #5000	; 0x1388
 800856a:	2112      	movs	r1, #18
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 f993 	bl	8008898 <SDMMC_GetCmdResp1>
 8008572:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008574:	69fb      	ldr	r3, [r7, #28]
}
 8008576:	4618      	mov	r0, r3
 8008578:	3720      	adds	r7, #32
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b088      	sub	sp, #32
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
 8008586:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800858c:	2318      	movs	r3, #24
 800858e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008590:	2340      	movs	r3, #64	; 0x40
 8008592:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008594:	2300      	movs	r3, #0
 8008596:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800859c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800859e:	f107 0308 	add.w	r3, r7, #8
 80085a2:	4619      	mov	r1, r3
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f7ff ff0e 	bl	80083c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80085aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80085ae:	2118      	movs	r1, #24
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 f971 	bl	8008898 <SDMMC_GetCmdResp1>
 80085b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085b8:	69fb      	ldr	r3, [r7, #28]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3720      	adds	r7, #32
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b088      	sub	sp, #32
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
 80085ca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80085d0:	2319      	movs	r3, #25
 80085d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80085d4:	2340      	movs	r3, #64	; 0x40
 80085d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80085d8:	2300      	movs	r3, #0
 80085da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80085dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80085e2:	f107 0308 	add.w	r3, r7, #8
 80085e6:	4619      	mov	r1, r3
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f7ff feec 	bl	80083c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80085ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80085f2:	2119      	movs	r1, #25
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 f94f 	bl	8008898 <SDMMC_GetCmdResp1>
 80085fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085fc:	69fb      	ldr	r3, [r7, #28]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3720      	adds	r7, #32
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
	...

08008608 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b088      	sub	sp, #32
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008610:	2300      	movs	r3, #0
 8008612:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008614:	230c      	movs	r3, #12
 8008616:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008618:	2340      	movs	r3, #64	; 0x40
 800861a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800861c:	2300      	movs	r3, #0
 800861e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008624:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008626:	f107 0308 	add.w	r3, r7, #8
 800862a:	4619      	mov	r1, r3
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f7ff feca 	bl	80083c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8008632:	4a05      	ldr	r2, [pc, #20]	; (8008648 <SDMMC_CmdStopTransfer+0x40>)
 8008634:	210c      	movs	r1, #12
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f92e 	bl	8008898 <SDMMC_GetCmdResp1>
 800863c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800863e:	69fb      	ldr	r3, [r7, #28]
}
 8008640:	4618      	mov	r0, r3
 8008642:	3720      	adds	r7, #32
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	05f5e100 	.word	0x05f5e100

0800864c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b08a      	sub	sp, #40	; 0x28
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800865c:	2307      	movs	r3, #7
 800865e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008660:	2340      	movs	r3, #64	; 0x40
 8008662:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008664:	2300      	movs	r3, #0
 8008666:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800866c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800866e:	f107 0310 	add.w	r3, r7, #16
 8008672:	4619      	mov	r1, r3
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f7ff fea6 	bl	80083c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800867a:	f241 3288 	movw	r2, #5000	; 0x1388
 800867e:	2107      	movs	r1, #7
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f000 f909 	bl	8008898 <SDMMC_GetCmdResp1>
 8008686:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800868a:	4618      	mov	r0, r3
 800868c:	3728      	adds	r7, #40	; 0x28
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b088      	sub	sp, #32
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800869a:	2300      	movs	r3, #0
 800869c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800869e:	2300      	movs	r3, #0
 80086a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80086a2:	2300      	movs	r3, #0
 80086a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80086a6:	2300      	movs	r3, #0
 80086a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80086aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80086b0:	f107 0308 	add.w	r3, r7, #8
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7ff fe85 	bl	80083c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fb23 	bl	8008d08 <SDMMC_GetCmdError>
 80086c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086c4:	69fb      	ldr	r3, [r7, #28]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3720      	adds	r7, #32
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b088      	sub	sp, #32
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80086d6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80086da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80086dc:	2308      	movs	r3, #8
 80086de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80086e0:	2340      	movs	r3, #64	; 0x40
 80086e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80086e4:	2300      	movs	r3, #0
 80086e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80086e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80086ee:	f107 0308 	add.w	r3, r7, #8
 80086f2:	4619      	mov	r1, r3
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f7ff fe66 	bl	80083c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fab6 	bl	8008c6c <SDMMC_GetCmdResp7>
 8008700:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008702:	69fb      	ldr	r3, [r7, #28]
}
 8008704:	4618      	mov	r0, r3
 8008706:	3720      	adds	r7, #32
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b088      	sub	sp, #32
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800871a:	2337      	movs	r3, #55	; 0x37
 800871c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800871e:	2340      	movs	r3, #64	; 0x40
 8008720:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008722:	2300      	movs	r3, #0
 8008724:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800872a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800872c:	f107 0308 	add.w	r3, r7, #8
 8008730:	4619      	mov	r1, r3
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f7ff fe47 	bl	80083c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008738:	f241 3288 	movw	r2, #5000	; 0x1388
 800873c:	2137      	movs	r1, #55	; 0x37
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 f8aa 	bl	8008898 <SDMMC_GetCmdResp1>
 8008744:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008746:	69fb      	ldr	r3, [r7, #28]
}
 8008748:	4618      	mov	r0, r3
 800874a:	3720      	adds	r7, #32
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b088      	sub	sp, #32
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008760:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008764:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008766:	2329      	movs	r3, #41	; 0x29
 8008768:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800876a:	2340      	movs	r3, #64	; 0x40
 800876c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800876e:	2300      	movs	r3, #0
 8008770:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008776:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008778:	f107 0308 	add.w	r3, r7, #8
 800877c:	4619      	mov	r1, r3
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f7ff fe21 	bl	80083c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f9bd 	bl	8008b04 <SDMMC_GetCmdResp3>
 800878a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800878c:	69fb      	ldr	r3, [r7, #28]
}
 800878e:	4618      	mov	r0, r3
 8008790:	3720      	adds	r7, #32
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b088      	sub	sp, #32
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800879e:	2300      	movs	r3, #0
 80087a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80087a2:	2302      	movs	r3, #2
 80087a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80087a6:	23c0      	movs	r3, #192	; 0xc0
 80087a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80087aa:	2300      	movs	r3, #0
 80087ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80087ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80087b4:	f107 0308 	add.w	r3, r7, #8
 80087b8:	4619      	mov	r1, r3
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f7ff fe03 	bl	80083c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 f957 	bl	8008a74 <SDMMC_GetCmdResp2>
 80087c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087c8:	69fb      	ldr	r3, [r7, #28]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3720      	adds	r7, #32
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b088      	sub	sp, #32
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
 80087da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80087e0:	2309      	movs	r3, #9
 80087e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80087e4:	23c0      	movs	r3, #192	; 0xc0
 80087e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80087e8:	2300      	movs	r3, #0
 80087ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80087ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80087f2:	f107 0308 	add.w	r3, r7, #8
 80087f6:	4619      	mov	r1, r3
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f7ff fde4 	bl	80083c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 f938 	bl	8008a74 <SDMMC_GetCmdResp2>
 8008804:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008806:	69fb      	ldr	r3, [r7, #28]
}
 8008808:	4618      	mov	r0, r3
 800880a:	3720      	adds	r7, #32
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b088      	sub	sp, #32
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800881a:	2300      	movs	r3, #0
 800881c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800881e:	2303      	movs	r3, #3
 8008820:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008822:	2340      	movs	r3, #64	; 0x40
 8008824:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008826:	2300      	movs	r3, #0
 8008828:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800882a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800882e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008830:	f107 0308 	add.w	r3, r7, #8
 8008834:	4619      	mov	r1, r3
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f7ff fdc5 	bl	80083c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800883c:	683a      	ldr	r2, [r7, #0]
 800883e:	2103      	movs	r1, #3
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f99d 	bl	8008b80 <SDMMC_GetCmdResp6>
 8008846:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008848:	69fb      	ldr	r3, [r7, #28]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3720      	adds	r7, #32
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b088      	sub	sp, #32
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008860:	230d      	movs	r3, #13
 8008862:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008864:	2340      	movs	r3, #64	; 0x40
 8008866:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008868:	2300      	movs	r3, #0
 800886a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800886c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008870:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008872:	f107 0308 	add.w	r3, r7, #8
 8008876:	4619      	mov	r1, r3
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f7ff fda4 	bl	80083c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800887e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008882:	210d      	movs	r1, #13
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 f807 	bl	8008898 <SDMMC_GetCmdResp1>
 800888a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800888c:	69fb      	ldr	r3, [r7, #28]
}
 800888e:	4618      	mov	r0, r3
 8008890:	3720      	adds	r7, #32
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
	...

08008898 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b088      	sub	sp, #32
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	460b      	mov	r3, r1
 80088a2:	607a      	str	r2, [r7, #4]
 80088a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80088a6:	4b70      	ldr	r3, [pc, #448]	; (8008a68 <SDMMC_GetCmdResp1+0x1d0>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a70      	ldr	r2, [pc, #448]	; (8008a6c <SDMMC_GetCmdResp1+0x1d4>)
 80088ac:	fba2 2303 	umull	r2, r3, r2, r3
 80088b0:	0a5a      	lsrs	r2, r3, #9
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	fb02 f303 	mul.w	r3, r2, r3
 80088b8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	1e5a      	subs	r2, r3, #1
 80088be:	61fa      	str	r2, [r7, #28]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d102      	bne.n	80088ca <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088c8:	e0c9      	b.n	8008a5e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ce:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d0ef      	beq.n	80088ba <SDMMC_GetCmdResp1+0x22>
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1ea      	bne.n	80088ba <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088e8:	f003 0304 	and.w	r3, r3, #4
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d004      	beq.n	80088fa <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2204      	movs	r2, #4
 80088f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80088f6:	2304      	movs	r3, #4
 80088f8:	e0b1      	b.n	8008a5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088fe:	f003 0301 	and.w	r3, r3, #1
 8008902:	2b00      	cmp	r3, #0
 8008904:	d004      	beq.n	8008910 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2201      	movs	r2, #1
 800890a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800890c:	2301      	movs	r3, #1
 800890e:	e0a6      	b.n	8008a5e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	22c5      	movs	r2, #197	; 0xc5
 8008914:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f7ff fd7f 	bl	800841a <SDIO_GetCommandResponse>
 800891c:	4603      	mov	r3, r0
 800891e:	461a      	mov	r2, r3
 8008920:	7afb      	ldrb	r3, [r7, #11]
 8008922:	4293      	cmp	r3, r2
 8008924:	d001      	beq.n	800892a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008926:	2301      	movs	r3, #1
 8008928:	e099      	b.n	8008a5e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800892a:	2100      	movs	r1, #0
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f7ff fd81 	bl	8008434 <SDIO_GetResponse>
 8008932:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008934:	697a      	ldr	r2, [r7, #20]
 8008936:	4b4e      	ldr	r3, [pc, #312]	; (8008a70 <SDMMC_GetCmdResp1+0x1d8>)
 8008938:	4013      	ands	r3, r2
 800893a:	2b00      	cmp	r3, #0
 800893c:	d101      	bne.n	8008942 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800893e:	2300      	movs	r3, #0
 8008940:	e08d      	b.n	8008a5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	2b00      	cmp	r3, #0
 8008946:	da02      	bge.n	800894e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008948:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800894c:	e087      	b.n	8008a5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008954:	2b00      	cmp	r3, #0
 8008956:	d001      	beq.n	800895c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008958:	2340      	movs	r3, #64	; 0x40
 800895a:	e080      	b.n	8008a5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008962:	2b00      	cmp	r3, #0
 8008964:	d001      	beq.n	800896a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008966:	2380      	movs	r3, #128	; 0x80
 8008968:	e079      	b.n	8008a5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008970:	2b00      	cmp	r3, #0
 8008972:	d002      	beq.n	800897a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008978:	e071      	b.n	8008a5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008980:	2b00      	cmp	r3, #0
 8008982:	d002      	beq.n	800898a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008984:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008988:	e069      	b.n	8008a5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008990:	2b00      	cmp	r3, #0
 8008992:	d002      	beq.n	800899a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008998:	e061      	b.n	8008a5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d002      	beq.n	80089aa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80089a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089a8:	e059      	b.n	8008a5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d002      	beq.n	80089ba <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80089b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089b8:	e051      	b.n	8008a5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d002      	beq.n	80089ca <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80089c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80089c8:	e049      	b.n	8008a5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d002      	beq.n	80089da <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80089d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80089d8:	e041      	b.n	8008a5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d002      	beq.n	80089ea <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80089e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089e8:	e039      	b.n	8008a5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d002      	beq.n	80089fa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80089f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80089f8:	e031      	b.n	8008a5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d002      	beq.n	8008a0a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008a04:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008a08:	e029      	b.n	8008a5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d002      	beq.n	8008a1a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008a14:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008a18:	e021      	b.n	8008a5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d002      	beq.n	8008a2a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008a24:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008a28:	e019      	b.n	8008a5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d002      	beq.n	8008a3a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008a34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008a38:	e011      	b.n	8008a5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d002      	beq.n	8008a4a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008a44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008a48:	e009      	b.n	8008a5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	f003 0308 	and.w	r3, r3, #8
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d002      	beq.n	8008a5a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008a54:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008a58:	e001      	b.n	8008a5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008a5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3720      	adds	r7, #32
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	20000104 	.word	0x20000104
 8008a6c:	10624dd3 	.word	0x10624dd3
 8008a70:	fdffe008 	.word	0xfdffe008

08008a74 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b085      	sub	sp, #20
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008a7c:	4b1f      	ldr	r3, [pc, #124]	; (8008afc <SDMMC_GetCmdResp2+0x88>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a1f      	ldr	r2, [pc, #124]	; (8008b00 <SDMMC_GetCmdResp2+0x8c>)
 8008a82:	fba2 2303 	umull	r2, r3, r2, r3
 8008a86:	0a5b      	lsrs	r3, r3, #9
 8008a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a8c:	fb02 f303 	mul.w	r3, r2, r3
 8008a90:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	1e5a      	subs	r2, r3, #1
 8008a96:	60fa      	str	r2, [r7, #12]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d102      	bne.n	8008aa2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008a9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008aa0:	e026      	b.n	8008af0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d0ef      	beq.n	8008a92 <SDMMC_GetCmdResp2+0x1e>
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d1ea      	bne.n	8008a92 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ac0:	f003 0304 	and.w	r3, r3, #4
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d004      	beq.n	8008ad2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2204      	movs	r2, #4
 8008acc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ace:	2304      	movs	r3, #4
 8008ad0:	e00e      	b.n	8008af0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ad6:	f003 0301 	and.w	r3, r3, #1
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d004      	beq.n	8008ae8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e003      	b.n	8008af0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	22c5      	movs	r2, #197	; 0xc5
 8008aec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3714      	adds	r7, #20
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr
 8008afc:	20000104 	.word	0x20000104
 8008b00:	10624dd3 	.word	0x10624dd3

08008b04 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008b0c:	4b1a      	ldr	r3, [pc, #104]	; (8008b78 <SDMMC_GetCmdResp3+0x74>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a1a      	ldr	r2, [pc, #104]	; (8008b7c <SDMMC_GetCmdResp3+0x78>)
 8008b12:	fba2 2303 	umull	r2, r3, r2, r3
 8008b16:	0a5b      	lsrs	r3, r3, #9
 8008b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b1c:	fb02 f303 	mul.w	r3, r2, r3
 8008b20:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	1e5a      	subs	r2, r3, #1
 8008b26:	60fa      	str	r2, [r7, #12]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d102      	bne.n	8008b32 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008b2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b30:	e01b      	b.n	8008b6a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b36:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d0ef      	beq.n	8008b22 <SDMMC_GetCmdResp3+0x1e>
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d1ea      	bne.n	8008b22 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b50:	f003 0304 	and.w	r3, r3, #4
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d004      	beq.n	8008b62 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2204      	movs	r2, #4
 8008b5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008b5e:	2304      	movs	r3, #4
 8008b60:	e003      	b.n	8008b6a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	22c5      	movs	r2, #197	; 0xc5
 8008b66:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3714      	adds	r7, #20
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop
 8008b78:	20000104 	.word	0x20000104
 8008b7c:	10624dd3 	.word	0x10624dd3

08008b80 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b088      	sub	sp, #32
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	460b      	mov	r3, r1
 8008b8a:	607a      	str	r2, [r7, #4]
 8008b8c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008b8e:	4b35      	ldr	r3, [pc, #212]	; (8008c64 <SDMMC_GetCmdResp6+0xe4>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a35      	ldr	r2, [pc, #212]	; (8008c68 <SDMMC_GetCmdResp6+0xe8>)
 8008b94:	fba2 2303 	umull	r2, r3, r2, r3
 8008b98:	0a5b      	lsrs	r3, r3, #9
 8008b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b9e:	fb02 f303 	mul.w	r3, r2, r3
 8008ba2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	1e5a      	subs	r2, r3, #1
 8008ba8:	61fa      	str	r2, [r7, #28]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d102      	bne.n	8008bb4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008bae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008bb2:	e052      	b.n	8008c5a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d0ef      	beq.n	8008ba4 <SDMMC_GetCmdResp6+0x24>
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1ea      	bne.n	8008ba4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bd2:	f003 0304 	and.w	r3, r3, #4
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d004      	beq.n	8008be4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2204      	movs	r2, #4
 8008bde:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008be0:	2304      	movs	r3, #4
 8008be2:	e03a      	b.n	8008c5a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008be8:	f003 0301 	and.w	r3, r3, #1
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d004      	beq.n	8008bfa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e02f      	b.n	8008c5a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f7ff fc0d 	bl	800841a <SDIO_GetCommandResponse>
 8008c00:	4603      	mov	r3, r0
 8008c02:	461a      	mov	r2, r3
 8008c04:	7afb      	ldrb	r3, [r7, #11]
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d001      	beq.n	8008c0e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e025      	b.n	8008c5a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	22c5      	movs	r2, #197	; 0xc5
 8008c12:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008c14:	2100      	movs	r1, #0
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f7ff fc0c 	bl	8008434 <SDIO_GetResponse>
 8008c1c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d106      	bne.n	8008c36 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	0c1b      	lsrs	r3, r3, #16
 8008c2c:	b29a      	uxth	r2, r3
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008c32:	2300      	movs	r3, #0
 8008c34:	e011      	b.n	8008c5a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d002      	beq.n	8008c46 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008c40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c44:	e009      	b.n	8008c5a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d002      	beq.n	8008c56 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c54:	e001      	b.n	8008c5a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008c56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3720      	adds	r7, #32
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	20000104 	.word	0x20000104
 8008c68:	10624dd3 	.word	0x10624dd3

08008c6c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008c74:	4b22      	ldr	r3, [pc, #136]	; (8008d00 <SDMMC_GetCmdResp7+0x94>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a22      	ldr	r2, [pc, #136]	; (8008d04 <SDMMC_GetCmdResp7+0x98>)
 8008c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c7e:	0a5b      	lsrs	r3, r3, #9
 8008c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c84:	fb02 f303 	mul.w	r3, r2, r3
 8008c88:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	1e5a      	subs	r2, r3, #1
 8008c8e:	60fa      	str	r2, [r7, #12]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d102      	bne.n	8008c9a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008c94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c98:	e02c      	b.n	8008cf4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c9e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d0ef      	beq.n	8008c8a <SDMMC_GetCmdResp7+0x1e>
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1ea      	bne.n	8008c8a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cb8:	f003 0304 	and.w	r3, r3, #4
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d004      	beq.n	8008cca <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2204      	movs	r2, #4
 8008cc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008cc6:	2304      	movs	r3, #4
 8008cc8:	e014      	b.n	8008cf4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d004      	beq.n	8008ce0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e009      	b.n	8008cf4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d002      	beq.n	8008cf2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2240      	movs	r2, #64	; 0x40
 8008cf0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008cf2:	2300      	movs	r3, #0
  
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3714      	adds	r7, #20
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr
 8008d00:	20000104 	.word	0x20000104
 8008d04:	10624dd3 	.word	0x10624dd3

08008d08 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b085      	sub	sp, #20
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008d10:	4b11      	ldr	r3, [pc, #68]	; (8008d58 <SDMMC_GetCmdError+0x50>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a11      	ldr	r2, [pc, #68]	; (8008d5c <SDMMC_GetCmdError+0x54>)
 8008d16:	fba2 2303 	umull	r2, r3, r2, r3
 8008d1a:	0a5b      	lsrs	r3, r3, #9
 8008d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d20:	fb02 f303 	mul.w	r3, r2, r3
 8008d24:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	1e5a      	subs	r2, r3, #1
 8008d2a:	60fa      	str	r2, [r7, #12]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d102      	bne.n	8008d36 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008d30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d34:	e009      	b.n	8008d4a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d0f1      	beq.n	8008d26 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	22c5      	movs	r2, #197	; 0xc5
 8008d46:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	20000104 	.word	0x20000104
 8008d5c:	10624dd3 	.word	0x10624dd3

08008d60 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008d64:	4904      	ldr	r1, [pc, #16]	; (8008d78 <MX_FATFS_Init+0x18>)
 8008d66:	4805      	ldr	r0, [pc, #20]	; (8008d7c <MX_FATFS_Init+0x1c>)
 8008d68:	f002 fe72 	bl	800ba50 <FATFS_LinkDriver>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	461a      	mov	r2, r3
 8008d70:	4b03      	ldr	r3, [pc, #12]	; (8008d80 <MX_FATFS_Init+0x20>)
 8008d72:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008d74:	bf00      	nop
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	20000a90 	.word	0x20000a90
 8008d7c:	0800ec70 	.word	0x0800ec70
 8008d80:	20000a8c 	.word	0x20000a8c

08008d84 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008d84:	b480      	push	{r7}
 8008d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008d88:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008d9e:	f000 f888 	bl	8008eb2 <BSP_SD_IsDetected>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d001      	beq.n	8008dac <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	e005      	b.n	8008db8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008dac:	4804      	ldr	r0, [pc, #16]	; (8008dc0 <BSP_SD_Init+0x2c>)
 8008dae:	f7fd f981 	bl	80060b4 <HAL_SD_Init>
 8008db2:	4603      	mov	r3, r0
 8008db4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8008db6:	79fb      	ldrb	r3, [r7, #7]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3708      	adds	r7, #8
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	2000084c 	.word	0x2000084c

08008dc4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b086      	sub	sp, #24
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	68ba      	ldr	r2, [r7, #8]
 8008dd8:	68f9      	ldr	r1, [r7, #12]
 8008dda:	4806      	ldr	r0, [pc, #24]	; (8008df4 <BSP_SD_ReadBlocks_DMA+0x30>)
 8008ddc:	f7fd fa1a 	bl	8006214 <HAL_SD_ReadBlocks_DMA>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d001      	beq.n	8008dea <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3718      	adds	r7, #24
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	2000084c 	.word	0x2000084c

08008df8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008e04:	2300      	movs	r3, #0
 8008e06:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	68ba      	ldr	r2, [r7, #8]
 8008e0c:	68f9      	ldr	r1, [r7, #12]
 8008e0e:	4806      	ldr	r0, [pc, #24]	; (8008e28 <BSP_SD_WriteBlocks_DMA+0x30>)
 8008e10:	f7fd fae2 	bl	80063d8 <HAL_SD_WriteBlocks_DMA>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d001      	beq.n	8008e1e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3718      	adds	r7, #24
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	2000084c 	.word	0x2000084c

08008e2c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008e30:	4805      	ldr	r0, [pc, #20]	; (8008e48 <BSP_SD_GetCardState+0x1c>)
 8008e32:	f7fd ff17 	bl	8006c64 <HAL_SD_GetCardState>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b04      	cmp	r3, #4
 8008e3a:	bf14      	ite	ne
 8008e3c:	2301      	movne	r3, #1
 8008e3e:	2300      	moveq	r3, #0
 8008e40:	b2db      	uxtb	r3, r3
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	2000084c 	.word	0x2000084c

08008e4c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008e54:	6879      	ldr	r1, [r7, #4]
 8008e56:	4803      	ldr	r0, [pc, #12]	; (8008e64 <BSP_SD_GetCardInfo+0x18>)
 8008e58:	f7fd fed8 	bl	8006c0c <HAL_SD_GetCardInfo>
}
 8008e5c:	bf00      	nop
 8008e5e:	3708      	adds	r7, #8
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	2000084c 	.word	0x2000084c

08008e68 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8008e70:	f000 f818 	bl	8008ea4 <BSP_SD_AbortCallback>
}
 8008e74:	bf00      	nop
 8008e76:	3708      	adds	r7, #8
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008e84:	f000 f98c 	bl	80091a0 <BSP_SD_WriteCpltCallback>
}
 8008e88:	bf00      	nop
 8008e8a:	3708      	adds	r7, #8
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008e98:	f000 f98e 	bl	80091b8 <BSP_SD_ReadCpltCallback>
}
 8008e9c:	bf00      	nop
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	af00      	add	r7, sp, #0

}
 8008ea8:	bf00      	nop
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr

08008eb2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008eb2:	b480      	push	{r7}
 8008eb4:	b083      	sub	sp, #12
 8008eb6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8008ebc:	79fb      	ldrb	r3, [r7, #7]
 8008ebe:	b2db      	uxtb	r3, r3
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8008ed4:	f7fa fd5a 	bl	800398c <HAL_GetTick>
 8008ed8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8008eda:	e006      	b.n	8008eea <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008edc:	f7ff ffa6 	bl	8008e2c <BSP_SD_GetCardState>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d101      	bne.n	8008eea <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	e009      	b.n	8008efe <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8008eea:	f7fa fd4f 	bl	800398c <HAL_GetTick>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	1ad3      	subs	r3, r2, r3
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d8f0      	bhi.n	8008edc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8008efa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
	...

08008f08 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	4603      	mov	r3, r0
 8008f10:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008f12:	4b0b      	ldr	r3, [pc, #44]	; (8008f40 <SD_CheckStatus+0x38>)
 8008f14:	2201      	movs	r2, #1
 8008f16:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008f18:	f7ff ff88 	bl	8008e2c <BSP_SD_GetCardState>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d107      	bne.n	8008f32 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008f22:	4b07      	ldr	r3, [pc, #28]	; (8008f40 <SD_CheckStatus+0x38>)
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	f023 0301 	bic.w	r3, r3, #1
 8008f2c:	b2da      	uxtb	r2, r3
 8008f2e:	4b04      	ldr	r3, [pc, #16]	; (8008f40 <SD_CheckStatus+0x38>)
 8008f30:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008f32:	4b03      	ldr	r3, [pc, #12]	; (8008f40 <SD_CheckStatus+0x38>)
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	b2db      	uxtb	r3, r3
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3708      	adds	r7, #8
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	2000010d 	.word	0x2000010d

08008f44 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008f4e:	f7ff ff21 	bl	8008d94 <BSP_SD_Init>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d107      	bne.n	8008f68 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8008f58:	79fb      	ldrb	r3, [r7, #7]
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7ff ffd4 	bl	8008f08 <SD_CheckStatus>
 8008f60:	4603      	mov	r3, r0
 8008f62:	461a      	mov	r2, r3
 8008f64:	4b04      	ldr	r3, [pc, #16]	; (8008f78 <SD_initialize+0x34>)
 8008f66:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008f68:	4b03      	ldr	r3, [pc, #12]	; (8008f78 <SD_initialize+0x34>)
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	b2db      	uxtb	r3, r3
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	2000010d 	.word	0x2000010d

08008f7c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	4603      	mov	r3, r0
 8008f84:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008f86:	79fb      	ldrb	r3, [r7, #7]
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7ff ffbd 	bl	8008f08 <SD_CheckStatus>
 8008f8e:	4603      	mov	r3, r0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3708      	adds	r7, #8
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b086      	sub	sp, #24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60b9      	str	r1, [r7, #8]
 8008fa0:	607a      	str	r2, [r7, #4]
 8008fa2:	603b      	str	r3, [r7, #0]
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008fac:	f247 5030 	movw	r0, #30000	; 0x7530
 8008fb0:	f7ff ff8c 	bl	8008ecc <SD_CheckStatusWithTimeout>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	da01      	bge.n	8008fbe <SD_read+0x26>
  {
    return res;
 8008fba:	7dfb      	ldrb	r3, [r7, #23]
 8008fbc:	e03b      	b.n	8009036 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8008fbe:	683a      	ldr	r2, [r7, #0]
 8008fc0:	6879      	ldr	r1, [r7, #4]
 8008fc2:	68b8      	ldr	r0, [r7, #8]
 8008fc4:	f7ff fefe 	bl	8008dc4 <BSP_SD_ReadBlocks_DMA>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d132      	bne.n	8009034 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8008fce:	4b1c      	ldr	r3, [pc, #112]	; (8009040 <SD_read+0xa8>)
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8008fd4:	f7fa fcda 	bl	800398c <HAL_GetTick>
 8008fd8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008fda:	bf00      	nop
 8008fdc:	4b18      	ldr	r3, [pc, #96]	; (8009040 <SD_read+0xa8>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d108      	bne.n	8008ff6 <SD_read+0x5e>
 8008fe4:	f7fa fcd2 	bl	800398c <HAL_GetTick>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	1ad3      	subs	r3, r2, r3
 8008fee:	f247 522f 	movw	r2, #29999	; 0x752f
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d9f2      	bls.n	8008fdc <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8008ff6:	4b12      	ldr	r3, [pc, #72]	; (8009040 <SD_read+0xa8>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d102      	bne.n	8009004 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	75fb      	strb	r3, [r7, #23]
 8009002:	e017      	b.n	8009034 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8009004:	4b0e      	ldr	r3, [pc, #56]	; (8009040 <SD_read+0xa8>)
 8009006:	2200      	movs	r2, #0
 8009008:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800900a:	f7fa fcbf 	bl	800398c <HAL_GetTick>
 800900e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009010:	e007      	b.n	8009022 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009012:	f7ff ff0b 	bl	8008e2c <BSP_SD_GetCardState>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d102      	bne.n	8009022 <SD_read+0x8a>
          {
            res = RES_OK;
 800901c:	2300      	movs	r3, #0
 800901e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009020:	e008      	b.n	8009034 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009022:	f7fa fcb3 	bl	800398c <HAL_GetTick>
 8009026:	4602      	mov	r2, r0
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	1ad3      	subs	r3, r2, r3
 800902c:	f247 522f 	movw	r2, #29999	; 0x752f
 8009030:	4293      	cmp	r3, r2
 8009032:	d9ee      	bls.n	8009012 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8009034:	7dfb      	ldrb	r3, [r7, #23]
}
 8009036:	4618      	mov	r0, r3
 8009038:	3718      	adds	r7, #24
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	20000a98 	.word	0x20000a98

08009044 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b086      	sub	sp, #24
 8009048:	af00      	add	r7, sp, #0
 800904a:	60b9      	str	r1, [r7, #8]
 800904c:	607a      	str	r2, [r7, #4]
 800904e:	603b      	str	r3, [r7, #0]
 8009050:	4603      	mov	r3, r0
 8009052:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8009058:	4b24      	ldr	r3, [pc, #144]	; (80090ec <SD_write+0xa8>)
 800905a:	2200      	movs	r2, #0
 800905c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800905e:	f247 5030 	movw	r0, #30000	; 0x7530
 8009062:	f7ff ff33 	bl	8008ecc <SD_CheckStatusWithTimeout>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	da01      	bge.n	8009070 <SD_write+0x2c>
  {
    return res;
 800906c:	7dfb      	ldrb	r3, [r7, #23]
 800906e:	e038      	b.n	80090e2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009070:	683a      	ldr	r2, [r7, #0]
 8009072:	6879      	ldr	r1, [r7, #4]
 8009074:	68b8      	ldr	r0, [r7, #8]
 8009076:	f7ff febf 	bl	8008df8 <BSP_SD_WriteBlocks_DMA>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d12f      	bne.n	80090e0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009080:	f7fa fc84 	bl	800398c <HAL_GetTick>
 8009084:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009086:	bf00      	nop
 8009088:	4b18      	ldr	r3, [pc, #96]	; (80090ec <SD_write+0xa8>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d108      	bne.n	80090a2 <SD_write+0x5e>
 8009090:	f7fa fc7c 	bl	800398c <HAL_GetTick>
 8009094:	4602      	mov	r2, r0
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	1ad3      	subs	r3, r2, r3
 800909a:	f247 522f 	movw	r2, #29999	; 0x752f
 800909e:	4293      	cmp	r3, r2
 80090a0:	d9f2      	bls.n	8009088 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80090a2:	4b12      	ldr	r3, [pc, #72]	; (80090ec <SD_write+0xa8>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d102      	bne.n	80090b0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	75fb      	strb	r3, [r7, #23]
 80090ae:	e017      	b.n	80090e0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80090b0:	4b0e      	ldr	r3, [pc, #56]	; (80090ec <SD_write+0xa8>)
 80090b2:	2200      	movs	r2, #0
 80090b4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80090b6:	f7fa fc69 	bl	800398c <HAL_GetTick>
 80090ba:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80090bc:	e007      	b.n	80090ce <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80090be:	f7ff feb5 	bl	8008e2c <BSP_SD_GetCardState>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d102      	bne.n	80090ce <SD_write+0x8a>
          {
            res = RES_OK;
 80090c8:	2300      	movs	r3, #0
 80090ca:	75fb      	strb	r3, [r7, #23]
            break;
 80090cc:	e008      	b.n	80090e0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80090ce:	f7fa fc5d 	bl	800398c <HAL_GetTick>
 80090d2:	4602      	mov	r2, r0
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	1ad3      	subs	r3, r2, r3
 80090d8:	f247 522f 	movw	r2, #29999	; 0x752f
 80090dc:	4293      	cmp	r3, r2
 80090de:	d9ee      	bls.n	80090be <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80090e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3718      	adds	r7, #24
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	20000a94 	.word	0x20000a94

080090f0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b08c      	sub	sp, #48	; 0x30
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	4603      	mov	r3, r0
 80090f8:	603a      	str	r2, [r7, #0]
 80090fa:	71fb      	strb	r3, [r7, #7]
 80090fc:	460b      	mov	r3, r1
 80090fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009106:	4b25      	ldr	r3, [pc, #148]	; (800919c <SD_ioctl+0xac>)
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	b2db      	uxtb	r3, r3
 800910c:	f003 0301 	and.w	r3, r3, #1
 8009110:	2b00      	cmp	r3, #0
 8009112:	d001      	beq.n	8009118 <SD_ioctl+0x28>
 8009114:	2303      	movs	r3, #3
 8009116:	e03c      	b.n	8009192 <SD_ioctl+0xa2>

  switch (cmd)
 8009118:	79bb      	ldrb	r3, [r7, #6]
 800911a:	2b03      	cmp	r3, #3
 800911c:	d834      	bhi.n	8009188 <SD_ioctl+0x98>
 800911e:	a201      	add	r2, pc, #4	; (adr r2, 8009124 <SD_ioctl+0x34>)
 8009120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009124:	08009135 	.word	0x08009135
 8009128:	0800913d 	.word	0x0800913d
 800912c:	08009155 	.word	0x08009155
 8009130:	0800916f 	.word	0x0800916f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009134:	2300      	movs	r3, #0
 8009136:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800913a:	e028      	b.n	800918e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800913c:	f107 030c 	add.w	r3, r7, #12
 8009140:	4618      	mov	r0, r3
 8009142:	f7ff fe83 	bl	8008e4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800914c:	2300      	movs	r3, #0
 800914e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009152:	e01c      	b.n	800918e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009154:	f107 030c 	add.w	r3, r7, #12
 8009158:	4618      	mov	r0, r3
 800915a:	f7ff fe77 	bl	8008e4c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800915e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009160:	b29a      	uxth	r2, r3
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009166:	2300      	movs	r3, #0
 8009168:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800916c:	e00f      	b.n	800918e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800916e:	f107 030c 	add.w	r3, r7, #12
 8009172:	4618      	mov	r0, r3
 8009174:	f7ff fe6a 	bl	8008e4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917a:	0a5a      	lsrs	r2, r3, #9
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009180:	2300      	movs	r3, #0
 8009182:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009186:	e002      	b.n	800918e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009188:	2304      	movs	r3, #4
 800918a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800918e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009192:	4618      	mov	r0, r3
 8009194:	3730      	adds	r7, #48	; 0x30
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	2000010d 	.word	0x2000010d

080091a0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80091a0:	b480      	push	{r7}
 80091a2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80091a4:	4b03      	ldr	r3, [pc, #12]	; (80091b4 <BSP_SD_WriteCpltCallback+0x14>)
 80091a6:	2201      	movs	r2, #1
 80091a8:	601a      	str	r2, [r3, #0]
}
 80091aa:	bf00      	nop
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr
 80091b4:	20000a94 	.word	0x20000a94

080091b8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80091b8:	b480      	push	{r7}
 80091ba:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80091bc:	4b03      	ldr	r3, [pc, #12]	; (80091cc <BSP_SD_ReadCpltCallback+0x14>)
 80091be:	2201      	movs	r2, #1
 80091c0:	601a      	str	r2, [r3, #0]
}
 80091c2:	bf00      	nop
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr
 80091cc:	20000a98 	.word	0x20000a98

080091d0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	4603      	mov	r3, r0
 80091d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80091da:	79fb      	ldrb	r3, [r7, #7]
 80091dc:	4a08      	ldr	r2, [pc, #32]	; (8009200 <disk_status+0x30>)
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4413      	add	r3, r2
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	79fa      	ldrb	r2, [r7, #7]
 80091e8:	4905      	ldr	r1, [pc, #20]	; (8009200 <disk_status+0x30>)
 80091ea:	440a      	add	r2, r1
 80091ec:	7a12      	ldrb	r2, [r2, #8]
 80091ee:	4610      	mov	r0, r2
 80091f0:	4798      	blx	r3
 80091f2:	4603      	mov	r3, r0
 80091f4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80091f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	20000ac4 	.word	0x20000ac4

08009204 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	4603      	mov	r3, r0
 800920c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800920e:	2300      	movs	r3, #0
 8009210:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009212:	79fb      	ldrb	r3, [r7, #7]
 8009214:	4a0d      	ldr	r2, [pc, #52]	; (800924c <disk_initialize+0x48>)
 8009216:	5cd3      	ldrb	r3, [r2, r3]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d111      	bne.n	8009240 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800921c:	79fb      	ldrb	r3, [r7, #7]
 800921e:	4a0b      	ldr	r2, [pc, #44]	; (800924c <disk_initialize+0x48>)
 8009220:	2101      	movs	r1, #1
 8009222:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009224:	79fb      	ldrb	r3, [r7, #7]
 8009226:	4a09      	ldr	r2, [pc, #36]	; (800924c <disk_initialize+0x48>)
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	4413      	add	r3, r2
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	79fa      	ldrb	r2, [r7, #7]
 8009232:	4906      	ldr	r1, [pc, #24]	; (800924c <disk_initialize+0x48>)
 8009234:	440a      	add	r2, r1
 8009236:	7a12      	ldrb	r2, [r2, #8]
 8009238:	4610      	mov	r0, r2
 800923a:	4798      	blx	r3
 800923c:	4603      	mov	r3, r0
 800923e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009240:	7bfb      	ldrb	r3, [r7, #15]
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	20000ac4 	.word	0x20000ac4

08009250 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009250:	b590      	push	{r4, r7, lr}
 8009252:	b087      	sub	sp, #28
 8009254:	af00      	add	r7, sp, #0
 8009256:	60b9      	str	r1, [r7, #8]
 8009258:	607a      	str	r2, [r7, #4]
 800925a:	603b      	str	r3, [r7, #0]
 800925c:	4603      	mov	r3, r0
 800925e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009260:	7bfb      	ldrb	r3, [r7, #15]
 8009262:	4a0a      	ldr	r2, [pc, #40]	; (800928c <disk_read+0x3c>)
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4413      	add	r3, r2
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	689c      	ldr	r4, [r3, #8]
 800926c:	7bfb      	ldrb	r3, [r7, #15]
 800926e:	4a07      	ldr	r2, [pc, #28]	; (800928c <disk_read+0x3c>)
 8009270:	4413      	add	r3, r2
 8009272:	7a18      	ldrb	r0, [r3, #8]
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	68b9      	ldr	r1, [r7, #8]
 800927a:	47a0      	blx	r4
 800927c:	4603      	mov	r3, r0
 800927e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009280:	7dfb      	ldrb	r3, [r7, #23]
}
 8009282:	4618      	mov	r0, r3
 8009284:	371c      	adds	r7, #28
 8009286:	46bd      	mov	sp, r7
 8009288:	bd90      	pop	{r4, r7, pc}
 800928a:	bf00      	nop
 800928c:	20000ac4 	.word	0x20000ac4

08009290 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009290:	b590      	push	{r4, r7, lr}
 8009292:	b087      	sub	sp, #28
 8009294:	af00      	add	r7, sp, #0
 8009296:	60b9      	str	r1, [r7, #8]
 8009298:	607a      	str	r2, [r7, #4]
 800929a:	603b      	str	r3, [r7, #0]
 800929c:	4603      	mov	r3, r0
 800929e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80092a0:	7bfb      	ldrb	r3, [r7, #15]
 80092a2:	4a0a      	ldr	r2, [pc, #40]	; (80092cc <disk_write+0x3c>)
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	4413      	add	r3, r2
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	68dc      	ldr	r4, [r3, #12]
 80092ac:	7bfb      	ldrb	r3, [r7, #15]
 80092ae:	4a07      	ldr	r2, [pc, #28]	; (80092cc <disk_write+0x3c>)
 80092b0:	4413      	add	r3, r2
 80092b2:	7a18      	ldrb	r0, [r3, #8]
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	68b9      	ldr	r1, [r7, #8]
 80092ba:	47a0      	blx	r4
 80092bc:	4603      	mov	r3, r0
 80092be:	75fb      	strb	r3, [r7, #23]
  return res;
 80092c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	371c      	adds	r7, #28
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd90      	pop	{r4, r7, pc}
 80092ca:	bf00      	nop
 80092cc:	20000ac4 	.word	0x20000ac4

080092d0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	4603      	mov	r3, r0
 80092d8:	603a      	str	r2, [r7, #0]
 80092da:	71fb      	strb	r3, [r7, #7]
 80092dc:	460b      	mov	r3, r1
 80092de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80092e0:	79fb      	ldrb	r3, [r7, #7]
 80092e2:	4a09      	ldr	r2, [pc, #36]	; (8009308 <disk_ioctl+0x38>)
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	4413      	add	r3, r2
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	79fa      	ldrb	r2, [r7, #7]
 80092ee:	4906      	ldr	r1, [pc, #24]	; (8009308 <disk_ioctl+0x38>)
 80092f0:	440a      	add	r2, r1
 80092f2:	7a10      	ldrb	r0, [r2, #8]
 80092f4:	79b9      	ldrb	r1, [r7, #6]
 80092f6:	683a      	ldr	r2, [r7, #0]
 80092f8:	4798      	blx	r3
 80092fa:	4603      	mov	r3, r0
 80092fc:	73fb      	strb	r3, [r7, #15]
  return res;
 80092fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009300:	4618      	mov	r0, r3
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	20000ac4 	.word	0x20000ac4

0800930c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800930c:	b480      	push	{r7}
 800930e:	b085      	sub	sp, #20
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	3301      	adds	r3, #1
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800931c:	89fb      	ldrh	r3, [r7, #14]
 800931e:	021b      	lsls	r3, r3, #8
 8009320:	b21a      	sxth	r2, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	b21b      	sxth	r3, r3
 8009328:	4313      	orrs	r3, r2
 800932a:	b21b      	sxth	r3, r3
 800932c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800932e:	89fb      	ldrh	r3, [r7, #14]
}
 8009330:	4618      	mov	r0, r3
 8009332:	3714      	adds	r7, #20
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	3303      	adds	r3, #3
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	021b      	lsls	r3, r3, #8
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	3202      	adds	r2, #2
 8009354:	7812      	ldrb	r2, [r2, #0]
 8009356:	4313      	orrs	r3, r2
 8009358:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	021b      	lsls	r3, r3, #8
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	3201      	adds	r2, #1
 8009362:	7812      	ldrb	r2, [r2, #0]
 8009364:	4313      	orrs	r3, r2
 8009366:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	021b      	lsls	r3, r3, #8
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	7812      	ldrb	r2, [r2, #0]
 8009370:	4313      	orrs	r3, r2
 8009372:	60fb      	str	r3, [r7, #12]
	return rv;
 8009374:	68fb      	ldr	r3, [r7, #12]
}
 8009376:	4618      	mov	r0, r3
 8009378:	3714      	adds	r7, #20
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr

08009382 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009382:	b480      	push	{r7}
 8009384:	b083      	sub	sp, #12
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	460b      	mov	r3, r1
 800938c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	1c5a      	adds	r2, r3, #1
 8009392:	607a      	str	r2, [r7, #4]
 8009394:	887a      	ldrh	r2, [r7, #2]
 8009396:	b2d2      	uxtb	r2, r2
 8009398:	701a      	strb	r2, [r3, #0]
 800939a:	887b      	ldrh	r3, [r7, #2]
 800939c:	0a1b      	lsrs	r3, r3, #8
 800939e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	1c5a      	adds	r2, r3, #1
 80093a4:	607a      	str	r2, [r7, #4]
 80093a6:	887a      	ldrh	r2, [r7, #2]
 80093a8:	b2d2      	uxtb	r2, r2
 80093aa:	701a      	strb	r2, [r3, #0]
}
 80093ac:	bf00      	nop
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	1c5a      	adds	r2, r3, #1
 80093c6:	607a      	str	r2, [r7, #4]
 80093c8:	683a      	ldr	r2, [r7, #0]
 80093ca:	b2d2      	uxtb	r2, r2
 80093cc:	701a      	strb	r2, [r3, #0]
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	0a1b      	lsrs	r3, r3, #8
 80093d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	1c5a      	adds	r2, r3, #1
 80093d8:	607a      	str	r2, [r7, #4]
 80093da:	683a      	ldr	r2, [r7, #0]
 80093dc:	b2d2      	uxtb	r2, r2
 80093de:	701a      	strb	r2, [r3, #0]
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	0a1b      	lsrs	r3, r3, #8
 80093e4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	1c5a      	adds	r2, r3, #1
 80093ea:	607a      	str	r2, [r7, #4]
 80093ec:	683a      	ldr	r2, [r7, #0]
 80093ee:	b2d2      	uxtb	r2, r2
 80093f0:	701a      	strb	r2, [r3, #0]
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	0a1b      	lsrs	r3, r3, #8
 80093f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	1c5a      	adds	r2, r3, #1
 80093fc:	607a      	str	r2, [r7, #4]
 80093fe:	683a      	ldr	r2, [r7, #0]
 8009400:	b2d2      	uxtb	r2, r2
 8009402:	701a      	strb	r2, [r3, #0]
}
 8009404:	bf00      	nop
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009410:	b480      	push	{r7}
 8009412:	b087      	sub	sp, #28
 8009414:	af00      	add	r7, sp, #0
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00d      	beq.n	8009446 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800942a:	693a      	ldr	r2, [r7, #16]
 800942c:	1c53      	adds	r3, r2, #1
 800942e:	613b      	str	r3, [r7, #16]
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	1c59      	adds	r1, r3, #1
 8009434:	6179      	str	r1, [r7, #20]
 8009436:	7812      	ldrb	r2, [r2, #0]
 8009438:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	3b01      	subs	r3, #1
 800943e:	607b      	str	r3, [r7, #4]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d1f1      	bne.n	800942a <mem_cpy+0x1a>
	}
}
 8009446:	bf00      	nop
 8009448:	371c      	adds	r7, #28
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr

08009452 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009452:	b480      	push	{r7}
 8009454:	b087      	sub	sp, #28
 8009456:	af00      	add	r7, sp, #0
 8009458:	60f8      	str	r0, [r7, #12]
 800945a:	60b9      	str	r1, [r7, #8]
 800945c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	1c5a      	adds	r2, r3, #1
 8009466:	617a      	str	r2, [r7, #20]
 8009468:	68ba      	ldr	r2, [r7, #8]
 800946a:	b2d2      	uxtb	r2, r2
 800946c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	3b01      	subs	r3, #1
 8009472:	607b      	str	r3, [r7, #4]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d1f3      	bne.n	8009462 <mem_set+0x10>
}
 800947a:	bf00      	nop
 800947c:	bf00      	nop
 800947e:	371c      	adds	r7, #28
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009488:	b480      	push	{r7}
 800948a:	b089      	sub	sp, #36	; 0x24
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	61fb      	str	r3, [r7, #28]
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800949c:	2300      	movs	r3, #0
 800949e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	1c5a      	adds	r2, r3, #1
 80094a4:	61fa      	str	r2, [r7, #28]
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	4619      	mov	r1, r3
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	1c5a      	adds	r2, r3, #1
 80094ae:	61ba      	str	r2, [r7, #24]
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	1acb      	subs	r3, r1, r3
 80094b4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	3b01      	subs	r3, #1
 80094ba:	607b      	str	r3, [r7, #4]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d002      	beq.n	80094c8 <mem_cmp+0x40>
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d0eb      	beq.n	80094a0 <mem_cmp+0x18>

	return r;
 80094c8:	697b      	ldr	r3, [r7, #20]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3724      	adds	r7, #36	; 0x24
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr

080094d6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80094d6:	b480      	push	{r7}
 80094d8:	b083      	sub	sp, #12
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
 80094de:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80094e0:	e002      	b.n	80094e8 <chk_chr+0x12>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	3301      	adds	r3, #1
 80094e6:	607b      	str	r3, [r7, #4]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d005      	beq.n	80094fc <chk_chr+0x26>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	461a      	mov	r2, r3
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d1f2      	bne.n	80094e2 <chk_chr+0xc>
	return *str;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	781b      	ldrb	r3, [r3, #0]
}
 8009500:	4618      	mov	r0, r3
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009516:	2300      	movs	r3, #0
 8009518:	60bb      	str	r3, [r7, #8]
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	60fb      	str	r3, [r7, #12]
 800951e:	e029      	b.n	8009574 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009520:	4a27      	ldr	r2, [pc, #156]	; (80095c0 <chk_lock+0xb4>)
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	011b      	lsls	r3, r3, #4
 8009526:	4413      	add	r3, r2
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d01d      	beq.n	800956a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800952e:	4a24      	ldr	r2, [pc, #144]	; (80095c0 <chk_lock+0xb4>)
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	011b      	lsls	r3, r3, #4
 8009534:	4413      	add	r3, r2
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	429a      	cmp	r2, r3
 800953e:	d116      	bne.n	800956e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009540:	4a1f      	ldr	r2, [pc, #124]	; (80095c0 <chk_lock+0xb4>)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	011b      	lsls	r3, r3, #4
 8009546:	4413      	add	r3, r2
 8009548:	3304      	adds	r3, #4
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009550:	429a      	cmp	r2, r3
 8009552:	d10c      	bne.n	800956e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009554:	4a1a      	ldr	r2, [pc, #104]	; (80095c0 <chk_lock+0xb4>)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	011b      	lsls	r3, r3, #4
 800955a:	4413      	add	r3, r2
 800955c:	3308      	adds	r3, #8
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009564:	429a      	cmp	r2, r3
 8009566:	d102      	bne.n	800956e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009568:	e007      	b.n	800957a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800956a:	2301      	movs	r3, #1
 800956c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	3301      	adds	r3, #1
 8009572:	60fb      	str	r3, [r7, #12]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2b01      	cmp	r3, #1
 8009578:	d9d2      	bls.n	8009520 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2b02      	cmp	r3, #2
 800957e:	d109      	bne.n	8009594 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d102      	bne.n	800958c <chk_lock+0x80>
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	2b02      	cmp	r3, #2
 800958a:	d101      	bne.n	8009590 <chk_lock+0x84>
 800958c:	2300      	movs	r3, #0
 800958e:	e010      	b.n	80095b2 <chk_lock+0xa6>
 8009590:	2312      	movs	r3, #18
 8009592:	e00e      	b.n	80095b2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d108      	bne.n	80095ac <chk_lock+0xa0>
 800959a:	4a09      	ldr	r2, [pc, #36]	; (80095c0 <chk_lock+0xb4>)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	011b      	lsls	r3, r3, #4
 80095a0:	4413      	add	r3, r2
 80095a2:	330c      	adds	r3, #12
 80095a4:	881b      	ldrh	r3, [r3, #0]
 80095a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095aa:	d101      	bne.n	80095b0 <chk_lock+0xa4>
 80095ac:	2310      	movs	r3, #16
 80095ae:	e000      	b.n	80095b2 <chk_lock+0xa6>
 80095b0:	2300      	movs	r3, #0
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3714      	adds	r7, #20
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	20000aa4 	.word	0x20000aa4

080095c4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80095ca:	2300      	movs	r3, #0
 80095cc:	607b      	str	r3, [r7, #4]
 80095ce:	e002      	b.n	80095d6 <enq_lock+0x12>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	3301      	adds	r3, #1
 80095d4:	607b      	str	r3, [r7, #4]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d806      	bhi.n	80095ea <enq_lock+0x26>
 80095dc:	4a09      	ldr	r2, [pc, #36]	; (8009604 <enq_lock+0x40>)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	011b      	lsls	r3, r3, #4
 80095e2:	4413      	add	r3, r2
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1f2      	bne.n	80095d0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	bf14      	ite	ne
 80095f0:	2301      	movne	r3, #1
 80095f2:	2300      	moveq	r3, #0
 80095f4:	b2db      	uxtb	r3, r3
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	370c      	adds	r7, #12
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	20000aa4 	.word	0x20000aa4

08009608 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009608:	b480      	push	{r7}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009612:	2300      	movs	r3, #0
 8009614:	60fb      	str	r3, [r7, #12]
 8009616:	e01f      	b.n	8009658 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009618:	4a41      	ldr	r2, [pc, #260]	; (8009720 <inc_lock+0x118>)
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	011b      	lsls	r3, r3, #4
 800961e:	4413      	add	r3, r2
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	429a      	cmp	r2, r3
 8009628:	d113      	bne.n	8009652 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800962a:	4a3d      	ldr	r2, [pc, #244]	; (8009720 <inc_lock+0x118>)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	011b      	lsls	r3, r3, #4
 8009630:	4413      	add	r3, r2
 8009632:	3304      	adds	r3, #4
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800963a:	429a      	cmp	r2, r3
 800963c:	d109      	bne.n	8009652 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800963e:	4a38      	ldr	r2, [pc, #224]	; (8009720 <inc_lock+0x118>)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	011b      	lsls	r3, r3, #4
 8009644:	4413      	add	r3, r2
 8009646:	3308      	adds	r3, #8
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800964e:	429a      	cmp	r2, r3
 8009650:	d006      	beq.n	8009660 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	3301      	adds	r3, #1
 8009656:	60fb      	str	r3, [r7, #12]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2b01      	cmp	r3, #1
 800965c:	d9dc      	bls.n	8009618 <inc_lock+0x10>
 800965e:	e000      	b.n	8009662 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009660:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2b02      	cmp	r3, #2
 8009666:	d132      	bne.n	80096ce <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009668:	2300      	movs	r3, #0
 800966a:	60fb      	str	r3, [r7, #12]
 800966c:	e002      	b.n	8009674 <inc_lock+0x6c>
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	3301      	adds	r3, #1
 8009672:	60fb      	str	r3, [r7, #12]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2b01      	cmp	r3, #1
 8009678:	d806      	bhi.n	8009688 <inc_lock+0x80>
 800967a:	4a29      	ldr	r2, [pc, #164]	; (8009720 <inc_lock+0x118>)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	011b      	lsls	r3, r3, #4
 8009680:	4413      	add	r3, r2
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d1f2      	bne.n	800966e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2b02      	cmp	r3, #2
 800968c:	d101      	bne.n	8009692 <inc_lock+0x8a>
 800968e:	2300      	movs	r3, #0
 8009690:	e040      	b.n	8009714 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	4922      	ldr	r1, [pc, #136]	; (8009720 <inc_lock+0x118>)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	011b      	lsls	r3, r3, #4
 800969c:	440b      	add	r3, r1
 800969e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	689a      	ldr	r2, [r3, #8]
 80096a4:	491e      	ldr	r1, [pc, #120]	; (8009720 <inc_lock+0x118>)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	011b      	lsls	r3, r3, #4
 80096aa:	440b      	add	r3, r1
 80096ac:	3304      	adds	r3, #4
 80096ae:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	695a      	ldr	r2, [r3, #20]
 80096b4:	491a      	ldr	r1, [pc, #104]	; (8009720 <inc_lock+0x118>)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	011b      	lsls	r3, r3, #4
 80096ba:	440b      	add	r3, r1
 80096bc:	3308      	adds	r3, #8
 80096be:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80096c0:	4a17      	ldr	r2, [pc, #92]	; (8009720 <inc_lock+0x118>)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	011b      	lsls	r3, r3, #4
 80096c6:	4413      	add	r3, r2
 80096c8:	330c      	adds	r3, #12
 80096ca:	2200      	movs	r2, #0
 80096cc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d009      	beq.n	80096e8 <inc_lock+0xe0>
 80096d4:	4a12      	ldr	r2, [pc, #72]	; (8009720 <inc_lock+0x118>)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	011b      	lsls	r3, r3, #4
 80096da:	4413      	add	r3, r2
 80096dc:	330c      	adds	r3, #12
 80096de:	881b      	ldrh	r3, [r3, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d001      	beq.n	80096e8 <inc_lock+0xe0>
 80096e4:	2300      	movs	r3, #0
 80096e6:	e015      	b.n	8009714 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d108      	bne.n	8009700 <inc_lock+0xf8>
 80096ee:	4a0c      	ldr	r2, [pc, #48]	; (8009720 <inc_lock+0x118>)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	011b      	lsls	r3, r3, #4
 80096f4:	4413      	add	r3, r2
 80096f6:	330c      	adds	r3, #12
 80096f8:	881b      	ldrh	r3, [r3, #0]
 80096fa:	3301      	adds	r3, #1
 80096fc:	b29a      	uxth	r2, r3
 80096fe:	e001      	b.n	8009704 <inc_lock+0xfc>
 8009700:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009704:	4906      	ldr	r1, [pc, #24]	; (8009720 <inc_lock+0x118>)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	011b      	lsls	r3, r3, #4
 800970a:	440b      	add	r3, r1
 800970c:	330c      	adds	r3, #12
 800970e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	3301      	adds	r3, #1
}
 8009714:	4618      	mov	r0, r3
 8009716:	3714      	adds	r7, #20
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr
 8009720:	20000aa4 	.word	0x20000aa4

08009724 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	3b01      	subs	r3, #1
 8009730:	607b      	str	r3, [r7, #4]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2b01      	cmp	r3, #1
 8009736:	d825      	bhi.n	8009784 <dec_lock+0x60>
		n = Files[i].ctr;
 8009738:	4a17      	ldr	r2, [pc, #92]	; (8009798 <dec_lock+0x74>)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	011b      	lsls	r3, r3, #4
 800973e:	4413      	add	r3, r2
 8009740:	330c      	adds	r3, #12
 8009742:	881b      	ldrh	r3, [r3, #0]
 8009744:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009746:	89fb      	ldrh	r3, [r7, #14]
 8009748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800974c:	d101      	bne.n	8009752 <dec_lock+0x2e>
 800974e:	2300      	movs	r3, #0
 8009750:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009752:	89fb      	ldrh	r3, [r7, #14]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d002      	beq.n	800975e <dec_lock+0x3a>
 8009758:	89fb      	ldrh	r3, [r7, #14]
 800975a:	3b01      	subs	r3, #1
 800975c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800975e:	4a0e      	ldr	r2, [pc, #56]	; (8009798 <dec_lock+0x74>)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	011b      	lsls	r3, r3, #4
 8009764:	4413      	add	r3, r2
 8009766:	330c      	adds	r3, #12
 8009768:	89fa      	ldrh	r2, [r7, #14]
 800976a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800976c:	89fb      	ldrh	r3, [r7, #14]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d105      	bne.n	800977e <dec_lock+0x5a>
 8009772:	4a09      	ldr	r2, [pc, #36]	; (8009798 <dec_lock+0x74>)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	011b      	lsls	r3, r3, #4
 8009778:	4413      	add	r3, r2
 800977a:	2200      	movs	r2, #0
 800977c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800977e:	2300      	movs	r3, #0
 8009780:	737b      	strb	r3, [r7, #13]
 8009782:	e001      	b.n	8009788 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009784:	2302      	movs	r3, #2
 8009786:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009788:	7b7b      	ldrb	r3, [r7, #13]
}
 800978a:	4618      	mov	r0, r3
 800978c:	3714      	adds	r7, #20
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop
 8009798:	20000aa4 	.word	0x20000aa4

0800979c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80097a4:	2300      	movs	r3, #0
 80097a6:	60fb      	str	r3, [r7, #12]
 80097a8:	e010      	b.n	80097cc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80097aa:	4a0d      	ldr	r2, [pc, #52]	; (80097e0 <clear_lock+0x44>)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	011b      	lsls	r3, r3, #4
 80097b0:	4413      	add	r3, r2
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d105      	bne.n	80097c6 <clear_lock+0x2a>
 80097ba:	4a09      	ldr	r2, [pc, #36]	; (80097e0 <clear_lock+0x44>)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	011b      	lsls	r3, r3, #4
 80097c0:	4413      	add	r3, r2
 80097c2:	2200      	movs	r2, #0
 80097c4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	3301      	adds	r3, #1
 80097ca:	60fb      	str	r3, [r7, #12]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d9eb      	bls.n	80097aa <clear_lock+0xe>
	}
}
 80097d2:	bf00      	nop
 80097d4:	bf00      	nop
 80097d6:	3714      	adds	r7, #20
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr
 80097e0:	20000aa4 	.word	0x20000aa4

080097e4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b086      	sub	sp, #24
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80097ec:	2300      	movs	r3, #0
 80097ee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	78db      	ldrb	r3, [r3, #3]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d034      	beq.n	8009862 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097fc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	7858      	ldrb	r0, [r3, #1]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009808:	2301      	movs	r3, #1
 800980a:	697a      	ldr	r2, [r7, #20]
 800980c:	f7ff fd40 	bl	8009290 <disk_write>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d002      	beq.n	800981c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009816:	2301      	movs	r3, #1
 8009818:	73fb      	strb	r3, [r7, #15]
 800981a:	e022      	b.n	8009862 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a1b      	ldr	r3, [r3, #32]
 8009826:	697a      	ldr	r2, [r7, #20]
 8009828:	1ad2      	subs	r2, r2, r3
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	699b      	ldr	r3, [r3, #24]
 800982e:	429a      	cmp	r2, r3
 8009830:	d217      	bcs.n	8009862 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	789b      	ldrb	r3, [r3, #2]
 8009836:	613b      	str	r3, [r7, #16]
 8009838:	e010      	b.n	800985c <sync_window+0x78>
					wsect += fs->fsize;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	699b      	ldr	r3, [r3, #24]
 800983e:	697a      	ldr	r2, [r7, #20]
 8009840:	4413      	add	r3, r2
 8009842:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	7858      	ldrb	r0, [r3, #1]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800984e:	2301      	movs	r3, #1
 8009850:	697a      	ldr	r2, [r7, #20]
 8009852:	f7ff fd1d 	bl	8009290 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	3b01      	subs	r3, #1
 800985a:	613b      	str	r3, [r7, #16]
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	2b01      	cmp	r3, #1
 8009860:	d8eb      	bhi.n	800983a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009862:	7bfb      	ldrb	r3, [r7, #15]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3718      	adds	r7, #24
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009876:	2300      	movs	r3, #0
 8009878:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987e:	683a      	ldr	r2, [r7, #0]
 8009880:	429a      	cmp	r2, r3
 8009882:	d01b      	beq.n	80098bc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f7ff ffad 	bl	80097e4 <sync_window>
 800988a:	4603      	mov	r3, r0
 800988c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800988e:	7bfb      	ldrb	r3, [r7, #15]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d113      	bne.n	80098bc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	7858      	ldrb	r0, [r3, #1]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800989e:	2301      	movs	r3, #1
 80098a0:	683a      	ldr	r2, [r7, #0]
 80098a2:	f7ff fcd5 	bl	8009250 <disk_read>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d004      	beq.n	80098b6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80098ac:	f04f 33ff 	mov.w	r3, #4294967295
 80098b0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	683a      	ldr	r2, [r7, #0]
 80098ba:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80098bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
	...

080098c8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f7ff ff87 	bl	80097e4 <sync_window>
 80098d6:	4603      	mov	r3, r0
 80098d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80098da:	7bfb      	ldrb	r3, [r7, #15]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d158      	bne.n	8009992 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	2b03      	cmp	r3, #3
 80098e6:	d148      	bne.n	800997a <sync_fs+0xb2>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	791b      	ldrb	r3, [r3, #4]
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d144      	bne.n	800997a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	3330      	adds	r3, #48	; 0x30
 80098f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098f8:	2100      	movs	r1, #0
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7ff fda9 	bl	8009452 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	3330      	adds	r3, #48	; 0x30
 8009904:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009908:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800990c:	4618      	mov	r0, r3
 800990e:	f7ff fd38 	bl	8009382 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	3330      	adds	r3, #48	; 0x30
 8009916:	4921      	ldr	r1, [pc, #132]	; (800999c <sync_fs+0xd4>)
 8009918:	4618      	mov	r0, r3
 800991a:	f7ff fd4d 	bl	80093b8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	3330      	adds	r3, #48	; 0x30
 8009922:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009926:	491e      	ldr	r1, [pc, #120]	; (80099a0 <sync_fs+0xd8>)
 8009928:	4618      	mov	r0, r3
 800992a:	f7ff fd45 	bl	80093b8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	3330      	adds	r3, #48	; 0x30
 8009932:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	691b      	ldr	r3, [r3, #16]
 800993a:	4619      	mov	r1, r3
 800993c:	4610      	mov	r0, r2
 800993e:	f7ff fd3b 	bl	80093b8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	3330      	adds	r3, #48	; 0x30
 8009946:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	4619      	mov	r1, r3
 8009950:	4610      	mov	r0, r2
 8009952:	f7ff fd31 	bl	80093b8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	69db      	ldr	r3, [r3, #28]
 800995a:	1c5a      	adds	r2, r3, #1
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	7858      	ldrb	r0, [r3, #1]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800996e:	2301      	movs	r3, #1
 8009970:	f7ff fc8e 	bl	8009290 <disk_write>
			fs->fsi_flag = 0;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	785b      	ldrb	r3, [r3, #1]
 800997e:	2200      	movs	r2, #0
 8009980:	2100      	movs	r1, #0
 8009982:	4618      	mov	r0, r3
 8009984:	f7ff fca4 	bl	80092d0 <disk_ioctl>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d001      	beq.n	8009992 <sync_fs+0xca>
 800998e:	2301      	movs	r3, #1
 8009990:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009992:	7bfb      	ldrb	r3, [r7, #15]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}
 800999c:	41615252 	.word	0x41615252
 80099a0:	61417272 	.word	0x61417272

080099a4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	3b02      	subs	r3, #2
 80099b2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	695b      	ldr	r3, [r3, #20]
 80099b8:	3b02      	subs	r3, #2
 80099ba:	683a      	ldr	r2, [r7, #0]
 80099bc:	429a      	cmp	r2, r3
 80099be:	d301      	bcc.n	80099c4 <clust2sect+0x20>
 80099c0:	2300      	movs	r3, #0
 80099c2:	e008      	b.n	80099d6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	895b      	ldrh	r3, [r3, #10]
 80099c8:	461a      	mov	r2, r3
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	fb03 f202 	mul.w	r2, r3, r2
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d4:	4413      	add	r3, r2
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	370c      	adds	r7, #12
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr

080099e2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b086      	sub	sp, #24
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
 80099ea:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d904      	bls.n	8009a02 <get_fat+0x20>
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	695b      	ldr	r3, [r3, #20]
 80099fc:	683a      	ldr	r2, [r7, #0]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d302      	bcc.n	8009a08 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009a02:	2301      	movs	r3, #1
 8009a04:	617b      	str	r3, [r7, #20]
 8009a06:	e08f      	b.n	8009b28 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009a08:	f04f 33ff 	mov.w	r3, #4294967295
 8009a0c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	2b03      	cmp	r3, #3
 8009a14:	d062      	beq.n	8009adc <get_fat+0xfa>
 8009a16:	2b03      	cmp	r3, #3
 8009a18:	dc7c      	bgt.n	8009b14 <get_fat+0x132>
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d002      	beq.n	8009a24 <get_fat+0x42>
 8009a1e:	2b02      	cmp	r3, #2
 8009a20:	d042      	beq.n	8009aa8 <get_fat+0xc6>
 8009a22:	e077      	b.n	8009b14 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	60fb      	str	r3, [r7, #12]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	085b      	lsrs	r3, r3, #1
 8009a2c:	68fa      	ldr	r2, [r7, #12]
 8009a2e:	4413      	add	r3, r2
 8009a30:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	6a1a      	ldr	r2, [r3, #32]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	0a5b      	lsrs	r3, r3, #9
 8009a3a:	4413      	add	r3, r2
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	6938      	ldr	r0, [r7, #16]
 8009a40:	f7ff ff14 	bl	800986c <move_window>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d167      	bne.n	8009b1a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	1c5a      	adds	r2, r3, #1
 8009a4e:	60fa      	str	r2, [r7, #12]
 8009a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a54:	693a      	ldr	r2, [r7, #16]
 8009a56:	4413      	add	r3, r2
 8009a58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009a5c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	6a1a      	ldr	r2, [r3, #32]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	0a5b      	lsrs	r3, r3, #9
 8009a66:	4413      	add	r3, r2
 8009a68:	4619      	mov	r1, r3
 8009a6a:	6938      	ldr	r0, [r7, #16]
 8009a6c:	f7ff fefe 	bl	800986c <move_window>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d153      	bne.n	8009b1e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a7c:	693a      	ldr	r2, [r7, #16]
 8009a7e:	4413      	add	r3, r2
 8009a80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009a84:	021b      	lsls	r3, r3, #8
 8009a86:	461a      	mov	r2, r3
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	f003 0301 	and.w	r3, r3, #1
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d002      	beq.n	8009a9e <get_fat+0xbc>
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	091b      	lsrs	r3, r3, #4
 8009a9c:	e002      	b.n	8009aa4 <get_fat+0xc2>
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009aa4:	617b      	str	r3, [r7, #20]
			break;
 8009aa6:	e03f      	b.n	8009b28 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	6a1a      	ldr	r2, [r3, #32]
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	0a1b      	lsrs	r3, r3, #8
 8009ab0:	4413      	add	r3, r2
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	6938      	ldr	r0, [r7, #16]
 8009ab6:	f7ff fed9 	bl	800986c <move_window>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d130      	bne.n	8009b22 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	005b      	lsls	r3, r3, #1
 8009aca:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009ace:	4413      	add	r3, r2
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7ff fc1b 	bl	800930c <ld_word>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	617b      	str	r3, [r7, #20]
			break;
 8009ada:	e025      	b.n	8009b28 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	6a1a      	ldr	r2, [r3, #32]
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	09db      	lsrs	r3, r3, #7
 8009ae4:	4413      	add	r3, r2
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	6938      	ldr	r0, [r7, #16]
 8009aea:	f7ff febf 	bl	800986c <move_window>
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d118      	bne.n	8009b26 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009b02:	4413      	add	r3, r2
 8009b04:	4618      	mov	r0, r3
 8009b06:	f7ff fc19 	bl	800933c <ld_dword>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009b10:	617b      	str	r3, [r7, #20]
			break;
 8009b12:	e009      	b.n	8009b28 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009b14:	2301      	movs	r3, #1
 8009b16:	617b      	str	r3, [r7, #20]
 8009b18:	e006      	b.n	8009b28 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009b1a:	bf00      	nop
 8009b1c:	e004      	b.n	8009b28 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009b1e:	bf00      	nop
 8009b20:	e002      	b.n	8009b28 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009b22:	bf00      	nop
 8009b24:	e000      	b.n	8009b28 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009b26:	bf00      	nop
		}
	}

	return val;
 8009b28:	697b      	ldr	r3, [r7, #20]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3718      	adds	r7, #24
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}

08009b32 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009b32:	b590      	push	{r4, r7, lr}
 8009b34:	b089      	sub	sp, #36	; 0x24
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	60f8      	str	r0, [r7, #12]
 8009b3a:	60b9      	str	r1, [r7, #8]
 8009b3c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009b3e:	2302      	movs	r3, #2
 8009b40:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	f240 80d2 	bls.w	8009cee <put_fat+0x1bc>
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	695b      	ldr	r3, [r3, #20]
 8009b4e:	68ba      	ldr	r2, [r7, #8]
 8009b50:	429a      	cmp	r2, r3
 8009b52:	f080 80cc 	bcs.w	8009cee <put_fat+0x1bc>
		switch (fs->fs_type) {
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	2b03      	cmp	r3, #3
 8009b5c:	f000 8096 	beq.w	8009c8c <put_fat+0x15a>
 8009b60:	2b03      	cmp	r3, #3
 8009b62:	f300 80cd 	bgt.w	8009d00 <put_fat+0x1ce>
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d002      	beq.n	8009b70 <put_fat+0x3e>
 8009b6a:	2b02      	cmp	r3, #2
 8009b6c:	d06e      	beq.n	8009c4c <put_fat+0x11a>
 8009b6e:	e0c7      	b.n	8009d00 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	61bb      	str	r3, [r7, #24]
 8009b74:	69bb      	ldr	r3, [r7, #24]
 8009b76:	085b      	lsrs	r3, r3, #1
 8009b78:	69ba      	ldr	r2, [r7, #24]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6a1a      	ldr	r2, [r3, #32]
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	0a5b      	lsrs	r3, r3, #9
 8009b86:	4413      	add	r3, r2
 8009b88:	4619      	mov	r1, r3
 8009b8a:	68f8      	ldr	r0, [r7, #12]
 8009b8c:	f7ff fe6e 	bl	800986c <move_window>
 8009b90:	4603      	mov	r3, r0
 8009b92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009b94:	7ffb      	ldrb	r3, [r7, #31]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	f040 80ab 	bne.w	8009cf2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	1c59      	adds	r1, r3, #1
 8009ba6:	61b9      	str	r1, [r7, #24]
 8009ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bac:	4413      	add	r3, r2
 8009bae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	f003 0301 	and.w	r3, r3, #1
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d00d      	beq.n	8009bd6 <put_fat+0xa4>
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	b25b      	sxtb	r3, r3
 8009bc0:	f003 030f 	and.w	r3, r3, #15
 8009bc4:	b25a      	sxtb	r2, r3
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	011b      	lsls	r3, r3, #4
 8009bcc:	b25b      	sxtb	r3, r3
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	b25b      	sxtb	r3, r3
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	e001      	b.n	8009bda <put_fat+0xa8>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	697a      	ldr	r2, [r7, #20]
 8009bdc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2201      	movs	r2, #1
 8009be2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	6a1a      	ldr	r2, [r3, #32]
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	0a5b      	lsrs	r3, r3, #9
 8009bec:	4413      	add	r3, r2
 8009bee:	4619      	mov	r1, r3
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f7ff fe3b 	bl	800986c <move_window>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009bfa:	7ffb      	ldrb	r3, [r7, #31]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d17a      	bne.n	8009cf6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c0c:	4413      	add	r3, r2
 8009c0e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	f003 0301 	and.w	r3, r3, #1
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d003      	beq.n	8009c22 <put_fat+0xf0>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	091b      	lsrs	r3, r3, #4
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	e00e      	b.n	8009c40 <put_fat+0x10e>
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	b25b      	sxtb	r3, r3
 8009c28:	f023 030f 	bic.w	r3, r3, #15
 8009c2c:	b25a      	sxtb	r2, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	0a1b      	lsrs	r3, r3, #8
 8009c32:	b25b      	sxtb	r3, r3
 8009c34:	f003 030f 	and.w	r3, r3, #15
 8009c38:	b25b      	sxtb	r3, r3
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	b25b      	sxtb	r3, r3
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	697a      	ldr	r2, [r7, #20]
 8009c42:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2201      	movs	r2, #1
 8009c48:	70da      	strb	r2, [r3, #3]
			break;
 8009c4a:	e059      	b.n	8009d00 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	6a1a      	ldr	r2, [r3, #32]
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	0a1b      	lsrs	r3, r3, #8
 8009c54:	4413      	add	r3, r2
 8009c56:	4619      	mov	r1, r3
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	f7ff fe07 	bl	800986c <move_window>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009c62:	7ffb      	ldrb	r3, [r7, #31]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d148      	bne.n	8009cfa <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	005b      	lsls	r3, r3, #1
 8009c72:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009c76:	4413      	add	r3, r2
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	b292      	uxth	r2, r2
 8009c7c:	4611      	mov	r1, r2
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7ff fb7f 	bl	8009382 <st_word>
			fs->wflag = 1;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2201      	movs	r2, #1
 8009c88:	70da      	strb	r2, [r3, #3]
			break;
 8009c8a:	e039      	b.n	8009d00 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6a1a      	ldr	r2, [r3, #32]
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	09db      	lsrs	r3, r3, #7
 8009c94:	4413      	add	r3, r2
 8009c96:	4619      	mov	r1, r3
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	f7ff fde7 	bl	800986c <move_window>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009ca2:	7ffb      	ldrb	r3, [r7, #31]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d12a      	bne.n	8009cfe <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009cbc:	4413      	add	r3, r2
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7ff fb3c 	bl	800933c <ld_dword>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009cca:	4323      	orrs	r3, r4
 8009ccc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009cdc:	4413      	add	r3, r2
 8009cde:	6879      	ldr	r1, [r7, #4]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7ff fb69 	bl	80093b8 <st_dword>
			fs->wflag = 1;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2201      	movs	r2, #1
 8009cea:	70da      	strb	r2, [r3, #3]
			break;
 8009cec:	e008      	b.n	8009d00 <put_fat+0x1ce>
		}
	}
 8009cee:	bf00      	nop
 8009cf0:	e006      	b.n	8009d00 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009cf2:	bf00      	nop
 8009cf4:	e004      	b.n	8009d00 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009cf6:	bf00      	nop
 8009cf8:	e002      	b.n	8009d00 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009cfa:	bf00      	nop
 8009cfc:	e000      	b.n	8009d00 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009cfe:	bf00      	nop
	return res;
 8009d00:	7ffb      	ldrb	r3, [r7, #31]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3724      	adds	r7, #36	; 0x24
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd90      	pop	{r4, r7, pc}

08009d0a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b088      	sub	sp, #32
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	60f8      	str	r0, [r7, #12]
 8009d12:	60b9      	str	r1, [r7, #8]
 8009d14:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009d16:	2300      	movs	r3, #0
 8009d18:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d904      	bls.n	8009d30 <remove_chain+0x26>
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	695b      	ldr	r3, [r3, #20]
 8009d2a:	68ba      	ldr	r2, [r7, #8]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d301      	bcc.n	8009d34 <remove_chain+0x2a>
 8009d30:	2302      	movs	r3, #2
 8009d32:	e04b      	b.n	8009dcc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00c      	beq.n	8009d54 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d3e:	6879      	ldr	r1, [r7, #4]
 8009d40:	69b8      	ldr	r0, [r7, #24]
 8009d42:	f7ff fef6 	bl	8009b32 <put_fat>
 8009d46:	4603      	mov	r3, r0
 8009d48:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009d4a:	7ffb      	ldrb	r3, [r7, #31]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d001      	beq.n	8009d54 <remove_chain+0x4a>
 8009d50:	7ffb      	ldrb	r3, [r7, #31]
 8009d52:	e03b      	b.n	8009dcc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009d54:	68b9      	ldr	r1, [r7, #8]
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f7ff fe43 	bl	80099e2 <get_fat>
 8009d5c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d031      	beq.n	8009dc8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	2b01      	cmp	r3, #1
 8009d68:	d101      	bne.n	8009d6e <remove_chain+0x64>
 8009d6a:	2302      	movs	r3, #2
 8009d6c:	e02e      	b.n	8009dcc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d74:	d101      	bne.n	8009d7a <remove_chain+0x70>
 8009d76:	2301      	movs	r3, #1
 8009d78:	e028      	b.n	8009dcc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	68b9      	ldr	r1, [r7, #8]
 8009d7e:	69b8      	ldr	r0, [r7, #24]
 8009d80:	f7ff fed7 	bl	8009b32 <put_fat>
 8009d84:	4603      	mov	r3, r0
 8009d86:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009d88:	7ffb      	ldrb	r3, [r7, #31]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d001      	beq.n	8009d92 <remove_chain+0x88>
 8009d8e:	7ffb      	ldrb	r3, [r7, #31]
 8009d90:	e01c      	b.n	8009dcc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	691a      	ldr	r2, [r3, #16]
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	695b      	ldr	r3, [r3, #20]
 8009d9a:	3b02      	subs	r3, #2
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d20b      	bcs.n	8009db8 <remove_chain+0xae>
			fs->free_clst++;
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	691b      	ldr	r3, [r3, #16]
 8009da4:	1c5a      	adds	r2, r3, #1
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	791b      	ldrb	r3, [r3, #4]
 8009dae:	f043 0301 	orr.w	r3, r3, #1
 8009db2:	b2da      	uxtb	r2, r3
 8009db4:	69bb      	ldr	r3, [r7, #24]
 8009db6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009dbc:	69bb      	ldr	r3, [r7, #24]
 8009dbe:	695b      	ldr	r3, [r3, #20]
 8009dc0:	68ba      	ldr	r2, [r7, #8]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d3c6      	bcc.n	8009d54 <remove_chain+0x4a>
 8009dc6:	e000      	b.n	8009dca <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009dc8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3720      	adds	r7, #32
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b088      	sub	sp, #32
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d10d      	bne.n	8009e06 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009df0:	69bb      	ldr	r3, [r7, #24]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d004      	beq.n	8009e00 <create_chain+0x2c>
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	695b      	ldr	r3, [r3, #20]
 8009dfa:	69ba      	ldr	r2, [r7, #24]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d31b      	bcc.n	8009e38 <create_chain+0x64>
 8009e00:	2301      	movs	r3, #1
 8009e02:	61bb      	str	r3, [r7, #24]
 8009e04:	e018      	b.n	8009e38 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009e06:	6839      	ldr	r1, [r7, #0]
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f7ff fdea 	bl	80099e2 <get_fat>
 8009e0e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d801      	bhi.n	8009e1a <create_chain+0x46>
 8009e16:	2301      	movs	r3, #1
 8009e18:	e070      	b.n	8009efc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e20:	d101      	bne.n	8009e26 <create_chain+0x52>
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	e06a      	b.n	8009efc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	695b      	ldr	r3, [r3, #20]
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d201      	bcs.n	8009e34 <create_chain+0x60>
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	e063      	b.n	8009efc <create_chain+0x128>
		scl = clst;
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	695b      	ldr	r3, [r3, #20]
 8009e46:	69fa      	ldr	r2, [r7, #28]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d307      	bcc.n	8009e5c <create_chain+0x88>
				ncl = 2;
 8009e4c:	2302      	movs	r3, #2
 8009e4e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009e50:	69fa      	ldr	r2, [r7, #28]
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d901      	bls.n	8009e5c <create_chain+0x88>
 8009e58:	2300      	movs	r3, #0
 8009e5a:	e04f      	b.n	8009efc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009e5c:	69f9      	ldr	r1, [r7, #28]
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f7ff fdbf 	bl	80099e2 <get_fat>
 8009e64:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d00e      	beq.n	8009e8a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d003      	beq.n	8009e7a <create_chain+0xa6>
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e78:	d101      	bne.n	8009e7e <create_chain+0xaa>
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	e03e      	b.n	8009efc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009e7e:	69fa      	ldr	r2, [r7, #28]
 8009e80:	69bb      	ldr	r3, [r7, #24]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d1da      	bne.n	8009e3c <create_chain+0x68>
 8009e86:	2300      	movs	r3, #0
 8009e88:	e038      	b.n	8009efc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009e8a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e90:	69f9      	ldr	r1, [r7, #28]
 8009e92:	6938      	ldr	r0, [r7, #16]
 8009e94:	f7ff fe4d 	bl	8009b32 <put_fat>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009e9c:	7dfb      	ldrb	r3, [r7, #23]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d109      	bne.n	8009eb6 <create_chain+0xe2>
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d006      	beq.n	8009eb6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009ea8:	69fa      	ldr	r2, [r7, #28]
 8009eaa:	6839      	ldr	r1, [r7, #0]
 8009eac:	6938      	ldr	r0, [r7, #16]
 8009eae:	f7ff fe40 	bl	8009b32 <put_fat>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009eb6:	7dfb      	ldrb	r3, [r7, #23]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d116      	bne.n	8009eea <create_chain+0x116>
		fs->last_clst = ncl;
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	69fa      	ldr	r2, [r7, #28]
 8009ec0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	691a      	ldr	r2, [r3, #16]
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	695b      	ldr	r3, [r3, #20]
 8009eca:	3b02      	subs	r3, #2
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d804      	bhi.n	8009eda <create_chain+0x106>
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	691b      	ldr	r3, [r3, #16]
 8009ed4:	1e5a      	subs	r2, r3, #1
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	791b      	ldrb	r3, [r3, #4]
 8009ede:	f043 0301 	orr.w	r3, r3, #1
 8009ee2:	b2da      	uxtb	r2, r3
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	711a      	strb	r2, [r3, #4]
 8009ee8:	e007      	b.n	8009efa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009eea:	7dfb      	ldrb	r3, [r7, #23]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d102      	bne.n	8009ef6 <create_chain+0x122>
 8009ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ef4:	e000      	b.n	8009ef8 <create_chain+0x124>
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009efa:	69fb      	ldr	r3, [r7, #28]
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3720      	adds	r7, #32
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b087      	sub	sp, #28
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f18:	3304      	adds	r3, #4
 8009f1a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	0a5b      	lsrs	r3, r3, #9
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	8952      	ldrh	r2, [r2, #10]
 8009f24:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f28:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	1d1a      	adds	r2, r3, #4
 8009f2e:	613a      	str	r2, [r7, #16]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d101      	bne.n	8009f3e <clmt_clust+0x3a>
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	e010      	b.n	8009f60 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009f3e:	697a      	ldr	r2, [r7, #20]
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d307      	bcc.n	8009f56 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009f46:	697a      	ldr	r2, [r7, #20]
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	1ad3      	subs	r3, r2, r3
 8009f4c:	617b      	str	r3, [r7, #20]
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	3304      	adds	r3, #4
 8009f52:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009f54:	e7e9      	b.n	8009f2a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009f56:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	4413      	add	r3, r2
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	371c      	adds	r7, #28
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr

08009f6c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b086      	sub	sp, #24
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f82:	d204      	bcs.n	8009f8e <dir_sdi+0x22>
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	f003 031f 	and.w	r3, r3, #31
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d001      	beq.n	8009f92 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009f8e:	2302      	movs	r3, #2
 8009f90:	e063      	b.n	800a05a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	683a      	ldr	r2, [r7, #0]
 8009f96:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d106      	bne.n	8009fb2 <dir_sdi+0x46>
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	2b02      	cmp	r3, #2
 8009faa:	d902      	bls.n	8009fb2 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d10c      	bne.n	8009fd2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	095b      	lsrs	r3, r3, #5
 8009fbc:	693a      	ldr	r2, [r7, #16]
 8009fbe:	8912      	ldrh	r2, [r2, #8]
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d301      	bcc.n	8009fc8 <dir_sdi+0x5c>
 8009fc4:	2302      	movs	r3, #2
 8009fc6:	e048      	b.n	800a05a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	61da      	str	r2, [r3, #28]
 8009fd0:	e029      	b.n	800a026 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	895b      	ldrh	r3, [r3, #10]
 8009fd6:	025b      	lsls	r3, r3, #9
 8009fd8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009fda:	e019      	b.n	800a010 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6979      	ldr	r1, [r7, #20]
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7ff fcfe 	bl	80099e2 <get_fat>
 8009fe6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fee:	d101      	bne.n	8009ff4 <dir_sdi+0x88>
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e032      	b.n	800a05a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d904      	bls.n	800a004 <dir_sdi+0x98>
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	695b      	ldr	r3, [r3, #20]
 8009ffe:	697a      	ldr	r2, [r7, #20]
 800a000:	429a      	cmp	r2, r3
 800a002:	d301      	bcc.n	800a008 <dir_sdi+0x9c>
 800a004:	2302      	movs	r3, #2
 800a006:	e028      	b.n	800a05a <dir_sdi+0xee>
			ofs -= csz;
 800a008:	683a      	ldr	r2, [r7, #0]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	1ad3      	subs	r3, r2, r3
 800a00e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a010:	683a      	ldr	r2, [r7, #0]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	429a      	cmp	r2, r3
 800a016:	d2e1      	bcs.n	8009fdc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a018:	6979      	ldr	r1, [r7, #20]
 800a01a:	6938      	ldr	r0, [r7, #16]
 800a01c:	f7ff fcc2 	bl	80099a4 <clust2sect>
 800a020:	4602      	mov	r2, r0
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	697a      	ldr	r2, [r7, #20]
 800a02a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	69db      	ldr	r3, [r3, #28]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d101      	bne.n	800a038 <dir_sdi+0xcc>
 800a034:	2302      	movs	r3, #2
 800a036:	e010      	b.n	800a05a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	69da      	ldr	r2, [r3, #28]
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	0a5b      	lsrs	r3, r3, #9
 800a040:	441a      	add	r2, r3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a052:	441a      	add	r2, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3718      	adds	r7, #24
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b086      	sub	sp, #24
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
 800a06a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	695b      	ldr	r3, [r3, #20]
 800a076:	3320      	adds	r3, #32
 800a078:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	69db      	ldr	r3, [r3, #28]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d003      	beq.n	800a08a <dir_next+0x28>
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a088:	d301      	bcc.n	800a08e <dir_next+0x2c>
 800a08a:	2304      	movs	r3, #4
 800a08c:	e0aa      	b.n	800a1e4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a094:	2b00      	cmp	r3, #0
 800a096:	f040 8098 	bne.w	800a1ca <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	69db      	ldr	r3, [r3, #28]
 800a09e:	1c5a      	adds	r2, r3, #1
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	699b      	ldr	r3, [r3, #24]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d10b      	bne.n	800a0c4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	095b      	lsrs	r3, r3, #5
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	8912      	ldrh	r2, [r2, #8]
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	f0c0 8088 	bcc.w	800a1ca <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	61da      	str	r2, [r3, #28]
 800a0c0:	2304      	movs	r3, #4
 800a0c2:	e08f      	b.n	800a1e4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	0a5b      	lsrs	r3, r3, #9
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	8952      	ldrh	r2, [r2, #10]
 800a0cc:	3a01      	subs	r2, #1
 800a0ce:	4013      	ands	r3, r2
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d17a      	bne.n	800a1ca <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	699b      	ldr	r3, [r3, #24]
 800a0da:	4619      	mov	r1, r3
 800a0dc:	4610      	mov	r0, r2
 800a0de:	f7ff fc80 	bl	80099e2 <get_fat>
 800a0e2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d801      	bhi.n	800a0ee <dir_next+0x8c>
 800a0ea:	2302      	movs	r3, #2
 800a0ec:	e07a      	b.n	800a1e4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0f4:	d101      	bne.n	800a0fa <dir_next+0x98>
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e074      	b.n	800a1e4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	695b      	ldr	r3, [r3, #20]
 800a0fe:	697a      	ldr	r2, [r7, #20]
 800a100:	429a      	cmp	r2, r3
 800a102:	d358      	bcc.n	800a1b6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d104      	bne.n	800a114 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	61da      	str	r2, [r3, #28]
 800a110:	2304      	movs	r3, #4
 800a112:	e067      	b.n	800a1e4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	699b      	ldr	r3, [r3, #24]
 800a11a:	4619      	mov	r1, r3
 800a11c:	4610      	mov	r0, r2
 800a11e:	f7ff fe59 	bl	8009dd4 <create_chain>
 800a122:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d101      	bne.n	800a12e <dir_next+0xcc>
 800a12a:	2307      	movs	r3, #7
 800a12c:	e05a      	b.n	800a1e4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	2b01      	cmp	r3, #1
 800a132:	d101      	bne.n	800a138 <dir_next+0xd6>
 800a134:	2302      	movs	r3, #2
 800a136:	e055      	b.n	800a1e4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a13e:	d101      	bne.n	800a144 <dir_next+0xe2>
 800a140:	2301      	movs	r3, #1
 800a142:	e04f      	b.n	800a1e4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f7ff fb4d 	bl	80097e4 <sync_window>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d001      	beq.n	800a154 <dir_next+0xf2>
 800a150:	2301      	movs	r3, #1
 800a152:	e047      	b.n	800a1e4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	3330      	adds	r3, #48	; 0x30
 800a158:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a15c:	2100      	movs	r1, #0
 800a15e:	4618      	mov	r0, r3
 800a160:	f7ff f977 	bl	8009452 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a164:	2300      	movs	r3, #0
 800a166:	613b      	str	r3, [r7, #16]
 800a168:	6979      	ldr	r1, [r7, #20]
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f7ff fc1a 	bl	80099a4 <clust2sect>
 800a170:	4602      	mov	r2, r0
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	62da      	str	r2, [r3, #44]	; 0x2c
 800a176:	e012      	b.n	800a19e <dir_next+0x13c>
						fs->wflag = 1;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2201      	movs	r2, #1
 800a17c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a17e:	68f8      	ldr	r0, [r7, #12]
 800a180:	f7ff fb30 	bl	80097e4 <sync_window>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d001      	beq.n	800a18e <dir_next+0x12c>
 800a18a:	2301      	movs	r3, #1
 800a18c:	e02a      	b.n	800a1e4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	3301      	adds	r3, #1
 800a192:	613b      	str	r3, [r7, #16]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a198:	1c5a      	adds	r2, r3, #1
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	62da      	str	r2, [r3, #44]	; 0x2c
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	895b      	ldrh	r3, [r3, #10]
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d3e6      	bcc.n	800a178 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	1ad2      	subs	r2, r2, r3
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	697a      	ldr	r2, [r7, #20]
 800a1ba:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a1bc:	6979      	ldr	r1, [r7, #20]
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	f7ff fbf0 	bl	80099a4 <clust2sect>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	68ba      	ldr	r2, [r7, #8]
 800a1ce:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1dc:	441a      	add	r2, r3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a1e2:	2300      	movs	r3, #0
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3718      	adds	r7, #24
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b086      	sub	sp, #24
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f7ff feb4 	bl	8009f6c <dir_sdi>
 800a204:	4603      	mov	r3, r0
 800a206:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a208:	7dfb      	ldrb	r3, [r7, #23]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d12b      	bne.n	800a266 <dir_alloc+0x7a>
		n = 0;
 800a20e:	2300      	movs	r3, #0
 800a210:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	69db      	ldr	r3, [r3, #28]
 800a216:	4619      	mov	r1, r3
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f7ff fb27 	bl	800986c <move_window>
 800a21e:	4603      	mov	r3, r0
 800a220:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a222:	7dfb      	ldrb	r3, [r7, #23]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d11d      	bne.n	800a264 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6a1b      	ldr	r3, [r3, #32]
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	2be5      	cmp	r3, #229	; 0xe5
 800a230:	d004      	beq.n	800a23c <dir_alloc+0x50>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6a1b      	ldr	r3, [r3, #32]
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d107      	bne.n	800a24c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	3301      	adds	r3, #1
 800a240:	613b      	str	r3, [r7, #16]
 800a242:	693a      	ldr	r2, [r7, #16]
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	429a      	cmp	r2, r3
 800a248:	d102      	bne.n	800a250 <dir_alloc+0x64>
 800a24a:	e00c      	b.n	800a266 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a24c:	2300      	movs	r3, #0
 800a24e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a250:	2101      	movs	r1, #1
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f7ff ff05 	bl	800a062 <dir_next>
 800a258:	4603      	mov	r3, r0
 800a25a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a25c:	7dfb      	ldrb	r3, [r7, #23]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d0d7      	beq.n	800a212 <dir_alloc+0x26>
 800a262:	e000      	b.n	800a266 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a264:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a266:	7dfb      	ldrb	r3, [r7, #23]
 800a268:	2b04      	cmp	r3, #4
 800a26a:	d101      	bne.n	800a270 <dir_alloc+0x84>
 800a26c:	2307      	movs	r3, #7
 800a26e:	75fb      	strb	r3, [r7, #23]
	return res;
 800a270:	7dfb      	ldrb	r3, [r7, #23]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3718      	adds	r7, #24
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a27a:	b580      	push	{r7, lr}
 800a27c:	b084      	sub	sp, #16
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
 800a282:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	331a      	adds	r3, #26
 800a288:	4618      	mov	r0, r3
 800a28a:	f7ff f83f 	bl	800930c <ld_word>
 800a28e:	4603      	mov	r3, r0
 800a290:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	2b03      	cmp	r3, #3
 800a298:	d109      	bne.n	800a2ae <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	3314      	adds	r3, #20
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f7ff f834 	bl	800930c <ld_word>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	041b      	lsls	r3, r3, #16
 800a2a8:	68fa      	ldr	r2, [r7, #12]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3710      	adds	r7, #16
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	331a      	adds	r3, #26
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	b292      	uxth	r2, r2
 800a2cc:	4611      	mov	r1, r2
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7ff f857 	bl	8009382 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	2b03      	cmp	r3, #3
 800a2da:	d109      	bne.n	800a2f0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	f103 0214 	add.w	r2, r3, #20
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	0c1b      	lsrs	r3, r3, #16
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	4610      	mov	r0, r2
 800a2ec:	f7ff f849 	bl	8009382 <st_word>
	}
}
 800a2f0:	bf00      	nop
 800a2f2:	3710      	adds	r7, #16
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b086      	sub	sp, #24
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a306:	2100      	movs	r1, #0
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f7ff fe2f 	bl	8009f6c <dir_sdi>
 800a30e:	4603      	mov	r3, r0
 800a310:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a312:	7dfb      	ldrb	r3, [r7, #23]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d001      	beq.n	800a31c <dir_find+0x24>
 800a318:	7dfb      	ldrb	r3, [r7, #23]
 800a31a:	e03e      	b.n	800a39a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	69db      	ldr	r3, [r3, #28]
 800a320:	4619      	mov	r1, r3
 800a322:	6938      	ldr	r0, [r7, #16]
 800a324:	f7ff faa2 	bl	800986c <move_window>
 800a328:	4603      	mov	r3, r0
 800a32a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a32c:	7dfb      	ldrb	r3, [r7, #23]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d12f      	bne.n	800a392 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6a1b      	ldr	r3, [r3, #32]
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a33a:	7bfb      	ldrb	r3, [r7, #15]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d102      	bne.n	800a346 <dir_find+0x4e>
 800a340:	2304      	movs	r3, #4
 800a342:	75fb      	strb	r3, [r7, #23]
 800a344:	e028      	b.n	800a398 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6a1b      	ldr	r3, [r3, #32]
 800a34a:	330b      	adds	r3, #11
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a352:	b2da      	uxtb	r2, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6a1b      	ldr	r3, [r3, #32]
 800a35c:	330b      	adds	r3, #11
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	f003 0308 	and.w	r3, r3, #8
 800a364:	2b00      	cmp	r3, #0
 800a366:	d10a      	bne.n	800a37e <dir_find+0x86>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6a18      	ldr	r0, [r3, #32]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	3324      	adds	r3, #36	; 0x24
 800a370:	220b      	movs	r2, #11
 800a372:	4619      	mov	r1, r3
 800a374:	f7ff f888 	bl	8009488 <mem_cmp>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00b      	beq.n	800a396 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a37e:	2100      	movs	r1, #0
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f7ff fe6e 	bl	800a062 <dir_next>
 800a386:	4603      	mov	r3, r0
 800a388:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a38a:	7dfb      	ldrb	r3, [r7, #23]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d0c5      	beq.n	800a31c <dir_find+0x24>
 800a390:	e002      	b.n	800a398 <dir_find+0xa0>
		if (res != FR_OK) break;
 800a392:	bf00      	nop
 800a394:	e000      	b.n	800a398 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a396:	bf00      	nop

	return res;
 800a398:	7dfb      	ldrb	r3, [r7, #23]
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3718      	adds	r7, #24
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b084      	sub	sp, #16
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a3b0:	2101      	movs	r1, #1
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f7ff ff1a 	bl	800a1ec <dir_alloc>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a3bc:	7bfb      	ldrb	r3, [r7, #15]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d11c      	bne.n	800a3fc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	69db      	ldr	r3, [r3, #28]
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	68b8      	ldr	r0, [r7, #8]
 800a3ca:	f7ff fa4f 	bl	800986c <move_window>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a3d2:	7bfb      	ldrb	r3, [r7, #15]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d111      	bne.n	800a3fc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a1b      	ldr	r3, [r3, #32]
 800a3dc:	2220      	movs	r2, #32
 800a3de:	2100      	movs	r1, #0
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7ff f836 	bl	8009452 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a18      	ldr	r0, [r3, #32]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	3324      	adds	r3, #36	; 0x24
 800a3ee:	220b      	movs	r2, #11
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	f7ff f80d 	bl	8009410 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a3fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3710      	adds	r7, #16
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
	...

0800a408 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b088      	sub	sp, #32
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	60fb      	str	r3, [r7, #12]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	3324      	adds	r3, #36	; 0x24
 800a41c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a41e:	220b      	movs	r2, #11
 800a420:	2120      	movs	r1, #32
 800a422:	68b8      	ldr	r0, [r7, #8]
 800a424:	f7ff f815 	bl	8009452 <mem_set>
	si = i = 0; ni = 8;
 800a428:	2300      	movs	r3, #0
 800a42a:	613b      	str	r3, [r7, #16]
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	61fb      	str	r3, [r7, #28]
 800a430:	2308      	movs	r3, #8
 800a432:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a434:	69fb      	ldr	r3, [r7, #28]
 800a436:	1c5a      	adds	r2, r3, #1
 800a438:	61fa      	str	r2, [r7, #28]
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	4413      	add	r3, r2
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a442:	7efb      	ldrb	r3, [r7, #27]
 800a444:	2b20      	cmp	r3, #32
 800a446:	d94e      	bls.n	800a4e6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a448:	7efb      	ldrb	r3, [r7, #27]
 800a44a:	2b2f      	cmp	r3, #47	; 0x2f
 800a44c:	d006      	beq.n	800a45c <create_name+0x54>
 800a44e:	7efb      	ldrb	r3, [r7, #27]
 800a450:	2b5c      	cmp	r3, #92	; 0x5c
 800a452:	d110      	bne.n	800a476 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a454:	e002      	b.n	800a45c <create_name+0x54>
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	3301      	adds	r3, #1
 800a45a:	61fb      	str	r3, [r7, #28]
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	69fb      	ldr	r3, [r7, #28]
 800a460:	4413      	add	r3, r2
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	2b2f      	cmp	r3, #47	; 0x2f
 800a466:	d0f6      	beq.n	800a456 <create_name+0x4e>
 800a468:	68fa      	ldr	r2, [r7, #12]
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	4413      	add	r3, r2
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	2b5c      	cmp	r3, #92	; 0x5c
 800a472:	d0f0      	beq.n	800a456 <create_name+0x4e>
			break;
 800a474:	e038      	b.n	800a4e8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a476:	7efb      	ldrb	r3, [r7, #27]
 800a478:	2b2e      	cmp	r3, #46	; 0x2e
 800a47a:	d003      	beq.n	800a484 <create_name+0x7c>
 800a47c:	693a      	ldr	r2, [r7, #16]
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	429a      	cmp	r2, r3
 800a482:	d30c      	bcc.n	800a49e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	2b0b      	cmp	r3, #11
 800a488:	d002      	beq.n	800a490 <create_name+0x88>
 800a48a:	7efb      	ldrb	r3, [r7, #27]
 800a48c:	2b2e      	cmp	r3, #46	; 0x2e
 800a48e:	d001      	beq.n	800a494 <create_name+0x8c>
 800a490:	2306      	movs	r3, #6
 800a492:	e044      	b.n	800a51e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a494:	2308      	movs	r3, #8
 800a496:	613b      	str	r3, [r7, #16]
 800a498:	230b      	movs	r3, #11
 800a49a:	617b      	str	r3, [r7, #20]
			continue;
 800a49c:	e022      	b.n	800a4e4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a49e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	da04      	bge.n	800a4b0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a4a6:	7efb      	ldrb	r3, [r7, #27]
 800a4a8:	3b80      	subs	r3, #128	; 0x80
 800a4aa:	4a1f      	ldr	r2, [pc, #124]	; (800a528 <create_name+0x120>)
 800a4ac:	5cd3      	ldrb	r3, [r2, r3]
 800a4ae:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a4b0:	7efb      	ldrb	r3, [r7, #27]
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	481d      	ldr	r0, [pc, #116]	; (800a52c <create_name+0x124>)
 800a4b6:	f7ff f80e 	bl	80094d6 <chk_chr>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d001      	beq.n	800a4c4 <create_name+0xbc>
 800a4c0:	2306      	movs	r3, #6
 800a4c2:	e02c      	b.n	800a51e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a4c4:	7efb      	ldrb	r3, [r7, #27]
 800a4c6:	2b60      	cmp	r3, #96	; 0x60
 800a4c8:	d905      	bls.n	800a4d6 <create_name+0xce>
 800a4ca:	7efb      	ldrb	r3, [r7, #27]
 800a4cc:	2b7a      	cmp	r3, #122	; 0x7a
 800a4ce:	d802      	bhi.n	800a4d6 <create_name+0xce>
 800a4d0:	7efb      	ldrb	r3, [r7, #27]
 800a4d2:	3b20      	subs	r3, #32
 800a4d4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	1c5a      	adds	r2, r3, #1
 800a4da:	613a      	str	r2, [r7, #16]
 800a4dc:	68ba      	ldr	r2, [r7, #8]
 800a4de:	4413      	add	r3, r2
 800a4e0:	7efa      	ldrb	r2, [r7, #27]
 800a4e2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a4e4:	e7a6      	b.n	800a434 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a4e6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	69fb      	ldr	r3, [r7, #28]
 800a4ec:	441a      	add	r2, r3
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d101      	bne.n	800a4fc <create_name+0xf4>
 800a4f8:	2306      	movs	r3, #6
 800a4fa:	e010      	b.n	800a51e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	2be5      	cmp	r3, #229	; 0xe5
 800a502:	d102      	bne.n	800a50a <create_name+0x102>
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	2205      	movs	r2, #5
 800a508:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a50a:	7efb      	ldrb	r3, [r7, #27]
 800a50c:	2b20      	cmp	r3, #32
 800a50e:	d801      	bhi.n	800a514 <create_name+0x10c>
 800a510:	2204      	movs	r2, #4
 800a512:	e000      	b.n	800a516 <create_name+0x10e>
 800a514:	2200      	movs	r2, #0
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	330b      	adds	r3, #11
 800a51a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a51c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3720      	adds	r7, #32
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	0800ec84 	.word	0x0800ec84
 800a52c:	0800e9bc 	.word	0x0800e9bc

0800a530 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b086      	sub	sp, #24
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a544:	e002      	b.n	800a54c <follow_path+0x1c>
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	3301      	adds	r3, #1
 800a54a:	603b      	str	r3, [r7, #0]
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	2b2f      	cmp	r3, #47	; 0x2f
 800a552:	d0f8      	beq.n	800a546 <follow_path+0x16>
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	2b5c      	cmp	r3, #92	; 0x5c
 800a55a:	d0f4      	beq.n	800a546 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	2200      	movs	r2, #0
 800a560:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	2b1f      	cmp	r3, #31
 800a568:	d80a      	bhi.n	800a580 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2280      	movs	r2, #128	; 0x80
 800a56e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a572:	2100      	movs	r1, #0
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f7ff fcf9 	bl	8009f6c <dir_sdi>
 800a57a:	4603      	mov	r3, r0
 800a57c:	75fb      	strb	r3, [r7, #23]
 800a57e:	e043      	b.n	800a608 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a580:	463b      	mov	r3, r7
 800a582:	4619      	mov	r1, r3
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f7ff ff3f 	bl	800a408 <create_name>
 800a58a:	4603      	mov	r3, r0
 800a58c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a58e:	7dfb      	ldrb	r3, [r7, #23]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d134      	bne.n	800a5fe <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f7ff feaf 	bl	800a2f8 <dir_find>
 800a59a:	4603      	mov	r3, r0
 800a59c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a5a4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a5a6:	7dfb      	ldrb	r3, [r7, #23]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00a      	beq.n	800a5c2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a5ac:	7dfb      	ldrb	r3, [r7, #23]
 800a5ae:	2b04      	cmp	r3, #4
 800a5b0:	d127      	bne.n	800a602 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a5b2:	7afb      	ldrb	r3, [r7, #11]
 800a5b4:	f003 0304 	and.w	r3, r3, #4
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d122      	bne.n	800a602 <follow_path+0xd2>
 800a5bc:	2305      	movs	r3, #5
 800a5be:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a5c0:	e01f      	b.n	800a602 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a5c2:	7afb      	ldrb	r3, [r7, #11]
 800a5c4:	f003 0304 	and.w	r3, r3, #4
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d11c      	bne.n	800a606 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	799b      	ldrb	r3, [r3, #6]
 800a5d0:	f003 0310 	and.w	r3, r3, #16
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d102      	bne.n	800a5de <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a5d8:	2305      	movs	r3, #5
 800a5da:	75fb      	strb	r3, [r7, #23]
 800a5dc:	e014      	b.n	800a608 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	695b      	ldr	r3, [r3, #20]
 800a5e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ec:	4413      	add	r3, r2
 800a5ee:	4619      	mov	r1, r3
 800a5f0:	68f8      	ldr	r0, [r7, #12]
 800a5f2:	f7ff fe42 	bl	800a27a <ld_clust>
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a5fc:	e7c0      	b.n	800a580 <follow_path+0x50>
			if (res != FR_OK) break;
 800a5fe:	bf00      	nop
 800a600:	e002      	b.n	800a608 <follow_path+0xd8>
				break;
 800a602:	bf00      	nop
 800a604:	e000      	b.n	800a608 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a606:	bf00      	nop
			}
		}
	}

	return res;
 800a608:	7dfb      	ldrb	r3, [r7, #23]
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3718      	adds	r7, #24
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a612:	b480      	push	{r7}
 800a614:	b087      	sub	sp, #28
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a61a:	f04f 33ff 	mov.w	r3, #4294967295
 800a61e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d031      	beq.n	800a68c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	617b      	str	r3, [r7, #20]
 800a62e:	e002      	b.n	800a636 <get_ldnumber+0x24>
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	3301      	adds	r3, #1
 800a634:	617b      	str	r3, [r7, #20]
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	2b20      	cmp	r3, #32
 800a63c:	d903      	bls.n	800a646 <get_ldnumber+0x34>
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	2b3a      	cmp	r3, #58	; 0x3a
 800a644:	d1f4      	bne.n	800a630 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	2b3a      	cmp	r3, #58	; 0x3a
 800a64c:	d11c      	bne.n	800a688 <get_ldnumber+0x76>
			tp = *path;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	1c5a      	adds	r2, r3, #1
 800a658:	60fa      	str	r2, [r7, #12]
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	3b30      	subs	r3, #48	; 0x30
 800a65e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	2b09      	cmp	r3, #9
 800a664:	d80e      	bhi.n	800a684 <get_ldnumber+0x72>
 800a666:	68fa      	ldr	r2, [r7, #12]
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d10a      	bne.n	800a684 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d107      	bne.n	800a684 <get_ldnumber+0x72>
					vol = (int)i;
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	3301      	adds	r3, #1
 800a67c:	617b      	str	r3, [r7, #20]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	697a      	ldr	r2, [r7, #20]
 800a682:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	e002      	b.n	800a68e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a688:	2300      	movs	r3, #0
 800a68a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a68c:	693b      	ldr	r3, [r7, #16]
}
 800a68e:	4618      	mov	r0, r3
 800a690:	371c      	adds	r7, #28
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr
	...

0800a69c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	70da      	strb	r2, [r3, #3]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a6b2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a6b4:	6839      	ldr	r1, [r7, #0]
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f7ff f8d8 	bl	800986c <move_window>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d001      	beq.n	800a6c6 <check_fs+0x2a>
 800a6c2:	2304      	movs	r3, #4
 800a6c4:	e038      	b.n	800a738 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	3330      	adds	r3, #48	; 0x30
 800a6ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7fe fe1c 	bl	800930c <ld_word>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d001      	beq.n	800a6e4 <check_fs+0x48>
 800a6e0:	2303      	movs	r3, #3
 800a6e2:	e029      	b.n	800a738 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a6ea:	2be9      	cmp	r3, #233	; 0xe9
 800a6ec:	d009      	beq.n	800a702 <check_fs+0x66>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a6f4:	2beb      	cmp	r3, #235	; 0xeb
 800a6f6:	d11e      	bne.n	800a736 <check_fs+0x9a>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a6fe:	2b90      	cmp	r3, #144	; 0x90
 800a700:	d119      	bne.n	800a736 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	3330      	adds	r3, #48	; 0x30
 800a706:	3336      	adds	r3, #54	; 0x36
 800a708:	4618      	mov	r0, r3
 800a70a:	f7fe fe17 	bl	800933c <ld_dword>
 800a70e:	4603      	mov	r3, r0
 800a710:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a714:	4a0a      	ldr	r2, [pc, #40]	; (800a740 <check_fs+0xa4>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d101      	bne.n	800a71e <check_fs+0x82>
 800a71a:	2300      	movs	r3, #0
 800a71c:	e00c      	b.n	800a738 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	3330      	adds	r3, #48	; 0x30
 800a722:	3352      	adds	r3, #82	; 0x52
 800a724:	4618      	mov	r0, r3
 800a726:	f7fe fe09 	bl	800933c <ld_dword>
 800a72a:	4603      	mov	r3, r0
 800a72c:	4a05      	ldr	r2, [pc, #20]	; (800a744 <check_fs+0xa8>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d101      	bne.n	800a736 <check_fs+0x9a>
 800a732:	2300      	movs	r3, #0
 800a734:	e000      	b.n	800a738 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a736:	2302      	movs	r3, #2
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3708      	adds	r7, #8
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	00544146 	.word	0x00544146
 800a744:	33544146 	.word	0x33544146

0800a748 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b096      	sub	sp, #88	; 0x58
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	4613      	mov	r3, r2
 800a754:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	2200      	movs	r2, #0
 800a75a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f7ff ff58 	bl	800a612 <get_ldnumber>
 800a762:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a766:	2b00      	cmp	r3, #0
 800a768:	da01      	bge.n	800a76e <find_volume+0x26>
 800a76a:	230b      	movs	r3, #11
 800a76c:	e22d      	b.n	800abca <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a76e:	4aa1      	ldr	r2, [pc, #644]	; (800a9f4 <find_volume+0x2ac>)
 800a770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a776:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d101      	bne.n	800a782 <find_volume+0x3a>
 800a77e:	230c      	movs	r3, #12
 800a780:	e223      	b.n	800abca <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a786:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a788:	79fb      	ldrb	r3, [r7, #7]
 800a78a:	f023 0301 	bic.w	r3, r3, #1
 800a78e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a792:	781b      	ldrb	r3, [r3, #0]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d01a      	beq.n	800a7ce <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79a:	785b      	ldrb	r3, [r3, #1]
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7fe fd17 	bl	80091d0 <disk_status>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a7a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a7ac:	f003 0301 	and.w	r3, r3, #1
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d10c      	bne.n	800a7ce <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a7b4:	79fb      	ldrb	r3, [r7, #7]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d007      	beq.n	800a7ca <find_volume+0x82>
 800a7ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a7be:	f003 0304 	and.w	r3, r3, #4
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d001      	beq.n	800a7ca <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a7c6:	230a      	movs	r3, #10
 800a7c8:	e1ff      	b.n	800abca <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	e1fd      	b.n	800abca <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a7d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7d6:	b2da      	uxtb	r2, r3
 800a7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7da:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7de:	785b      	ldrb	r3, [r3, #1]
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7fe fd0f 	bl	8009204 <disk_initialize>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a7ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a7f0:	f003 0301 	and.w	r3, r3, #1
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d001      	beq.n	800a7fc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a7f8:	2303      	movs	r3, #3
 800a7fa:	e1e6      	b.n	800abca <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a7fc:	79fb      	ldrb	r3, [r7, #7]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d007      	beq.n	800a812 <find_volume+0xca>
 800a802:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a806:	f003 0304 	and.w	r3, r3, #4
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d001      	beq.n	800a812 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a80e:	230a      	movs	r3, #10
 800a810:	e1db      	b.n	800abca <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a812:	2300      	movs	r3, #0
 800a814:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a816:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a818:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a81a:	f7ff ff3f 	bl	800a69c <check_fs>
 800a81e:	4603      	mov	r3, r0
 800a820:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a824:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a828:	2b02      	cmp	r3, #2
 800a82a:	d149      	bne.n	800a8c0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a82c:	2300      	movs	r3, #0
 800a82e:	643b      	str	r3, [r7, #64]	; 0x40
 800a830:	e01e      	b.n	800a870 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a834:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a83a:	011b      	lsls	r3, r3, #4
 800a83c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a840:	4413      	add	r3, r2
 800a842:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a846:	3304      	adds	r3, #4
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d006      	beq.n	800a85c <find_volume+0x114>
 800a84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a850:	3308      	adds	r3, #8
 800a852:	4618      	mov	r0, r3
 800a854:	f7fe fd72 	bl	800933c <ld_dword>
 800a858:	4602      	mov	r2, r0
 800a85a:	e000      	b.n	800a85e <find_volume+0x116>
 800a85c:	2200      	movs	r2, #0
 800a85e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	3358      	adds	r3, #88	; 0x58
 800a864:	443b      	add	r3, r7
 800a866:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a86a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a86c:	3301      	adds	r3, #1
 800a86e:	643b      	str	r3, [r7, #64]	; 0x40
 800a870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a872:	2b03      	cmp	r3, #3
 800a874:	d9dd      	bls.n	800a832 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a876:	2300      	movs	r3, #0
 800a878:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a87a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d002      	beq.n	800a886 <find_volume+0x13e>
 800a880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a882:	3b01      	subs	r3, #1
 800a884:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	3358      	adds	r3, #88	; 0x58
 800a88c:	443b      	add	r3, r7
 800a88e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a892:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a896:	2b00      	cmp	r3, #0
 800a898:	d005      	beq.n	800a8a6 <find_volume+0x15e>
 800a89a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a89c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a89e:	f7ff fefd 	bl	800a69c <check_fs>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	e000      	b.n	800a8a8 <find_volume+0x160>
 800a8a6:	2303      	movs	r3, #3
 800a8a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a8ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d905      	bls.n	800a8c0 <find_volume+0x178>
 800a8b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	643b      	str	r3, [r7, #64]	; 0x40
 800a8ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8bc:	2b03      	cmp	r3, #3
 800a8be:	d9e2      	bls.n	800a886 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a8c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a8c4:	2b04      	cmp	r3, #4
 800a8c6:	d101      	bne.n	800a8cc <find_volume+0x184>
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	e17e      	b.n	800abca <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a8cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d901      	bls.n	800a8d8 <find_volume+0x190>
 800a8d4:	230d      	movs	r3, #13
 800a8d6:	e178      	b.n	800abca <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8da:	3330      	adds	r3, #48	; 0x30
 800a8dc:	330b      	adds	r3, #11
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7fe fd14 	bl	800930c <ld_word>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8ea:	d001      	beq.n	800a8f0 <find_volume+0x1a8>
 800a8ec:	230d      	movs	r3, #13
 800a8ee:	e16c      	b.n	800abca <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f2:	3330      	adds	r3, #48	; 0x30
 800a8f4:	3316      	adds	r3, #22
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7fe fd08 	bl	800930c <ld_word>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a902:	2b00      	cmp	r3, #0
 800a904:	d106      	bne.n	800a914 <find_volume+0x1cc>
 800a906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a908:	3330      	adds	r3, #48	; 0x30
 800a90a:	3324      	adds	r3, #36	; 0x24
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7fe fd15 	bl	800933c <ld_dword>
 800a912:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a916:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a918:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800a920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a922:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a926:	789b      	ldrb	r3, [r3, #2]
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d005      	beq.n	800a938 <find_volume+0x1f0>
 800a92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92e:	789b      	ldrb	r3, [r3, #2]
 800a930:	2b02      	cmp	r3, #2
 800a932:	d001      	beq.n	800a938 <find_volume+0x1f0>
 800a934:	230d      	movs	r3, #13
 800a936:	e148      	b.n	800abca <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93a:	789b      	ldrb	r3, [r3, #2]
 800a93c:	461a      	mov	r2, r3
 800a93e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a940:	fb02 f303 	mul.w	r3, r2, r3
 800a944:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a94c:	b29a      	uxth	r2, r3
 800a94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a950:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a954:	895b      	ldrh	r3, [r3, #10]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d008      	beq.n	800a96c <find_volume+0x224>
 800a95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95c:	895b      	ldrh	r3, [r3, #10]
 800a95e:	461a      	mov	r2, r3
 800a960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a962:	895b      	ldrh	r3, [r3, #10]
 800a964:	3b01      	subs	r3, #1
 800a966:	4013      	ands	r3, r2
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d001      	beq.n	800a970 <find_volume+0x228>
 800a96c:	230d      	movs	r3, #13
 800a96e:	e12c      	b.n	800abca <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a972:	3330      	adds	r3, #48	; 0x30
 800a974:	3311      	adds	r3, #17
 800a976:	4618      	mov	r0, r3
 800a978:	f7fe fcc8 	bl	800930c <ld_word>
 800a97c:	4603      	mov	r3, r0
 800a97e:	461a      	mov	r2, r3
 800a980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a982:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a986:	891b      	ldrh	r3, [r3, #8]
 800a988:	f003 030f 	and.w	r3, r3, #15
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d001      	beq.n	800a996 <find_volume+0x24e>
 800a992:	230d      	movs	r3, #13
 800a994:	e119      	b.n	800abca <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a998:	3330      	adds	r3, #48	; 0x30
 800a99a:	3313      	adds	r3, #19
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7fe fcb5 	bl	800930c <ld_word>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a9a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d106      	bne.n	800a9ba <find_volume+0x272>
 800a9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ae:	3330      	adds	r3, #48	; 0x30
 800a9b0:	3320      	adds	r3, #32
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f7fe fcc2 	bl	800933c <ld_dword>
 800a9b8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9bc:	3330      	adds	r3, #48	; 0x30
 800a9be:	330e      	adds	r3, #14
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7fe fca3 	bl	800930c <ld_word>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a9ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d101      	bne.n	800a9d4 <find_volume+0x28c>
 800a9d0:	230d      	movs	r3, #13
 800a9d2:	e0fa      	b.n	800abca <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a9d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a9d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9d8:	4413      	add	r3, r2
 800a9da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9dc:	8912      	ldrh	r2, [r2, #8]
 800a9de:	0912      	lsrs	r2, r2, #4
 800a9e0:	b292      	uxth	r2, r2
 800a9e2:	4413      	add	r3, r2
 800a9e4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a9e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d204      	bcs.n	800a9f8 <find_volume+0x2b0>
 800a9ee:	230d      	movs	r3, #13
 800a9f0:	e0eb      	b.n	800abca <find_volume+0x482>
 800a9f2:	bf00      	nop
 800a9f4:	20000a9c 	.word	0x20000a9c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a9f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fc:	1ad3      	subs	r3, r2, r3
 800a9fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa00:	8952      	ldrh	r2, [r2, #10]
 800aa02:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa06:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800aa08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d101      	bne.n	800aa12 <find_volume+0x2ca>
 800aa0e:	230d      	movs	r3, #13
 800aa10:	e0db      	b.n	800abca <find_volume+0x482>
		fmt = FS_FAT32;
 800aa12:	2303      	movs	r3, #3
 800aa14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800aa18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d802      	bhi.n	800aa28 <find_volume+0x2e0>
 800aa22:	2302      	movs	r3, #2
 800aa24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800aa28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d802      	bhi.n	800aa38 <find_volume+0x2f0>
 800aa32:	2301      	movs	r3, #1
 800aa34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800aa38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3a:	1c9a      	adds	r2, r3, #2
 800aa3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa3e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800aa40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aa44:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800aa46:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800aa48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa4a:	441a      	add	r2, r3
 800aa4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa4e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800aa50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aa52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa54:	441a      	add	r2, r3
 800aa56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa58:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800aa5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aa5e:	2b03      	cmp	r3, #3
 800aa60:	d11e      	bne.n	800aaa0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800aa62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa64:	3330      	adds	r3, #48	; 0x30
 800aa66:	332a      	adds	r3, #42	; 0x2a
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f7fe fc4f 	bl	800930c <ld_word>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d001      	beq.n	800aa78 <find_volume+0x330>
 800aa74:	230d      	movs	r3, #13
 800aa76:	e0a8      	b.n	800abca <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800aa78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7a:	891b      	ldrh	r3, [r3, #8]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d001      	beq.n	800aa84 <find_volume+0x33c>
 800aa80:	230d      	movs	r3, #13
 800aa82:	e0a2      	b.n	800abca <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800aa84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa86:	3330      	adds	r3, #48	; 0x30
 800aa88:	332c      	adds	r3, #44	; 0x2c
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7fe fc56 	bl	800933c <ld_dword>
 800aa90:	4602      	mov	r2, r0
 800aa92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa94:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800aa96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa98:	695b      	ldr	r3, [r3, #20]
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	647b      	str	r3, [r7, #68]	; 0x44
 800aa9e:	e01f      	b.n	800aae0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800aaa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa2:	891b      	ldrh	r3, [r3, #8]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d101      	bne.n	800aaac <find_volume+0x364>
 800aaa8:	230d      	movs	r3, #13
 800aaaa:	e08e      	b.n	800abca <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800aaac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaae:	6a1a      	ldr	r2, [r3, #32]
 800aab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aab2:	441a      	add	r2, r3
 800aab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800aab8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aabc:	2b02      	cmp	r3, #2
 800aabe:	d103      	bne.n	800aac8 <find_volume+0x380>
 800aac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aac2:	695b      	ldr	r3, [r3, #20]
 800aac4:	005b      	lsls	r3, r3, #1
 800aac6:	e00a      	b.n	800aade <find_volume+0x396>
 800aac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaca:	695a      	ldr	r2, [r3, #20]
 800aacc:	4613      	mov	r3, r2
 800aace:	005b      	lsls	r3, r3, #1
 800aad0:	4413      	add	r3, r2
 800aad2:	085a      	lsrs	r2, r3, #1
 800aad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad6:	695b      	ldr	r3, [r3, #20]
 800aad8:	f003 0301 	and.w	r3, r3, #1
 800aadc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800aade:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800aae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae2:	699a      	ldr	r2, [r3, #24]
 800aae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aae6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800aaea:	0a5b      	lsrs	r3, r3, #9
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d201      	bcs.n	800aaf4 <find_volume+0x3ac>
 800aaf0:	230d      	movs	r3, #13
 800aaf2:	e06a      	b.n	800abca <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800aaf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf6:	f04f 32ff 	mov.w	r2, #4294967295
 800aafa:	611a      	str	r2, [r3, #16]
 800aafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aafe:	691a      	ldr	r2, [r3, #16]
 800ab00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab02:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800ab04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab06:	2280      	movs	r2, #128	; 0x80
 800ab08:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ab0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ab0e:	2b03      	cmp	r3, #3
 800ab10:	d149      	bne.n	800aba6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ab12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab14:	3330      	adds	r3, #48	; 0x30
 800ab16:	3330      	adds	r3, #48	; 0x30
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7fe fbf7 	bl	800930c <ld_word>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d140      	bne.n	800aba6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ab24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab26:	3301      	adds	r3, #1
 800ab28:	4619      	mov	r1, r3
 800ab2a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ab2c:	f7fe fe9e 	bl	800986c <move_window>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d137      	bne.n	800aba6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800ab36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab38:	2200      	movs	r2, #0
 800ab3a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ab3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab3e:	3330      	adds	r3, #48	; 0x30
 800ab40:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7fe fbe1 	bl	800930c <ld_word>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d127      	bne.n	800aba6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ab56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab58:	3330      	adds	r3, #48	; 0x30
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7fe fbee 	bl	800933c <ld_dword>
 800ab60:	4603      	mov	r3, r0
 800ab62:	4a1c      	ldr	r2, [pc, #112]	; (800abd4 <find_volume+0x48c>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d11e      	bne.n	800aba6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ab68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab6a:	3330      	adds	r3, #48	; 0x30
 800ab6c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7fe fbe3 	bl	800933c <ld_dword>
 800ab76:	4603      	mov	r3, r0
 800ab78:	4a17      	ldr	r2, [pc, #92]	; (800abd8 <find_volume+0x490>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d113      	bne.n	800aba6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ab7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab80:	3330      	adds	r3, #48	; 0x30
 800ab82:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7fe fbd8 	bl	800933c <ld_dword>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab90:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ab92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab94:	3330      	adds	r3, #48	; 0x30
 800ab96:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7fe fbce 	bl	800933c <ld_dword>
 800aba0:	4602      	mov	r2, r0
 800aba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800aba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800abac:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800abae:	4b0b      	ldr	r3, [pc, #44]	; (800abdc <find_volume+0x494>)
 800abb0:	881b      	ldrh	r3, [r3, #0]
 800abb2:	3301      	adds	r3, #1
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	4b09      	ldr	r3, [pc, #36]	; (800abdc <find_volume+0x494>)
 800abb8:	801a      	strh	r2, [r3, #0]
 800abba:	4b08      	ldr	r3, [pc, #32]	; (800abdc <find_volume+0x494>)
 800abbc:	881a      	ldrh	r2, [r3, #0]
 800abbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800abc2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800abc4:	f7fe fdea 	bl	800979c <clear_lock>
#endif
	return FR_OK;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3758      	adds	r7, #88	; 0x58
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	41615252 	.word	0x41615252
 800abd8:	61417272 	.word	0x61417272
 800abdc:	20000aa0 	.word	0x20000aa0

0800abe0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800abea:	2309      	movs	r3, #9
 800abec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d01c      	beq.n	800ac2e <validate+0x4e>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d018      	beq.n	800ac2e <validate+0x4e>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d013      	beq.n	800ac2e <validate+0x4e>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	889a      	ldrh	r2, [r3, #4]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	88db      	ldrh	r3, [r3, #6]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d10c      	bne.n	800ac2e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	785b      	ldrb	r3, [r3, #1]
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7fe fad8 	bl	80091d0 <disk_status>
 800ac20:	4603      	mov	r3, r0
 800ac22:	f003 0301 	and.w	r3, r3, #1
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d101      	bne.n	800ac2e <validate+0x4e>
			res = FR_OK;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ac2e:	7bfb      	ldrb	r3, [r7, #15]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d102      	bne.n	800ac3a <validate+0x5a>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	e000      	b.n	800ac3c <validate+0x5c>
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	683a      	ldr	r2, [r7, #0]
 800ac3e:	6013      	str	r3, [r2, #0]
	return res;
 800ac40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3710      	adds	r7, #16
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
	...

0800ac4c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b088      	sub	sp, #32
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	4613      	mov	r3, r2
 800ac58:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ac5e:	f107 0310 	add.w	r3, r7, #16
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7ff fcd5 	bl	800a612 <get_ldnumber>
 800ac68:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ac6a:	69fb      	ldr	r3, [r7, #28]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	da01      	bge.n	800ac74 <f_mount+0x28>
 800ac70:	230b      	movs	r3, #11
 800ac72:	e02b      	b.n	800accc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ac74:	4a17      	ldr	r2, [pc, #92]	; (800acd4 <f_mount+0x88>)
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac7c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d005      	beq.n	800ac90 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ac84:	69b8      	ldr	r0, [r7, #24]
 800ac86:	f7fe fd89 	bl	800979c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ac8a:	69bb      	ldr	r3, [r7, #24]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d002      	beq.n	800ac9c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	490d      	ldr	r1, [pc, #52]	; (800acd4 <f_mount+0x88>)
 800aca0:	69fb      	ldr	r3, [r7, #28]
 800aca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d002      	beq.n	800acb2 <f_mount+0x66>
 800acac:	79fb      	ldrb	r3, [r7, #7]
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d001      	beq.n	800acb6 <f_mount+0x6a>
 800acb2:	2300      	movs	r3, #0
 800acb4:	e00a      	b.n	800accc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800acb6:	f107 010c 	add.w	r1, r7, #12
 800acba:	f107 0308 	add.w	r3, r7, #8
 800acbe:	2200      	movs	r2, #0
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7ff fd41 	bl	800a748 <find_volume>
 800acc6:	4603      	mov	r3, r0
 800acc8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800acca:	7dfb      	ldrb	r3, [r7, #23]
}
 800accc:	4618      	mov	r0, r3
 800acce:	3720      	adds	r7, #32
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	20000a9c 	.word	0x20000a9c

0800acd8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b098      	sub	sp, #96	; 0x60
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	4613      	mov	r3, r2
 800ace4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d101      	bne.n	800acf0 <f_open+0x18>
 800acec:	2309      	movs	r3, #9
 800acee:	e1ad      	b.n	800b04c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800acf0:	79fb      	ldrb	r3, [r7, #7]
 800acf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800acf6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800acf8:	79fa      	ldrb	r2, [r7, #7]
 800acfa:	f107 0110 	add.w	r1, r7, #16
 800acfe:	f107 0308 	add.w	r3, r7, #8
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7ff fd20 	bl	800a748 <find_volume>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800ad0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	f040 8191 	bne.w	800b03a <f_open+0x362>
		dj.obj.fs = fs;
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ad1c:	68ba      	ldr	r2, [r7, #8]
 800ad1e:	f107 0314 	add.w	r3, r7, #20
 800ad22:	4611      	mov	r1, r2
 800ad24:	4618      	mov	r0, r3
 800ad26:	f7ff fc03 	bl	800a530 <follow_path>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ad30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d11a      	bne.n	800ad6e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ad38:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ad3c:	b25b      	sxtb	r3, r3
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	da03      	bge.n	800ad4a <f_open+0x72>
				res = FR_INVALID_NAME;
 800ad42:	2306      	movs	r3, #6
 800ad44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ad48:	e011      	b.n	800ad6e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ad4a:	79fb      	ldrb	r3, [r7, #7]
 800ad4c:	f023 0301 	bic.w	r3, r3, #1
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	bf14      	ite	ne
 800ad54:	2301      	movne	r3, #1
 800ad56:	2300      	moveq	r3, #0
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	f107 0314 	add.w	r3, r7, #20
 800ad60:	4611      	mov	r1, r2
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fe fbd2 	bl	800950c <chk_lock>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ad6e:	79fb      	ldrb	r3, [r7, #7]
 800ad70:	f003 031c 	and.w	r3, r3, #28
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d07f      	beq.n	800ae78 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ad78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d017      	beq.n	800adb0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ad80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad84:	2b04      	cmp	r3, #4
 800ad86:	d10e      	bne.n	800ada6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ad88:	f7fe fc1c 	bl	80095c4 <enq_lock>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d006      	beq.n	800ada0 <f_open+0xc8>
 800ad92:	f107 0314 	add.w	r3, r7, #20
 800ad96:	4618      	mov	r0, r3
 800ad98:	f7ff fb03 	bl	800a3a2 <dir_register>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	e000      	b.n	800ada2 <f_open+0xca>
 800ada0:	2312      	movs	r3, #18
 800ada2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ada6:	79fb      	ldrb	r3, [r7, #7]
 800ada8:	f043 0308 	orr.w	r3, r3, #8
 800adac:	71fb      	strb	r3, [r7, #7]
 800adae:	e010      	b.n	800add2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800adb0:	7ebb      	ldrb	r3, [r7, #26]
 800adb2:	f003 0311 	and.w	r3, r3, #17
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d003      	beq.n	800adc2 <f_open+0xea>
					res = FR_DENIED;
 800adba:	2307      	movs	r3, #7
 800adbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800adc0:	e007      	b.n	800add2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800adc2:	79fb      	ldrb	r3, [r7, #7]
 800adc4:	f003 0304 	and.w	r3, r3, #4
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d002      	beq.n	800add2 <f_open+0xfa>
 800adcc:	2308      	movs	r3, #8
 800adce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800add2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800add6:	2b00      	cmp	r3, #0
 800add8:	d168      	bne.n	800aeac <f_open+0x1d4>
 800adda:	79fb      	ldrb	r3, [r7, #7]
 800addc:	f003 0308 	and.w	r3, r3, #8
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d063      	beq.n	800aeac <f_open+0x1d4>
				dw = GET_FATTIME();
 800ade4:	f7fd ffce 	bl	8008d84 <get_fattime>
 800ade8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800adea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adec:	330e      	adds	r3, #14
 800adee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7fe fae1 	bl	80093b8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800adf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adf8:	3316      	adds	r3, #22
 800adfa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7fe fadb 	bl	80093b8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ae02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae04:	330b      	adds	r3, #11
 800ae06:	2220      	movs	r2, #32
 800ae08:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae0e:	4611      	mov	r1, r2
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7ff fa32 	bl	800a27a <ld_clust>
 800ae16:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7ff fa4a 	bl	800a2b8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ae24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae26:	331c      	adds	r3, #28
 800ae28:	2100      	movs	r1, #0
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f7fe fac4 	bl	80093b8 <st_dword>
					fs->wflag = 1;
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	2201      	movs	r2, #1
 800ae34:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ae36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d037      	beq.n	800aeac <f_open+0x1d4>
						dw = fs->winsect;
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae40:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ae42:	f107 0314 	add.w	r3, r7, #20
 800ae46:	2200      	movs	r2, #0
 800ae48:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7fe ff5d 	bl	8009d0a <remove_chain>
 800ae50:	4603      	mov	r3, r0
 800ae52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800ae56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d126      	bne.n	800aeac <f_open+0x1d4>
							res = move_window(fs, dw);
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7fe fd02 	bl	800986c <move_window>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae72:	3a01      	subs	r2, #1
 800ae74:	60da      	str	r2, [r3, #12]
 800ae76:	e019      	b.n	800aeac <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ae78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d115      	bne.n	800aeac <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ae80:	7ebb      	ldrb	r3, [r7, #26]
 800ae82:	f003 0310 	and.w	r3, r3, #16
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d003      	beq.n	800ae92 <f_open+0x1ba>
					res = FR_NO_FILE;
 800ae8a:	2304      	movs	r3, #4
 800ae8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ae90:	e00c      	b.n	800aeac <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ae92:	79fb      	ldrb	r3, [r7, #7]
 800ae94:	f003 0302 	and.w	r3, r3, #2
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d007      	beq.n	800aeac <f_open+0x1d4>
 800ae9c:	7ebb      	ldrb	r3, [r7, #26]
 800ae9e:	f003 0301 	and.w	r3, r3, #1
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d002      	beq.n	800aeac <f_open+0x1d4>
						res = FR_DENIED;
 800aea6:	2307      	movs	r3, #7
 800aea8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800aeac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d128      	bne.n	800af06 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800aeb4:	79fb      	ldrb	r3, [r7, #7]
 800aeb6:	f003 0308 	and.w	r3, r3, #8
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d003      	beq.n	800aec6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800aebe:	79fb      	ldrb	r3, [r7, #7]
 800aec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aec4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800aece:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800aed4:	79fb      	ldrb	r3, [r7, #7]
 800aed6:	f023 0301 	bic.w	r3, r3, #1
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	bf14      	ite	ne
 800aede:	2301      	movne	r3, #1
 800aee0:	2300      	moveq	r3, #0
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	461a      	mov	r2, r3
 800aee6:	f107 0314 	add.w	r3, r7, #20
 800aeea:	4611      	mov	r1, r2
 800aeec:	4618      	mov	r0, r3
 800aeee:	f7fe fb8b 	bl	8009608 <inc_lock>
 800aef2:	4602      	mov	r2, r0
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	691b      	ldr	r3, [r3, #16]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d102      	bne.n	800af06 <f_open+0x22e>
 800af00:	2302      	movs	r3, #2
 800af02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800af06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	f040 8095 	bne.w	800b03a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af14:	4611      	mov	r1, r2
 800af16:	4618      	mov	r0, r3
 800af18:	f7ff f9af 	bl	800a27a <ld_clust>
 800af1c:	4602      	mov	r2, r0
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800af22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af24:	331c      	adds	r3, #28
 800af26:	4618      	mov	r0, r3
 800af28:	f7fe fa08 	bl	800933c <ld_dword>
 800af2c:	4602      	mov	r2, r0
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2200      	movs	r2, #0
 800af36:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800af38:	693a      	ldr	r2, [r7, #16]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	88da      	ldrh	r2, [r3, #6]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	79fa      	ldrb	r2, [r7, #7]
 800af4a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2200      	movs	r2, #0
 800af50:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2200      	movs	r2, #0
 800af56:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2200      	movs	r2, #0
 800af5c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	3330      	adds	r3, #48	; 0x30
 800af62:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af66:	2100      	movs	r1, #0
 800af68:	4618      	mov	r0, r3
 800af6a:	f7fe fa72 	bl	8009452 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800af6e:	79fb      	ldrb	r3, [r7, #7]
 800af70:	f003 0320 	and.w	r3, r3, #32
 800af74:	2b00      	cmp	r3, #0
 800af76:	d060      	beq.n	800b03a <f_open+0x362>
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	68db      	ldr	r3, [r3, #12]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d05c      	beq.n	800b03a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	68da      	ldr	r2, [r3, #12]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	895b      	ldrh	r3, [r3, #10]
 800af8c:	025b      	lsls	r3, r3, #9
 800af8e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	689b      	ldr	r3, [r3, #8]
 800af94:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	657b      	str	r3, [r7, #84]	; 0x54
 800af9c:	e016      	b.n	800afcc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7fe fd1d 	bl	80099e2 <get_fat>
 800afa8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800afaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800afac:	2b01      	cmp	r3, #1
 800afae:	d802      	bhi.n	800afb6 <f_open+0x2de>
 800afb0:	2302      	movs	r3, #2
 800afb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800afb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800afb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afbc:	d102      	bne.n	800afc4 <f_open+0x2ec>
 800afbe:	2301      	movs	r3, #1
 800afc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800afc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800afc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afc8:	1ad3      	subs	r3, r2, r3
 800afca:	657b      	str	r3, [r7, #84]	; 0x54
 800afcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d103      	bne.n	800afdc <f_open+0x304>
 800afd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800afd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afd8:	429a      	cmp	r2, r3
 800afda:	d8e0      	bhi.n	800af9e <f_open+0x2c6>
				}
				fp->clust = clst;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800afe0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800afe2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d127      	bne.n	800b03a <f_open+0x362>
 800afea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d022      	beq.n	800b03a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aff8:	4618      	mov	r0, r3
 800affa:	f7fe fcd3 	bl	80099a4 <clust2sect>
 800affe:	6478      	str	r0, [r7, #68]	; 0x44
 800b000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b002:	2b00      	cmp	r3, #0
 800b004:	d103      	bne.n	800b00e <f_open+0x336>
						res = FR_INT_ERR;
 800b006:	2302      	movs	r3, #2
 800b008:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b00c:	e015      	b.n	800b03a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b00e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b010:	0a5a      	lsrs	r2, r3, #9
 800b012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b014:	441a      	add	r2, r3
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	7858      	ldrb	r0, [r3, #1]
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	6a1a      	ldr	r2, [r3, #32]
 800b028:	2301      	movs	r3, #1
 800b02a:	f7fe f911 	bl	8009250 <disk_read>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b00      	cmp	r3, #0
 800b032:	d002      	beq.n	800b03a <f_open+0x362>
 800b034:	2301      	movs	r3, #1
 800b036:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b03a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d002      	beq.n	800b048 <f_open+0x370>
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2200      	movs	r2, #0
 800b046:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b048:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3760      	adds	r7, #96	; 0x60
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b08c      	sub	sp, #48	; 0x30
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	607a      	str	r2, [r7, #4]
 800b060:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	2200      	movs	r2, #0
 800b06a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f107 0210 	add.w	r2, r7, #16
 800b072:	4611      	mov	r1, r2
 800b074:	4618      	mov	r0, r3
 800b076:	f7ff fdb3 	bl	800abe0 <validate>
 800b07a:	4603      	mov	r3, r0
 800b07c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b080:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b084:	2b00      	cmp	r3, #0
 800b086:	d107      	bne.n	800b098 <f_write+0x44>
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	7d5b      	ldrb	r3, [r3, #21]
 800b08c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b090:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b094:	2b00      	cmp	r3, #0
 800b096:	d002      	beq.n	800b09e <f_write+0x4a>
 800b098:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b09c:	e14b      	b.n	800b336 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	7d1b      	ldrb	r3, [r3, #20]
 800b0a2:	f003 0302 	and.w	r3, r3, #2
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d101      	bne.n	800b0ae <f_write+0x5a>
 800b0aa:	2307      	movs	r3, #7
 800b0ac:	e143      	b.n	800b336 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	699a      	ldr	r2, [r3, #24]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	441a      	add	r2, r3
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	699b      	ldr	r3, [r3, #24]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	f080 812d 	bcs.w	800b31a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	699b      	ldr	r3, [r3, #24]
 800b0c4:	43db      	mvns	r3, r3
 800b0c6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b0c8:	e127      	b.n	800b31a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	699b      	ldr	r3, [r3, #24]
 800b0ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	f040 80e3 	bne.w	800b29e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	699b      	ldr	r3, [r3, #24]
 800b0dc:	0a5b      	lsrs	r3, r3, #9
 800b0de:	693a      	ldr	r2, [r7, #16]
 800b0e0:	8952      	ldrh	r2, [r2, #10]
 800b0e2:	3a01      	subs	r2, #1
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b0e8:	69bb      	ldr	r3, [r7, #24]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d143      	bne.n	800b176 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	699b      	ldr	r3, [r3, #24]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d10c      	bne.n	800b110 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	689b      	ldr	r3, [r3, #8]
 800b0fa:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d11a      	bne.n	800b138 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2100      	movs	r1, #0
 800b106:	4618      	mov	r0, r3
 800b108:	f7fe fe64 	bl	8009dd4 <create_chain>
 800b10c:	62b8      	str	r0, [r7, #40]	; 0x28
 800b10e:	e013      	b.n	800b138 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b114:	2b00      	cmp	r3, #0
 800b116:	d007      	beq.n	800b128 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	699b      	ldr	r3, [r3, #24]
 800b11c:	4619      	mov	r1, r3
 800b11e:	68f8      	ldr	r0, [r7, #12]
 800b120:	f7fe fef0 	bl	8009f04 <clmt_clust>
 800b124:	62b8      	str	r0, [r7, #40]	; 0x28
 800b126:	e007      	b.n	800b138 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b128:	68fa      	ldr	r2, [r7, #12]
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	69db      	ldr	r3, [r3, #28]
 800b12e:	4619      	mov	r1, r3
 800b130:	4610      	mov	r0, r2
 800b132:	f7fe fe4f 	bl	8009dd4 <create_chain>
 800b136:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	f000 80f2 	beq.w	800b324 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b142:	2b01      	cmp	r3, #1
 800b144:	d104      	bne.n	800b150 <f_write+0xfc>
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2202      	movs	r2, #2
 800b14a:	755a      	strb	r2, [r3, #21]
 800b14c:	2302      	movs	r3, #2
 800b14e:	e0f2      	b.n	800b336 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b152:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b156:	d104      	bne.n	800b162 <f_write+0x10e>
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2201      	movs	r2, #1
 800b15c:	755a      	strb	r2, [r3, #21]
 800b15e:	2301      	movs	r3, #1
 800b160:	e0e9      	b.n	800b336 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b166:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	689b      	ldr	r3, [r3, #8]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d102      	bne.n	800b176 <f_write+0x122>
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b174:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	7d1b      	ldrb	r3, [r3, #20]
 800b17a:	b25b      	sxtb	r3, r3
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	da18      	bge.n	800b1b2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	7858      	ldrb	r0, [r3, #1]
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	6a1a      	ldr	r2, [r3, #32]
 800b18e:	2301      	movs	r3, #1
 800b190:	f7fe f87e 	bl	8009290 <disk_write>
 800b194:	4603      	mov	r3, r0
 800b196:	2b00      	cmp	r3, #0
 800b198:	d004      	beq.n	800b1a4 <f_write+0x150>
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2201      	movs	r2, #1
 800b19e:	755a      	strb	r2, [r3, #21]
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	e0c8      	b.n	800b336 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	7d1b      	ldrb	r3, [r3, #20]
 800b1a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1ac:	b2da      	uxtb	r2, r3
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b1b2:	693a      	ldr	r2, [r7, #16]
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	69db      	ldr	r3, [r3, #28]
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	4610      	mov	r0, r2
 800b1bc:	f7fe fbf2 	bl	80099a4 <clust2sect>
 800b1c0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d104      	bne.n	800b1d2 <f_write+0x17e>
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2202      	movs	r2, #2
 800b1cc:	755a      	strb	r2, [r3, #21]
 800b1ce:	2302      	movs	r3, #2
 800b1d0:	e0b1      	b.n	800b336 <f_write+0x2e2>
			sect += csect;
 800b1d2:	697a      	ldr	r2, [r7, #20]
 800b1d4:	69bb      	ldr	r3, [r7, #24]
 800b1d6:	4413      	add	r3, r2
 800b1d8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	0a5b      	lsrs	r3, r3, #9
 800b1de:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b1e0:	6a3b      	ldr	r3, [r7, #32]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d03c      	beq.n	800b260 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b1e6:	69ba      	ldr	r2, [r7, #24]
 800b1e8:	6a3b      	ldr	r3, [r7, #32]
 800b1ea:	4413      	add	r3, r2
 800b1ec:	693a      	ldr	r2, [r7, #16]
 800b1ee:	8952      	ldrh	r2, [r2, #10]
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d905      	bls.n	800b200 <f_write+0x1ac>
					cc = fs->csize - csect;
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	895b      	ldrh	r3, [r3, #10]
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	1ad3      	subs	r3, r2, r3
 800b1fe:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	7858      	ldrb	r0, [r3, #1]
 800b204:	6a3b      	ldr	r3, [r7, #32]
 800b206:	697a      	ldr	r2, [r7, #20]
 800b208:	69f9      	ldr	r1, [r7, #28]
 800b20a:	f7fe f841 	bl	8009290 <disk_write>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d004      	beq.n	800b21e <f_write+0x1ca>
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2201      	movs	r2, #1
 800b218:	755a      	strb	r2, [r3, #21]
 800b21a:	2301      	movs	r3, #1
 800b21c:	e08b      	b.n	800b336 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	6a1a      	ldr	r2, [r3, #32]
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	1ad3      	subs	r3, r2, r3
 800b226:	6a3a      	ldr	r2, [r7, #32]
 800b228:	429a      	cmp	r2, r3
 800b22a:	d915      	bls.n	800b258 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	6a1a      	ldr	r2, [r3, #32]
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	1ad3      	subs	r3, r2, r3
 800b23a:	025b      	lsls	r3, r3, #9
 800b23c:	69fa      	ldr	r2, [r7, #28]
 800b23e:	4413      	add	r3, r2
 800b240:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b244:	4619      	mov	r1, r3
 800b246:	f7fe f8e3 	bl	8009410 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	7d1b      	ldrb	r3, [r3, #20]
 800b24e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b252:	b2da      	uxtb	r2, r3
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b258:	6a3b      	ldr	r3, [r7, #32]
 800b25a:	025b      	lsls	r3, r3, #9
 800b25c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b25e:	e03f      	b.n	800b2e0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	6a1b      	ldr	r3, [r3, #32]
 800b264:	697a      	ldr	r2, [r7, #20]
 800b266:	429a      	cmp	r2, r3
 800b268:	d016      	beq.n	800b298 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	699a      	ldr	r2, [r3, #24]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b272:	429a      	cmp	r2, r3
 800b274:	d210      	bcs.n	800b298 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	7858      	ldrb	r0, [r3, #1]
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b280:	2301      	movs	r3, #1
 800b282:	697a      	ldr	r2, [r7, #20]
 800b284:	f7fd ffe4 	bl	8009250 <disk_read>
 800b288:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d004      	beq.n	800b298 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2201      	movs	r2, #1
 800b292:	755a      	strb	r2, [r3, #21]
 800b294:	2301      	movs	r3, #1
 800b296:	e04e      	b.n	800b336 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	697a      	ldr	r2, [r7, #20]
 800b29c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	699b      	ldr	r3, [r3, #24]
 800b2a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2a6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b2aa:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b2ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d901      	bls.n	800b2b8 <f_write+0x264>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	699b      	ldr	r3, [r3, #24]
 800b2c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2c6:	4413      	add	r3, r2
 800b2c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2ca:	69f9      	ldr	r1, [r7, #28]
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f7fe f89f 	bl	8009410 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	7d1b      	ldrb	r3, [r3, #20]
 800b2d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b2da:	b2da      	uxtb	r2, r3
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b2e0:	69fa      	ldr	r2, [r7, #28]
 800b2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e4:	4413      	add	r3, r2
 800b2e6:	61fb      	str	r3, [r7, #28]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	699a      	ldr	r2, [r3, #24]
 800b2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ee:	441a      	add	r2, r3
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	619a      	str	r2, [r3, #24]
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	68da      	ldr	r2, [r3, #12]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	699b      	ldr	r3, [r3, #24]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	bf38      	it	cc
 800b300:	461a      	movcc	r2, r3
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	60da      	str	r2, [r3, #12]
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30c:	441a      	add	r2, r3
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	601a      	str	r2, [r3, #0]
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b316:	1ad3      	subs	r3, r2, r3
 800b318:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f47f aed4 	bne.w	800b0ca <f_write+0x76>
 800b322:	e000      	b.n	800b326 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b324:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	7d1b      	ldrb	r3, [r3, #20]
 800b32a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b32e:	b2da      	uxtb	r2, r3
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b334:	2300      	movs	r3, #0
}
 800b336:	4618      	mov	r0, r3
 800b338:	3730      	adds	r7, #48	; 0x30
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}

0800b33e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b33e:	b580      	push	{r7, lr}
 800b340:	b086      	sub	sp, #24
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f107 0208 	add.w	r2, r7, #8
 800b34c:	4611      	mov	r1, r2
 800b34e:	4618      	mov	r0, r3
 800b350:	f7ff fc46 	bl	800abe0 <validate>
 800b354:	4603      	mov	r3, r0
 800b356:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b358:	7dfb      	ldrb	r3, [r7, #23]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d168      	bne.n	800b430 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	7d1b      	ldrb	r3, [r3, #20]
 800b362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b366:	2b00      	cmp	r3, #0
 800b368:	d062      	beq.n	800b430 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	7d1b      	ldrb	r3, [r3, #20]
 800b36e:	b25b      	sxtb	r3, r3
 800b370:	2b00      	cmp	r3, #0
 800b372:	da15      	bge.n	800b3a0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	7858      	ldrb	r0, [r3, #1]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6a1a      	ldr	r2, [r3, #32]
 800b382:	2301      	movs	r3, #1
 800b384:	f7fd ff84 	bl	8009290 <disk_write>
 800b388:	4603      	mov	r3, r0
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d001      	beq.n	800b392 <f_sync+0x54>
 800b38e:	2301      	movs	r3, #1
 800b390:	e04f      	b.n	800b432 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	7d1b      	ldrb	r3, [r3, #20]
 800b396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b39a:	b2da      	uxtb	r2, r3
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b3a0:	f7fd fcf0 	bl	8008d84 <get_fattime>
 800b3a4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b3a6:	68ba      	ldr	r2, [r7, #8]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	4610      	mov	r0, r2
 800b3b0:	f7fe fa5c 	bl	800986c <move_window>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b3b8:	7dfb      	ldrb	r3, [r7, #23]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d138      	bne.n	800b430 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3c2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	330b      	adds	r3, #11
 800b3c8:	781a      	ldrb	r2, [r3, #0]
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	330b      	adds	r3, #11
 800b3ce:	f042 0220 	orr.w	r2, r2, #32
 800b3d2:	b2d2      	uxtb	r2, r2
 800b3d4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6818      	ldr	r0, [r3, #0]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	689b      	ldr	r3, [r3, #8]
 800b3de:	461a      	mov	r2, r3
 800b3e0:	68f9      	ldr	r1, [r7, #12]
 800b3e2:	f7fe ff69 	bl	800a2b8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	f103 021c 	add.w	r2, r3, #28
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	68db      	ldr	r3, [r3, #12]
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	4610      	mov	r0, r2
 800b3f4:	f7fd ffe0 	bl	80093b8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	3316      	adds	r3, #22
 800b3fc:	6939      	ldr	r1, [r7, #16]
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7fd ffda 	bl	80093b8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	3312      	adds	r3, #18
 800b408:	2100      	movs	r1, #0
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7fd ffb9 	bl	8009382 <st_word>
					fs->wflag = 1;
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	2201      	movs	r2, #1
 800b414:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	4618      	mov	r0, r3
 800b41a:	f7fe fa55 	bl	80098c8 <sync_fs>
 800b41e:	4603      	mov	r3, r0
 800b420:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	7d1b      	ldrb	r3, [r3, #20]
 800b426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b42a:	b2da      	uxtb	r2, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b430:	7dfb      	ldrb	r3, [r7, #23]
}
 800b432:	4618      	mov	r0, r3
 800b434:	3718      	adds	r7, #24
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}

0800b43a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b43a:	b580      	push	{r7, lr}
 800b43c:	b084      	sub	sp, #16
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f7ff ff7b 	bl	800b33e <f_sync>
 800b448:	4603      	mov	r3, r0
 800b44a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b44c:	7bfb      	ldrb	r3, [r7, #15]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d118      	bne.n	800b484 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f107 0208 	add.w	r2, r7, #8
 800b458:	4611      	mov	r1, r2
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7ff fbc0 	bl	800abe0 <validate>
 800b460:	4603      	mov	r3, r0
 800b462:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b464:	7bfb      	ldrb	r3, [r7, #15]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d10c      	bne.n	800b484 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	691b      	ldr	r3, [r3, #16]
 800b46e:	4618      	mov	r0, r3
 800b470:	f7fe f958 	bl	8009724 <dec_lock>
 800b474:	4603      	mov	r3, r0
 800b476:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b478:	7bfb      	ldrb	r3, [r7, #15]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d102      	bne.n	800b484 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2200      	movs	r2, #0
 800b482:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b484:	7bfb      	ldrb	r3, [r7, #15]
}
 800b486:	4618      	mov	r0, r3
 800b488:	3710      	adds	r7, #16
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800b48e:	b580      	push	{r7, lr}
 800b490:	b084      	sub	sp, #16
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
 800b496:	460b      	mov	r3, r1
 800b498:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800b49a:	78fb      	ldrb	r3, [r7, #3]
 800b49c:	2b0a      	cmp	r3, #10
 800b49e:	d103      	bne.n	800b4a8 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800b4a0:	210d      	movs	r1, #13
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f7ff fff3 	bl	800b48e <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	db25      	blt.n	800b500 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	1c5a      	adds	r2, r3, #1
 800b4b8:	60fa      	str	r2, [r7, #12]
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	4413      	add	r3, r2
 800b4be:	78fa      	ldrb	r2, [r7, #3]
 800b4c0:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2b3c      	cmp	r3, #60	; 0x3c
 800b4c6:	dd12      	ble.n	800b4ee <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6818      	ldr	r0, [r3, #0]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f103 010c 	add.w	r1, r3, #12
 800b4d2:	68fa      	ldr	r2, [r7, #12]
 800b4d4:	f107 0308 	add.w	r3, r7, #8
 800b4d8:	f7ff fdbc 	bl	800b054 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800b4dc:	68ba      	ldr	r2, [r7, #8]
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d101      	bne.n	800b4e8 <putc_bfd+0x5a>
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	e001      	b.n	800b4ec <putc_bfd+0x5e>
 800b4e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ec:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	68fa      	ldr	r2, [r7, #12]
 800b4f2:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	1c5a      	adds	r2, r3, #1
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	609a      	str	r2, [r3, #8]
 800b4fe:	e000      	b.n	800b502 <putc_bfd+0x74>
	if (i < 0) return;
 800b500:	bf00      	nop
}
 800b502:	3710      	adds	r7, #16
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	2b00      	cmp	r3, #0
 800b516:	db16      	blt.n	800b546 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6818      	ldr	r0, [r3, #0]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f103 010c 	add.w	r1, r3, #12
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	461a      	mov	r2, r3
 800b528:	f107 030c 	add.w	r3, r7, #12
 800b52c:	f7ff fd92 	bl	800b054 <f_write>
 800b530:	4603      	mov	r3, r0
 800b532:	2b00      	cmp	r3, #0
 800b534:	d107      	bne.n	800b546 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	68fa      	ldr	r2, [r7, #12]
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d102      	bne.n	800b546 <putc_flush+0x3e>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	689b      	ldr	r3, [r3, #8]
 800b544:	e001      	b.n	800b54a <putc_flush+0x42>
	return EOF;
 800b546:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3710      	adds	r7, #16
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}

0800b552 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800b552:	b480      	push	{r7}
 800b554:	b083      	sub	sp, #12
 800b556:	af00      	add	r7, sp, #0
 800b558:	6078      	str	r0, [r7, #4]
 800b55a:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	683a      	ldr	r2, [r7, #0]
 800b560:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2200      	movs	r2, #0
 800b566:	605a      	str	r2, [r3, #4]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	685a      	ldr	r2, [r3, #4]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	609a      	str	r2, [r3, #8]
}
 800b570:	bf00      	nop
 800b572:	370c      	adds	r7, #12
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr

0800b57c <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800b57c:	b40e      	push	{r1, r2, r3}
 800b57e:	b580      	push	{r7, lr}
 800b580:	b0a7      	sub	sp, #156	; 0x9c
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800b586:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b58a:	6879      	ldr	r1, [r7, #4]
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7ff ffe0 	bl	800b552 <putc_init>

	va_start(arp, fmt);
 800b592:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800b596:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800b598:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b59c:	1c5a      	adds	r2, r3, #1
 800b59e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800b5a8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	f000 81f2 	beq.w	800b996 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800b5b2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b5b6:	2b25      	cmp	r3, #37	; 0x25
 800b5b8:	d008      	beq.n	800b5cc <f_printf+0x50>
			putc_bfd(&pb, c);
 800b5ba:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800b5be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b5c2:	4611      	mov	r1, r2
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f7ff ff62 	bl	800b48e <putc_bfd>
			continue;
 800b5ca:	e1e3      	b.n	800b994 <f_printf+0x418>
		}
		w = f = 0;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800b5d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b5dc:	1c5a      	adds	r2, r3, #1
 800b5de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800b5e8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b5ec:	2b30      	cmp	r3, #48	; 0x30
 800b5ee:	d10b      	bne.n	800b608 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b5f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b5fa:	1c5a      	adds	r2, r3, #1
 800b5fc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800b606:	e024      	b.n	800b652 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800b608:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b60c:	2b2d      	cmp	r3, #45	; 0x2d
 800b60e:	d120      	bne.n	800b652 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800b610:	2302      	movs	r3, #2
 800b612:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b616:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b61a:	1c5a      	adds	r2, r3, #1
 800b61c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800b626:	e014      	b.n	800b652 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800b628:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b62c:	4613      	mov	r3, r2
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	4413      	add	r3, r2
 800b632:	005b      	lsls	r3, r3, #1
 800b634:	461a      	mov	r2, r3
 800b636:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b63a:	4413      	add	r3, r2
 800b63c:	3b30      	subs	r3, #48	; 0x30
 800b63e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800b642:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b646:	1c5a      	adds	r2, r3, #1
 800b648:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800b652:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b656:	2b2f      	cmp	r3, #47	; 0x2f
 800b658:	d903      	bls.n	800b662 <f_printf+0xe6>
 800b65a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b65e:	2b39      	cmp	r3, #57	; 0x39
 800b660:	d9e2      	bls.n	800b628 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800b662:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b666:	2b6c      	cmp	r3, #108	; 0x6c
 800b668:	d003      	beq.n	800b672 <f_printf+0xf6>
 800b66a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b66e:	2b4c      	cmp	r3, #76	; 0x4c
 800b670:	d10d      	bne.n	800b68e <f_printf+0x112>
			f |= 4; c = *fmt++;
 800b672:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b676:	f043 0304 	orr.w	r3, r3, #4
 800b67a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b67e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b682:	1c5a      	adds	r2, r3, #1
 800b684:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800b68e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b692:	2b00      	cmp	r3, #0
 800b694:	f000 8181 	beq.w	800b99a <f_printf+0x41e>
		d = c;
 800b698:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b69c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800b6a0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b6a4:	2b60      	cmp	r3, #96	; 0x60
 800b6a6:	d908      	bls.n	800b6ba <f_printf+0x13e>
 800b6a8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b6ac:	2b7a      	cmp	r3, #122	; 0x7a
 800b6ae:	d804      	bhi.n	800b6ba <f_printf+0x13e>
 800b6b0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b6b4:	3b20      	subs	r3, #32
 800b6b6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800b6ba:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b6be:	3b42      	subs	r3, #66	; 0x42
 800b6c0:	2b16      	cmp	r3, #22
 800b6c2:	f200 8098 	bhi.w	800b7f6 <f_printf+0x27a>
 800b6c6:	a201      	add	r2, pc, #4	; (adr r2, 800b6cc <f_printf+0x150>)
 800b6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6cc:	0800b7d7 	.word	0x0800b7d7
 800b6d0:	0800b7bf 	.word	0x0800b7bf
 800b6d4:	0800b7e7 	.word	0x0800b7e7
 800b6d8:	0800b7f7 	.word	0x0800b7f7
 800b6dc:	0800b7f7 	.word	0x0800b7f7
 800b6e0:	0800b7f7 	.word	0x0800b7f7
 800b6e4:	0800b7f7 	.word	0x0800b7f7
 800b6e8:	0800b7f7 	.word	0x0800b7f7
 800b6ec:	0800b7f7 	.word	0x0800b7f7
 800b6f0:	0800b7f7 	.word	0x0800b7f7
 800b6f4:	0800b7f7 	.word	0x0800b7f7
 800b6f8:	0800b7f7 	.word	0x0800b7f7
 800b6fc:	0800b7f7 	.word	0x0800b7f7
 800b700:	0800b7df 	.word	0x0800b7df
 800b704:	0800b7f7 	.word	0x0800b7f7
 800b708:	0800b7f7 	.word	0x0800b7f7
 800b70c:	0800b7f7 	.word	0x0800b7f7
 800b710:	0800b729 	.word	0x0800b729
 800b714:	0800b7f7 	.word	0x0800b7f7
 800b718:	0800b7e7 	.word	0x0800b7e7
 800b71c:	0800b7f7 	.word	0x0800b7f7
 800b720:	0800b7f7 	.word	0x0800b7f7
 800b724:	0800b7ef 	.word	0x0800b7ef
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800b728:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b72a:	1d1a      	adds	r2, r3, #4
 800b72c:	67ba      	str	r2, [r7, #120]	; 0x78
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800b732:	2300      	movs	r3, #0
 800b734:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b738:	e004      	b.n	800b744 <f_printf+0x1c8>
 800b73a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b73e:	3301      	adds	r3, #1
 800b740:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b744:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b746:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b74a:	4413      	add	r3, r2
 800b74c:	781b      	ldrb	r3, [r3, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d1f3      	bne.n	800b73a <f_printf+0x1be>
			if (!(f & 2)) {
 800b752:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b756:	f003 0302 	and.w	r3, r3, #2
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d11a      	bne.n	800b794 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800b75e:	e005      	b.n	800b76c <f_printf+0x1f0>
 800b760:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b764:	2120      	movs	r1, #32
 800b766:	4618      	mov	r0, r3
 800b768:	f7ff fe91 	bl	800b48e <putc_bfd>
 800b76c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b770:	1c5a      	adds	r2, r3, #1
 800b772:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b776:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d8f0      	bhi.n	800b760 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800b77e:	e009      	b.n	800b794 <f_printf+0x218>
 800b780:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b782:	1c5a      	adds	r2, r3, #1
 800b784:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b786:	781a      	ldrb	r2, [r3, #0]
 800b788:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b78c:	4611      	mov	r1, r2
 800b78e:	4618      	mov	r0, r3
 800b790:	f7ff fe7d 	bl	800b48e <putc_bfd>
 800b794:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d1f1      	bne.n	800b780 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800b79c:	e005      	b.n	800b7aa <f_printf+0x22e>
 800b79e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b7a2:	2120      	movs	r1, #32
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f7ff fe72 	bl	800b48e <putc_bfd>
 800b7aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b7ae:	1c5a      	adds	r2, r3, #1
 800b7b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b7b4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d8f0      	bhi.n	800b79e <f_printf+0x222>
			continue;
 800b7bc:	e0ea      	b.n	800b994 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800b7be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b7c0:	1d1a      	adds	r2, r3, #4
 800b7c2:	67ba      	str	r2, [r7, #120]	; 0x78
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	b2da      	uxtb	r2, r3
 800b7c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b7cc:	4611      	mov	r1, r2
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f7ff fe5d 	bl	800b48e <putc_bfd>
 800b7d4:	e0de      	b.n	800b994 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800b7d6:	2302      	movs	r3, #2
 800b7d8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b7dc:	e014      	b.n	800b808 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800b7de:	2308      	movs	r3, #8
 800b7e0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b7e4:	e010      	b.n	800b808 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800b7e6:	230a      	movs	r3, #10
 800b7e8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b7ec:	e00c      	b.n	800b808 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800b7ee:	2310      	movs	r3, #16
 800b7f0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b7f4:	e008      	b.n	800b808 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800b7f6:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800b7fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b7fe:	4611      	mov	r1, r2
 800b800:	4618      	mov	r0, r3
 800b802:	f7ff fe44 	bl	800b48e <putc_bfd>
 800b806:	e0c5      	b.n	800b994 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800b808:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b80c:	f003 0304 	and.w	r3, r3, #4
 800b810:	2b00      	cmp	r3, #0
 800b812:	d004      	beq.n	800b81e <f_printf+0x2a2>
 800b814:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b816:	1d1a      	adds	r2, r3, #4
 800b818:	67ba      	str	r2, [r7, #120]	; 0x78
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	e00c      	b.n	800b838 <f_printf+0x2bc>
 800b81e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b822:	2b44      	cmp	r3, #68	; 0x44
 800b824:	d104      	bne.n	800b830 <f_printf+0x2b4>
 800b826:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b828:	1d1a      	adds	r2, r3, #4
 800b82a:	67ba      	str	r2, [r7, #120]	; 0x78
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	e003      	b.n	800b838 <f_printf+0x2bc>
 800b830:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b832:	1d1a      	adds	r2, r3, #4
 800b834:	67ba      	str	r2, [r7, #120]	; 0x78
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800b83c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b840:	2b44      	cmp	r3, #68	; 0x44
 800b842:	d10e      	bne.n	800b862 <f_printf+0x2e6>
 800b844:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b848:	2b00      	cmp	r3, #0
 800b84a:	da0a      	bge.n	800b862 <f_printf+0x2e6>
			v = 0 - v;
 800b84c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b850:	425b      	negs	r3, r3
 800b852:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800b856:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b85a:	f043 0308 	orr.w	r3, r3, #8
 800b85e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800b862:	2300      	movs	r3, #0
 800b864:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800b868:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800b86c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b870:	fbb3 f1f2 	udiv	r1, r3, r2
 800b874:	fb01 f202 	mul.w	r2, r1, r2
 800b878:	1a9b      	subs	r3, r3, r2
 800b87a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800b87e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800b882:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b886:	fbb2 f3f3 	udiv	r3, r2, r3
 800b88a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800b88e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b892:	2b09      	cmp	r3, #9
 800b894:	d90b      	bls.n	800b8ae <f_printf+0x332>
 800b896:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b89a:	2b78      	cmp	r3, #120	; 0x78
 800b89c:	d101      	bne.n	800b8a2 <f_printf+0x326>
 800b89e:	2227      	movs	r2, #39	; 0x27
 800b8a0:	e000      	b.n	800b8a4 <f_printf+0x328>
 800b8a2:	2207      	movs	r2, #7
 800b8a4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b8a8:	4413      	add	r3, r2
 800b8aa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800b8ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b8b2:	1c5a      	adds	r2, r3, #1
 800b8b4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b8b8:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b8bc:	3230      	adds	r2, #48	; 0x30
 800b8be:	b2d2      	uxtb	r2, r2
 800b8c0:	3398      	adds	r3, #152	; 0x98
 800b8c2:	443b      	add	r3, r7
 800b8c4:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800b8c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d003      	beq.n	800b8d8 <f_printf+0x35c>
 800b8d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b8d4:	2b1f      	cmp	r3, #31
 800b8d6:	d9c7      	bls.n	800b868 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800b8d8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b8dc:	f003 0308 	and.w	r3, r3, #8
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d009      	beq.n	800b8f8 <f_printf+0x37c>
 800b8e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b8e8:	1c5a      	adds	r2, r3, #1
 800b8ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b8ee:	3398      	adds	r3, #152	; 0x98
 800b8f0:	443b      	add	r3, r7
 800b8f2:	222d      	movs	r2, #45	; 0x2d
 800b8f4:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800b8f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b8fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b900:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b904:	f003 0301 	and.w	r3, r3, #1
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d001      	beq.n	800b910 <f_printf+0x394>
 800b90c:	2330      	movs	r3, #48	; 0x30
 800b90e:	e000      	b.n	800b912 <f_printf+0x396>
 800b910:	2320      	movs	r3, #32
 800b912:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800b916:	e007      	b.n	800b928 <f_printf+0x3ac>
 800b918:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b91c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b920:	4611      	mov	r1, r2
 800b922:	4618      	mov	r0, r3
 800b924:	f7ff fdb3 	bl	800b48e <putc_bfd>
 800b928:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b92c:	f003 0302 	and.w	r3, r3, #2
 800b930:	2b00      	cmp	r3, #0
 800b932:	d108      	bne.n	800b946 <f_printf+0x3ca>
 800b934:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b938:	1c5a      	adds	r2, r3, #1
 800b93a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b93e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b942:	429a      	cmp	r2, r3
 800b944:	d8e8      	bhi.n	800b918 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800b946:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b94a:	3b01      	subs	r3, #1
 800b94c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b950:	f107 020c 	add.w	r2, r7, #12
 800b954:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b958:	4413      	add	r3, r2
 800b95a:	781a      	ldrb	r2, [r3, #0]
 800b95c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b960:	4611      	mov	r1, r2
 800b962:	4618      	mov	r0, r3
 800b964:	f7ff fd93 	bl	800b48e <putc_bfd>
		} while (i);
 800b968:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d1ea      	bne.n	800b946 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800b970:	e007      	b.n	800b982 <f_printf+0x406>
 800b972:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b976:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b97a:	4611      	mov	r1, r2
 800b97c:	4618      	mov	r0, r3
 800b97e:	f7ff fd86 	bl	800b48e <putc_bfd>
 800b982:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b986:	1c5a      	adds	r2, r3, #1
 800b988:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b98c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b990:	429a      	cmp	r2, r3
 800b992:	d8ee      	bhi.n	800b972 <f_printf+0x3f6>
		c = *fmt++;
 800b994:	e600      	b.n	800b598 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800b996:	bf00      	nop
 800b998:	e000      	b.n	800b99c <f_printf+0x420>
		if (!c) break;
 800b99a:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800b99c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7ff fdb1 	bl	800b508 <putc_flush>
 800b9a6:	4603      	mov	r3, r0
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	379c      	adds	r7, #156	; 0x9c
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b9b2:	b003      	add	sp, #12
 800b9b4:	4770      	bx	lr
 800b9b6:	bf00      	nop

0800b9b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b087      	sub	sp, #28
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	60b9      	str	r1, [r7, #8]
 800b9c2:	4613      	mov	r3, r2
 800b9c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b9ce:	4b1f      	ldr	r3, [pc, #124]	; (800ba4c <FATFS_LinkDriverEx+0x94>)
 800b9d0:	7a5b      	ldrb	r3, [r3, #9]
 800b9d2:	b2db      	uxtb	r3, r3
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d131      	bne.n	800ba3c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b9d8:	4b1c      	ldr	r3, [pc, #112]	; (800ba4c <FATFS_LinkDriverEx+0x94>)
 800b9da:	7a5b      	ldrb	r3, [r3, #9]
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	461a      	mov	r2, r3
 800b9e0:	4b1a      	ldr	r3, [pc, #104]	; (800ba4c <FATFS_LinkDriverEx+0x94>)
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b9e6:	4b19      	ldr	r3, [pc, #100]	; (800ba4c <FATFS_LinkDriverEx+0x94>)
 800b9e8:	7a5b      	ldrb	r3, [r3, #9]
 800b9ea:	b2db      	uxtb	r3, r3
 800b9ec:	4a17      	ldr	r2, [pc, #92]	; (800ba4c <FATFS_LinkDriverEx+0x94>)
 800b9ee:	009b      	lsls	r3, r3, #2
 800b9f0:	4413      	add	r3, r2
 800b9f2:	68fa      	ldr	r2, [r7, #12]
 800b9f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b9f6:	4b15      	ldr	r3, [pc, #84]	; (800ba4c <FATFS_LinkDriverEx+0x94>)
 800b9f8:	7a5b      	ldrb	r3, [r3, #9]
 800b9fa:	b2db      	uxtb	r3, r3
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	4b13      	ldr	r3, [pc, #76]	; (800ba4c <FATFS_LinkDriverEx+0x94>)
 800ba00:	4413      	add	r3, r2
 800ba02:	79fa      	ldrb	r2, [r7, #7]
 800ba04:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ba06:	4b11      	ldr	r3, [pc, #68]	; (800ba4c <FATFS_LinkDriverEx+0x94>)
 800ba08:	7a5b      	ldrb	r3, [r3, #9]
 800ba0a:	b2db      	uxtb	r3, r3
 800ba0c:	1c5a      	adds	r2, r3, #1
 800ba0e:	b2d1      	uxtb	r1, r2
 800ba10:	4a0e      	ldr	r2, [pc, #56]	; (800ba4c <FATFS_LinkDriverEx+0x94>)
 800ba12:	7251      	strb	r1, [r2, #9]
 800ba14:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ba16:	7dbb      	ldrb	r3, [r7, #22]
 800ba18:	3330      	adds	r3, #48	; 0x30
 800ba1a:	b2da      	uxtb	r2, r3
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	3301      	adds	r3, #1
 800ba24:	223a      	movs	r2, #58	; 0x3a
 800ba26:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	3302      	adds	r3, #2
 800ba2c:	222f      	movs	r2, #47	; 0x2f
 800ba2e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	3303      	adds	r3, #3
 800ba34:	2200      	movs	r2, #0
 800ba36:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ba3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	371c      	adds	r7, #28
 800ba42:	46bd      	mov	sp, r7
 800ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba48:	4770      	bx	lr
 800ba4a:	bf00      	nop
 800ba4c:	20000ac4 	.word	0x20000ac4

0800ba50 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b082      	sub	sp, #8
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	6839      	ldr	r1, [r7, #0]
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f7ff ffaa 	bl	800b9b8 <FATFS_LinkDriverEx>
 800ba64:	4603      	mov	r3, r0
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3708      	adds	r7, #8
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
	...

0800ba70 <__errno>:
 800ba70:	4b01      	ldr	r3, [pc, #4]	; (800ba78 <__errno+0x8>)
 800ba72:	6818      	ldr	r0, [r3, #0]
 800ba74:	4770      	bx	lr
 800ba76:	bf00      	nop
 800ba78:	20000110 	.word	0x20000110

0800ba7c <__libc_init_array>:
 800ba7c:	b570      	push	{r4, r5, r6, lr}
 800ba7e:	4d0d      	ldr	r5, [pc, #52]	; (800bab4 <__libc_init_array+0x38>)
 800ba80:	4c0d      	ldr	r4, [pc, #52]	; (800bab8 <__libc_init_array+0x3c>)
 800ba82:	1b64      	subs	r4, r4, r5
 800ba84:	10a4      	asrs	r4, r4, #2
 800ba86:	2600      	movs	r6, #0
 800ba88:	42a6      	cmp	r6, r4
 800ba8a:	d109      	bne.n	800baa0 <__libc_init_array+0x24>
 800ba8c:	4d0b      	ldr	r5, [pc, #44]	; (800babc <__libc_init_array+0x40>)
 800ba8e:	4c0c      	ldr	r4, [pc, #48]	; (800bac0 <__libc_init_array+0x44>)
 800ba90:	f002 ff26 	bl	800e8e0 <_init>
 800ba94:	1b64      	subs	r4, r4, r5
 800ba96:	10a4      	asrs	r4, r4, #2
 800ba98:	2600      	movs	r6, #0
 800ba9a:	42a6      	cmp	r6, r4
 800ba9c:	d105      	bne.n	800baaa <__libc_init_array+0x2e>
 800ba9e:	bd70      	pop	{r4, r5, r6, pc}
 800baa0:	f855 3b04 	ldr.w	r3, [r5], #4
 800baa4:	4798      	blx	r3
 800baa6:	3601      	adds	r6, #1
 800baa8:	e7ee      	b.n	800ba88 <__libc_init_array+0xc>
 800baaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800baae:	4798      	blx	r3
 800bab0:	3601      	adds	r6, #1
 800bab2:	e7f2      	b.n	800ba9a <__libc_init_array+0x1e>
 800bab4:	0800f0e4 	.word	0x0800f0e4
 800bab8:	0800f0e4 	.word	0x0800f0e4
 800babc:	0800f0e4 	.word	0x0800f0e4
 800bac0:	0800f0e8 	.word	0x0800f0e8

0800bac4 <memset>:
 800bac4:	4402      	add	r2, r0
 800bac6:	4603      	mov	r3, r0
 800bac8:	4293      	cmp	r3, r2
 800baca:	d100      	bne.n	800bace <memset+0xa>
 800bacc:	4770      	bx	lr
 800bace:	f803 1b01 	strb.w	r1, [r3], #1
 800bad2:	e7f9      	b.n	800bac8 <memset+0x4>

0800bad4 <__cvt>:
 800bad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bad8:	ec55 4b10 	vmov	r4, r5, d0
 800badc:	2d00      	cmp	r5, #0
 800bade:	460e      	mov	r6, r1
 800bae0:	4619      	mov	r1, r3
 800bae2:	462b      	mov	r3, r5
 800bae4:	bfbb      	ittet	lt
 800bae6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800baea:	461d      	movlt	r5, r3
 800baec:	2300      	movge	r3, #0
 800baee:	232d      	movlt	r3, #45	; 0x2d
 800baf0:	700b      	strb	r3, [r1, #0]
 800baf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800baf4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800baf8:	4691      	mov	r9, r2
 800bafa:	f023 0820 	bic.w	r8, r3, #32
 800bafe:	bfbc      	itt	lt
 800bb00:	4622      	movlt	r2, r4
 800bb02:	4614      	movlt	r4, r2
 800bb04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bb08:	d005      	beq.n	800bb16 <__cvt+0x42>
 800bb0a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bb0e:	d100      	bne.n	800bb12 <__cvt+0x3e>
 800bb10:	3601      	adds	r6, #1
 800bb12:	2102      	movs	r1, #2
 800bb14:	e000      	b.n	800bb18 <__cvt+0x44>
 800bb16:	2103      	movs	r1, #3
 800bb18:	ab03      	add	r3, sp, #12
 800bb1a:	9301      	str	r3, [sp, #4]
 800bb1c:	ab02      	add	r3, sp, #8
 800bb1e:	9300      	str	r3, [sp, #0]
 800bb20:	ec45 4b10 	vmov	d0, r4, r5
 800bb24:	4653      	mov	r3, sl
 800bb26:	4632      	mov	r2, r6
 800bb28:	f000 fcea 	bl	800c500 <_dtoa_r>
 800bb2c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bb30:	4607      	mov	r7, r0
 800bb32:	d102      	bne.n	800bb3a <__cvt+0x66>
 800bb34:	f019 0f01 	tst.w	r9, #1
 800bb38:	d022      	beq.n	800bb80 <__cvt+0xac>
 800bb3a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bb3e:	eb07 0906 	add.w	r9, r7, r6
 800bb42:	d110      	bne.n	800bb66 <__cvt+0x92>
 800bb44:	783b      	ldrb	r3, [r7, #0]
 800bb46:	2b30      	cmp	r3, #48	; 0x30
 800bb48:	d10a      	bne.n	800bb60 <__cvt+0x8c>
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	4620      	mov	r0, r4
 800bb50:	4629      	mov	r1, r5
 800bb52:	f7f4 ffc1 	bl	8000ad8 <__aeabi_dcmpeq>
 800bb56:	b918      	cbnz	r0, 800bb60 <__cvt+0x8c>
 800bb58:	f1c6 0601 	rsb	r6, r6, #1
 800bb5c:	f8ca 6000 	str.w	r6, [sl]
 800bb60:	f8da 3000 	ldr.w	r3, [sl]
 800bb64:	4499      	add	r9, r3
 800bb66:	2200      	movs	r2, #0
 800bb68:	2300      	movs	r3, #0
 800bb6a:	4620      	mov	r0, r4
 800bb6c:	4629      	mov	r1, r5
 800bb6e:	f7f4 ffb3 	bl	8000ad8 <__aeabi_dcmpeq>
 800bb72:	b108      	cbz	r0, 800bb78 <__cvt+0xa4>
 800bb74:	f8cd 900c 	str.w	r9, [sp, #12]
 800bb78:	2230      	movs	r2, #48	; 0x30
 800bb7a:	9b03      	ldr	r3, [sp, #12]
 800bb7c:	454b      	cmp	r3, r9
 800bb7e:	d307      	bcc.n	800bb90 <__cvt+0xbc>
 800bb80:	9b03      	ldr	r3, [sp, #12]
 800bb82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb84:	1bdb      	subs	r3, r3, r7
 800bb86:	4638      	mov	r0, r7
 800bb88:	6013      	str	r3, [r2, #0]
 800bb8a:	b004      	add	sp, #16
 800bb8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb90:	1c59      	adds	r1, r3, #1
 800bb92:	9103      	str	r1, [sp, #12]
 800bb94:	701a      	strb	r2, [r3, #0]
 800bb96:	e7f0      	b.n	800bb7a <__cvt+0xa6>

0800bb98 <__exponent>:
 800bb98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2900      	cmp	r1, #0
 800bb9e:	bfb8      	it	lt
 800bba0:	4249      	neglt	r1, r1
 800bba2:	f803 2b02 	strb.w	r2, [r3], #2
 800bba6:	bfb4      	ite	lt
 800bba8:	222d      	movlt	r2, #45	; 0x2d
 800bbaa:	222b      	movge	r2, #43	; 0x2b
 800bbac:	2909      	cmp	r1, #9
 800bbae:	7042      	strb	r2, [r0, #1]
 800bbb0:	dd2a      	ble.n	800bc08 <__exponent+0x70>
 800bbb2:	f10d 0407 	add.w	r4, sp, #7
 800bbb6:	46a4      	mov	ip, r4
 800bbb8:	270a      	movs	r7, #10
 800bbba:	46a6      	mov	lr, r4
 800bbbc:	460a      	mov	r2, r1
 800bbbe:	fb91 f6f7 	sdiv	r6, r1, r7
 800bbc2:	fb07 1516 	mls	r5, r7, r6, r1
 800bbc6:	3530      	adds	r5, #48	; 0x30
 800bbc8:	2a63      	cmp	r2, #99	; 0x63
 800bbca:	f104 34ff 	add.w	r4, r4, #4294967295
 800bbce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bbd2:	4631      	mov	r1, r6
 800bbd4:	dcf1      	bgt.n	800bbba <__exponent+0x22>
 800bbd6:	3130      	adds	r1, #48	; 0x30
 800bbd8:	f1ae 0502 	sub.w	r5, lr, #2
 800bbdc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bbe0:	1c44      	adds	r4, r0, #1
 800bbe2:	4629      	mov	r1, r5
 800bbe4:	4561      	cmp	r1, ip
 800bbe6:	d30a      	bcc.n	800bbfe <__exponent+0x66>
 800bbe8:	f10d 0209 	add.w	r2, sp, #9
 800bbec:	eba2 020e 	sub.w	r2, r2, lr
 800bbf0:	4565      	cmp	r5, ip
 800bbf2:	bf88      	it	hi
 800bbf4:	2200      	movhi	r2, #0
 800bbf6:	4413      	add	r3, r2
 800bbf8:	1a18      	subs	r0, r3, r0
 800bbfa:	b003      	add	sp, #12
 800bbfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc02:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bc06:	e7ed      	b.n	800bbe4 <__exponent+0x4c>
 800bc08:	2330      	movs	r3, #48	; 0x30
 800bc0a:	3130      	adds	r1, #48	; 0x30
 800bc0c:	7083      	strb	r3, [r0, #2]
 800bc0e:	70c1      	strb	r1, [r0, #3]
 800bc10:	1d03      	adds	r3, r0, #4
 800bc12:	e7f1      	b.n	800bbf8 <__exponent+0x60>

0800bc14 <_printf_float>:
 800bc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc18:	ed2d 8b02 	vpush	{d8}
 800bc1c:	b08d      	sub	sp, #52	; 0x34
 800bc1e:	460c      	mov	r4, r1
 800bc20:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bc24:	4616      	mov	r6, r2
 800bc26:	461f      	mov	r7, r3
 800bc28:	4605      	mov	r5, r0
 800bc2a:	f001 fa57 	bl	800d0dc <_localeconv_r>
 800bc2e:	f8d0 a000 	ldr.w	sl, [r0]
 800bc32:	4650      	mov	r0, sl
 800bc34:	f7f4 fad4 	bl	80001e0 <strlen>
 800bc38:	2300      	movs	r3, #0
 800bc3a:	930a      	str	r3, [sp, #40]	; 0x28
 800bc3c:	6823      	ldr	r3, [r4, #0]
 800bc3e:	9305      	str	r3, [sp, #20]
 800bc40:	f8d8 3000 	ldr.w	r3, [r8]
 800bc44:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bc48:	3307      	adds	r3, #7
 800bc4a:	f023 0307 	bic.w	r3, r3, #7
 800bc4e:	f103 0208 	add.w	r2, r3, #8
 800bc52:	f8c8 2000 	str.w	r2, [r8]
 800bc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bc5e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bc62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bc66:	9307      	str	r3, [sp, #28]
 800bc68:	f8cd 8018 	str.w	r8, [sp, #24]
 800bc6c:	ee08 0a10 	vmov	s16, r0
 800bc70:	4b9f      	ldr	r3, [pc, #636]	; (800bef0 <_printf_float+0x2dc>)
 800bc72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc76:	f04f 32ff 	mov.w	r2, #4294967295
 800bc7a:	f7f4 ff5f 	bl	8000b3c <__aeabi_dcmpun>
 800bc7e:	bb88      	cbnz	r0, 800bce4 <_printf_float+0xd0>
 800bc80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc84:	4b9a      	ldr	r3, [pc, #616]	; (800bef0 <_printf_float+0x2dc>)
 800bc86:	f04f 32ff 	mov.w	r2, #4294967295
 800bc8a:	f7f4 ff39 	bl	8000b00 <__aeabi_dcmple>
 800bc8e:	bb48      	cbnz	r0, 800bce4 <_printf_float+0xd0>
 800bc90:	2200      	movs	r2, #0
 800bc92:	2300      	movs	r3, #0
 800bc94:	4640      	mov	r0, r8
 800bc96:	4649      	mov	r1, r9
 800bc98:	f7f4 ff28 	bl	8000aec <__aeabi_dcmplt>
 800bc9c:	b110      	cbz	r0, 800bca4 <_printf_float+0x90>
 800bc9e:	232d      	movs	r3, #45	; 0x2d
 800bca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bca4:	4b93      	ldr	r3, [pc, #588]	; (800bef4 <_printf_float+0x2e0>)
 800bca6:	4894      	ldr	r0, [pc, #592]	; (800bef8 <_printf_float+0x2e4>)
 800bca8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bcac:	bf94      	ite	ls
 800bcae:	4698      	movls	r8, r3
 800bcb0:	4680      	movhi	r8, r0
 800bcb2:	2303      	movs	r3, #3
 800bcb4:	6123      	str	r3, [r4, #16]
 800bcb6:	9b05      	ldr	r3, [sp, #20]
 800bcb8:	f023 0204 	bic.w	r2, r3, #4
 800bcbc:	6022      	str	r2, [r4, #0]
 800bcbe:	f04f 0900 	mov.w	r9, #0
 800bcc2:	9700      	str	r7, [sp, #0]
 800bcc4:	4633      	mov	r3, r6
 800bcc6:	aa0b      	add	r2, sp, #44	; 0x2c
 800bcc8:	4621      	mov	r1, r4
 800bcca:	4628      	mov	r0, r5
 800bccc:	f000 f9d8 	bl	800c080 <_printf_common>
 800bcd0:	3001      	adds	r0, #1
 800bcd2:	f040 8090 	bne.w	800bdf6 <_printf_float+0x1e2>
 800bcd6:	f04f 30ff 	mov.w	r0, #4294967295
 800bcda:	b00d      	add	sp, #52	; 0x34
 800bcdc:	ecbd 8b02 	vpop	{d8}
 800bce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bce4:	4642      	mov	r2, r8
 800bce6:	464b      	mov	r3, r9
 800bce8:	4640      	mov	r0, r8
 800bcea:	4649      	mov	r1, r9
 800bcec:	f7f4 ff26 	bl	8000b3c <__aeabi_dcmpun>
 800bcf0:	b140      	cbz	r0, 800bd04 <_printf_float+0xf0>
 800bcf2:	464b      	mov	r3, r9
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	bfbc      	itt	lt
 800bcf8:	232d      	movlt	r3, #45	; 0x2d
 800bcfa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bcfe:	487f      	ldr	r0, [pc, #508]	; (800befc <_printf_float+0x2e8>)
 800bd00:	4b7f      	ldr	r3, [pc, #508]	; (800bf00 <_printf_float+0x2ec>)
 800bd02:	e7d1      	b.n	800bca8 <_printf_float+0x94>
 800bd04:	6863      	ldr	r3, [r4, #4]
 800bd06:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bd0a:	9206      	str	r2, [sp, #24]
 800bd0c:	1c5a      	adds	r2, r3, #1
 800bd0e:	d13f      	bne.n	800bd90 <_printf_float+0x17c>
 800bd10:	2306      	movs	r3, #6
 800bd12:	6063      	str	r3, [r4, #4]
 800bd14:	9b05      	ldr	r3, [sp, #20]
 800bd16:	6861      	ldr	r1, [r4, #4]
 800bd18:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	9303      	str	r3, [sp, #12]
 800bd20:	ab0a      	add	r3, sp, #40	; 0x28
 800bd22:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bd26:	ab09      	add	r3, sp, #36	; 0x24
 800bd28:	ec49 8b10 	vmov	d0, r8, r9
 800bd2c:	9300      	str	r3, [sp, #0]
 800bd2e:	6022      	str	r2, [r4, #0]
 800bd30:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bd34:	4628      	mov	r0, r5
 800bd36:	f7ff fecd 	bl	800bad4 <__cvt>
 800bd3a:	9b06      	ldr	r3, [sp, #24]
 800bd3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd3e:	2b47      	cmp	r3, #71	; 0x47
 800bd40:	4680      	mov	r8, r0
 800bd42:	d108      	bne.n	800bd56 <_printf_float+0x142>
 800bd44:	1cc8      	adds	r0, r1, #3
 800bd46:	db02      	blt.n	800bd4e <_printf_float+0x13a>
 800bd48:	6863      	ldr	r3, [r4, #4]
 800bd4a:	4299      	cmp	r1, r3
 800bd4c:	dd41      	ble.n	800bdd2 <_printf_float+0x1be>
 800bd4e:	f1ab 0b02 	sub.w	fp, fp, #2
 800bd52:	fa5f fb8b 	uxtb.w	fp, fp
 800bd56:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bd5a:	d820      	bhi.n	800bd9e <_printf_float+0x18a>
 800bd5c:	3901      	subs	r1, #1
 800bd5e:	465a      	mov	r2, fp
 800bd60:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bd64:	9109      	str	r1, [sp, #36]	; 0x24
 800bd66:	f7ff ff17 	bl	800bb98 <__exponent>
 800bd6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd6c:	1813      	adds	r3, r2, r0
 800bd6e:	2a01      	cmp	r2, #1
 800bd70:	4681      	mov	r9, r0
 800bd72:	6123      	str	r3, [r4, #16]
 800bd74:	dc02      	bgt.n	800bd7c <_printf_float+0x168>
 800bd76:	6822      	ldr	r2, [r4, #0]
 800bd78:	07d2      	lsls	r2, r2, #31
 800bd7a:	d501      	bpl.n	800bd80 <_printf_float+0x16c>
 800bd7c:	3301      	adds	r3, #1
 800bd7e:	6123      	str	r3, [r4, #16]
 800bd80:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d09c      	beq.n	800bcc2 <_printf_float+0xae>
 800bd88:	232d      	movs	r3, #45	; 0x2d
 800bd8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd8e:	e798      	b.n	800bcc2 <_printf_float+0xae>
 800bd90:	9a06      	ldr	r2, [sp, #24]
 800bd92:	2a47      	cmp	r2, #71	; 0x47
 800bd94:	d1be      	bne.n	800bd14 <_printf_float+0x100>
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d1bc      	bne.n	800bd14 <_printf_float+0x100>
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	e7b9      	b.n	800bd12 <_printf_float+0xfe>
 800bd9e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bda2:	d118      	bne.n	800bdd6 <_printf_float+0x1c2>
 800bda4:	2900      	cmp	r1, #0
 800bda6:	6863      	ldr	r3, [r4, #4]
 800bda8:	dd0b      	ble.n	800bdc2 <_printf_float+0x1ae>
 800bdaa:	6121      	str	r1, [r4, #16]
 800bdac:	b913      	cbnz	r3, 800bdb4 <_printf_float+0x1a0>
 800bdae:	6822      	ldr	r2, [r4, #0]
 800bdb0:	07d0      	lsls	r0, r2, #31
 800bdb2:	d502      	bpl.n	800bdba <_printf_float+0x1a6>
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	440b      	add	r3, r1
 800bdb8:	6123      	str	r3, [r4, #16]
 800bdba:	65a1      	str	r1, [r4, #88]	; 0x58
 800bdbc:	f04f 0900 	mov.w	r9, #0
 800bdc0:	e7de      	b.n	800bd80 <_printf_float+0x16c>
 800bdc2:	b913      	cbnz	r3, 800bdca <_printf_float+0x1b6>
 800bdc4:	6822      	ldr	r2, [r4, #0]
 800bdc6:	07d2      	lsls	r2, r2, #31
 800bdc8:	d501      	bpl.n	800bdce <_printf_float+0x1ba>
 800bdca:	3302      	adds	r3, #2
 800bdcc:	e7f4      	b.n	800bdb8 <_printf_float+0x1a4>
 800bdce:	2301      	movs	r3, #1
 800bdd0:	e7f2      	b.n	800bdb8 <_printf_float+0x1a4>
 800bdd2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bdd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdd8:	4299      	cmp	r1, r3
 800bdda:	db05      	blt.n	800bde8 <_printf_float+0x1d4>
 800bddc:	6823      	ldr	r3, [r4, #0]
 800bdde:	6121      	str	r1, [r4, #16]
 800bde0:	07d8      	lsls	r0, r3, #31
 800bde2:	d5ea      	bpl.n	800bdba <_printf_float+0x1a6>
 800bde4:	1c4b      	adds	r3, r1, #1
 800bde6:	e7e7      	b.n	800bdb8 <_printf_float+0x1a4>
 800bde8:	2900      	cmp	r1, #0
 800bdea:	bfd4      	ite	le
 800bdec:	f1c1 0202 	rsble	r2, r1, #2
 800bdf0:	2201      	movgt	r2, #1
 800bdf2:	4413      	add	r3, r2
 800bdf4:	e7e0      	b.n	800bdb8 <_printf_float+0x1a4>
 800bdf6:	6823      	ldr	r3, [r4, #0]
 800bdf8:	055a      	lsls	r2, r3, #21
 800bdfa:	d407      	bmi.n	800be0c <_printf_float+0x1f8>
 800bdfc:	6923      	ldr	r3, [r4, #16]
 800bdfe:	4642      	mov	r2, r8
 800be00:	4631      	mov	r1, r6
 800be02:	4628      	mov	r0, r5
 800be04:	47b8      	blx	r7
 800be06:	3001      	adds	r0, #1
 800be08:	d12c      	bne.n	800be64 <_printf_float+0x250>
 800be0a:	e764      	b.n	800bcd6 <_printf_float+0xc2>
 800be0c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800be10:	f240 80e0 	bls.w	800bfd4 <_printf_float+0x3c0>
 800be14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be18:	2200      	movs	r2, #0
 800be1a:	2300      	movs	r3, #0
 800be1c:	f7f4 fe5c 	bl	8000ad8 <__aeabi_dcmpeq>
 800be20:	2800      	cmp	r0, #0
 800be22:	d034      	beq.n	800be8e <_printf_float+0x27a>
 800be24:	4a37      	ldr	r2, [pc, #220]	; (800bf04 <_printf_float+0x2f0>)
 800be26:	2301      	movs	r3, #1
 800be28:	4631      	mov	r1, r6
 800be2a:	4628      	mov	r0, r5
 800be2c:	47b8      	blx	r7
 800be2e:	3001      	adds	r0, #1
 800be30:	f43f af51 	beq.w	800bcd6 <_printf_float+0xc2>
 800be34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be38:	429a      	cmp	r2, r3
 800be3a:	db02      	blt.n	800be42 <_printf_float+0x22e>
 800be3c:	6823      	ldr	r3, [r4, #0]
 800be3e:	07d8      	lsls	r0, r3, #31
 800be40:	d510      	bpl.n	800be64 <_printf_float+0x250>
 800be42:	ee18 3a10 	vmov	r3, s16
 800be46:	4652      	mov	r2, sl
 800be48:	4631      	mov	r1, r6
 800be4a:	4628      	mov	r0, r5
 800be4c:	47b8      	blx	r7
 800be4e:	3001      	adds	r0, #1
 800be50:	f43f af41 	beq.w	800bcd6 <_printf_float+0xc2>
 800be54:	f04f 0800 	mov.w	r8, #0
 800be58:	f104 091a 	add.w	r9, r4, #26
 800be5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be5e:	3b01      	subs	r3, #1
 800be60:	4543      	cmp	r3, r8
 800be62:	dc09      	bgt.n	800be78 <_printf_float+0x264>
 800be64:	6823      	ldr	r3, [r4, #0]
 800be66:	079b      	lsls	r3, r3, #30
 800be68:	f100 8105 	bmi.w	800c076 <_printf_float+0x462>
 800be6c:	68e0      	ldr	r0, [r4, #12]
 800be6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be70:	4298      	cmp	r0, r3
 800be72:	bfb8      	it	lt
 800be74:	4618      	movlt	r0, r3
 800be76:	e730      	b.n	800bcda <_printf_float+0xc6>
 800be78:	2301      	movs	r3, #1
 800be7a:	464a      	mov	r2, r9
 800be7c:	4631      	mov	r1, r6
 800be7e:	4628      	mov	r0, r5
 800be80:	47b8      	blx	r7
 800be82:	3001      	adds	r0, #1
 800be84:	f43f af27 	beq.w	800bcd6 <_printf_float+0xc2>
 800be88:	f108 0801 	add.w	r8, r8, #1
 800be8c:	e7e6      	b.n	800be5c <_printf_float+0x248>
 800be8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be90:	2b00      	cmp	r3, #0
 800be92:	dc39      	bgt.n	800bf08 <_printf_float+0x2f4>
 800be94:	4a1b      	ldr	r2, [pc, #108]	; (800bf04 <_printf_float+0x2f0>)
 800be96:	2301      	movs	r3, #1
 800be98:	4631      	mov	r1, r6
 800be9a:	4628      	mov	r0, r5
 800be9c:	47b8      	blx	r7
 800be9e:	3001      	adds	r0, #1
 800bea0:	f43f af19 	beq.w	800bcd6 <_printf_float+0xc2>
 800bea4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bea8:	4313      	orrs	r3, r2
 800beaa:	d102      	bne.n	800beb2 <_printf_float+0x29e>
 800beac:	6823      	ldr	r3, [r4, #0]
 800beae:	07d9      	lsls	r1, r3, #31
 800beb0:	d5d8      	bpl.n	800be64 <_printf_float+0x250>
 800beb2:	ee18 3a10 	vmov	r3, s16
 800beb6:	4652      	mov	r2, sl
 800beb8:	4631      	mov	r1, r6
 800beba:	4628      	mov	r0, r5
 800bebc:	47b8      	blx	r7
 800bebe:	3001      	adds	r0, #1
 800bec0:	f43f af09 	beq.w	800bcd6 <_printf_float+0xc2>
 800bec4:	f04f 0900 	mov.w	r9, #0
 800bec8:	f104 0a1a 	add.w	sl, r4, #26
 800becc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bece:	425b      	negs	r3, r3
 800bed0:	454b      	cmp	r3, r9
 800bed2:	dc01      	bgt.n	800bed8 <_printf_float+0x2c4>
 800bed4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bed6:	e792      	b.n	800bdfe <_printf_float+0x1ea>
 800bed8:	2301      	movs	r3, #1
 800beda:	4652      	mov	r2, sl
 800bedc:	4631      	mov	r1, r6
 800bede:	4628      	mov	r0, r5
 800bee0:	47b8      	blx	r7
 800bee2:	3001      	adds	r0, #1
 800bee4:	f43f aef7 	beq.w	800bcd6 <_printf_float+0xc2>
 800bee8:	f109 0901 	add.w	r9, r9, #1
 800beec:	e7ee      	b.n	800becc <_printf_float+0x2b8>
 800beee:	bf00      	nop
 800bef0:	7fefffff 	.word	0x7fefffff
 800bef4:	0800ed08 	.word	0x0800ed08
 800bef8:	0800ed0c 	.word	0x0800ed0c
 800befc:	0800ed14 	.word	0x0800ed14
 800bf00:	0800ed10 	.word	0x0800ed10
 800bf04:	0800ed18 	.word	0x0800ed18
 800bf08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	bfa8      	it	ge
 800bf10:	461a      	movge	r2, r3
 800bf12:	2a00      	cmp	r2, #0
 800bf14:	4691      	mov	r9, r2
 800bf16:	dc37      	bgt.n	800bf88 <_printf_float+0x374>
 800bf18:	f04f 0b00 	mov.w	fp, #0
 800bf1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf20:	f104 021a 	add.w	r2, r4, #26
 800bf24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf26:	9305      	str	r3, [sp, #20]
 800bf28:	eba3 0309 	sub.w	r3, r3, r9
 800bf2c:	455b      	cmp	r3, fp
 800bf2e:	dc33      	bgt.n	800bf98 <_printf_float+0x384>
 800bf30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf34:	429a      	cmp	r2, r3
 800bf36:	db3b      	blt.n	800bfb0 <_printf_float+0x39c>
 800bf38:	6823      	ldr	r3, [r4, #0]
 800bf3a:	07da      	lsls	r2, r3, #31
 800bf3c:	d438      	bmi.n	800bfb0 <_printf_float+0x39c>
 800bf3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf40:	9a05      	ldr	r2, [sp, #20]
 800bf42:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf44:	1a9a      	subs	r2, r3, r2
 800bf46:	eba3 0901 	sub.w	r9, r3, r1
 800bf4a:	4591      	cmp	r9, r2
 800bf4c:	bfa8      	it	ge
 800bf4e:	4691      	movge	r9, r2
 800bf50:	f1b9 0f00 	cmp.w	r9, #0
 800bf54:	dc35      	bgt.n	800bfc2 <_printf_float+0x3ae>
 800bf56:	f04f 0800 	mov.w	r8, #0
 800bf5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf5e:	f104 0a1a 	add.w	sl, r4, #26
 800bf62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf66:	1a9b      	subs	r3, r3, r2
 800bf68:	eba3 0309 	sub.w	r3, r3, r9
 800bf6c:	4543      	cmp	r3, r8
 800bf6e:	f77f af79 	ble.w	800be64 <_printf_float+0x250>
 800bf72:	2301      	movs	r3, #1
 800bf74:	4652      	mov	r2, sl
 800bf76:	4631      	mov	r1, r6
 800bf78:	4628      	mov	r0, r5
 800bf7a:	47b8      	blx	r7
 800bf7c:	3001      	adds	r0, #1
 800bf7e:	f43f aeaa 	beq.w	800bcd6 <_printf_float+0xc2>
 800bf82:	f108 0801 	add.w	r8, r8, #1
 800bf86:	e7ec      	b.n	800bf62 <_printf_float+0x34e>
 800bf88:	4613      	mov	r3, r2
 800bf8a:	4631      	mov	r1, r6
 800bf8c:	4642      	mov	r2, r8
 800bf8e:	4628      	mov	r0, r5
 800bf90:	47b8      	blx	r7
 800bf92:	3001      	adds	r0, #1
 800bf94:	d1c0      	bne.n	800bf18 <_printf_float+0x304>
 800bf96:	e69e      	b.n	800bcd6 <_printf_float+0xc2>
 800bf98:	2301      	movs	r3, #1
 800bf9a:	4631      	mov	r1, r6
 800bf9c:	4628      	mov	r0, r5
 800bf9e:	9205      	str	r2, [sp, #20]
 800bfa0:	47b8      	blx	r7
 800bfa2:	3001      	adds	r0, #1
 800bfa4:	f43f ae97 	beq.w	800bcd6 <_printf_float+0xc2>
 800bfa8:	9a05      	ldr	r2, [sp, #20]
 800bfaa:	f10b 0b01 	add.w	fp, fp, #1
 800bfae:	e7b9      	b.n	800bf24 <_printf_float+0x310>
 800bfb0:	ee18 3a10 	vmov	r3, s16
 800bfb4:	4652      	mov	r2, sl
 800bfb6:	4631      	mov	r1, r6
 800bfb8:	4628      	mov	r0, r5
 800bfba:	47b8      	blx	r7
 800bfbc:	3001      	adds	r0, #1
 800bfbe:	d1be      	bne.n	800bf3e <_printf_float+0x32a>
 800bfc0:	e689      	b.n	800bcd6 <_printf_float+0xc2>
 800bfc2:	9a05      	ldr	r2, [sp, #20]
 800bfc4:	464b      	mov	r3, r9
 800bfc6:	4442      	add	r2, r8
 800bfc8:	4631      	mov	r1, r6
 800bfca:	4628      	mov	r0, r5
 800bfcc:	47b8      	blx	r7
 800bfce:	3001      	adds	r0, #1
 800bfd0:	d1c1      	bne.n	800bf56 <_printf_float+0x342>
 800bfd2:	e680      	b.n	800bcd6 <_printf_float+0xc2>
 800bfd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bfd6:	2a01      	cmp	r2, #1
 800bfd8:	dc01      	bgt.n	800bfde <_printf_float+0x3ca>
 800bfda:	07db      	lsls	r3, r3, #31
 800bfdc:	d538      	bpl.n	800c050 <_printf_float+0x43c>
 800bfde:	2301      	movs	r3, #1
 800bfe0:	4642      	mov	r2, r8
 800bfe2:	4631      	mov	r1, r6
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	47b8      	blx	r7
 800bfe8:	3001      	adds	r0, #1
 800bfea:	f43f ae74 	beq.w	800bcd6 <_printf_float+0xc2>
 800bfee:	ee18 3a10 	vmov	r3, s16
 800bff2:	4652      	mov	r2, sl
 800bff4:	4631      	mov	r1, r6
 800bff6:	4628      	mov	r0, r5
 800bff8:	47b8      	blx	r7
 800bffa:	3001      	adds	r0, #1
 800bffc:	f43f ae6b 	beq.w	800bcd6 <_printf_float+0xc2>
 800c000:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c004:	2200      	movs	r2, #0
 800c006:	2300      	movs	r3, #0
 800c008:	f7f4 fd66 	bl	8000ad8 <__aeabi_dcmpeq>
 800c00c:	b9d8      	cbnz	r0, 800c046 <_printf_float+0x432>
 800c00e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c010:	f108 0201 	add.w	r2, r8, #1
 800c014:	3b01      	subs	r3, #1
 800c016:	4631      	mov	r1, r6
 800c018:	4628      	mov	r0, r5
 800c01a:	47b8      	blx	r7
 800c01c:	3001      	adds	r0, #1
 800c01e:	d10e      	bne.n	800c03e <_printf_float+0x42a>
 800c020:	e659      	b.n	800bcd6 <_printf_float+0xc2>
 800c022:	2301      	movs	r3, #1
 800c024:	4652      	mov	r2, sl
 800c026:	4631      	mov	r1, r6
 800c028:	4628      	mov	r0, r5
 800c02a:	47b8      	blx	r7
 800c02c:	3001      	adds	r0, #1
 800c02e:	f43f ae52 	beq.w	800bcd6 <_printf_float+0xc2>
 800c032:	f108 0801 	add.w	r8, r8, #1
 800c036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c038:	3b01      	subs	r3, #1
 800c03a:	4543      	cmp	r3, r8
 800c03c:	dcf1      	bgt.n	800c022 <_printf_float+0x40e>
 800c03e:	464b      	mov	r3, r9
 800c040:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c044:	e6dc      	b.n	800be00 <_printf_float+0x1ec>
 800c046:	f04f 0800 	mov.w	r8, #0
 800c04a:	f104 0a1a 	add.w	sl, r4, #26
 800c04e:	e7f2      	b.n	800c036 <_printf_float+0x422>
 800c050:	2301      	movs	r3, #1
 800c052:	4642      	mov	r2, r8
 800c054:	e7df      	b.n	800c016 <_printf_float+0x402>
 800c056:	2301      	movs	r3, #1
 800c058:	464a      	mov	r2, r9
 800c05a:	4631      	mov	r1, r6
 800c05c:	4628      	mov	r0, r5
 800c05e:	47b8      	blx	r7
 800c060:	3001      	adds	r0, #1
 800c062:	f43f ae38 	beq.w	800bcd6 <_printf_float+0xc2>
 800c066:	f108 0801 	add.w	r8, r8, #1
 800c06a:	68e3      	ldr	r3, [r4, #12]
 800c06c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c06e:	1a5b      	subs	r3, r3, r1
 800c070:	4543      	cmp	r3, r8
 800c072:	dcf0      	bgt.n	800c056 <_printf_float+0x442>
 800c074:	e6fa      	b.n	800be6c <_printf_float+0x258>
 800c076:	f04f 0800 	mov.w	r8, #0
 800c07a:	f104 0919 	add.w	r9, r4, #25
 800c07e:	e7f4      	b.n	800c06a <_printf_float+0x456>

0800c080 <_printf_common>:
 800c080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c084:	4616      	mov	r6, r2
 800c086:	4699      	mov	r9, r3
 800c088:	688a      	ldr	r2, [r1, #8]
 800c08a:	690b      	ldr	r3, [r1, #16]
 800c08c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c090:	4293      	cmp	r3, r2
 800c092:	bfb8      	it	lt
 800c094:	4613      	movlt	r3, r2
 800c096:	6033      	str	r3, [r6, #0]
 800c098:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c09c:	4607      	mov	r7, r0
 800c09e:	460c      	mov	r4, r1
 800c0a0:	b10a      	cbz	r2, 800c0a6 <_printf_common+0x26>
 800c0a2:	3301      	adds	r3, #1
 800c0a4:	6033      	str	r3, [r6, #0]
 800c0a6:	6823      	ldr	r3, [r4, #0]
 800c0a8:	0699      	lsls	r1, r3, #26
 800c0aa:	bf42      	ittt	mi
 800c0ac:	6833      	ldrmi	r3, [r6, #0]
 800c0ae:	3302      	addmi	r3, #2
 800c0b0:	6033      	strmi	r3, [r6, #0]
 800c0b2:	6825      	ldr	r5, [r4, #0]
 800c0b4:	f015 0506 	ands.w	r5, r5, #6
 800c0b8:	d106      	bne.n	800c0c8 <_printf_common+0x48>
 800c0ba:	f104 0a19 	add.w	sl, r4, #25
 800c0be:	68e3      	ldr	r3, [r4, #12]
 800c0c0:	6832      	ldr	r2, [r6, #0]
 800c0c2:	1a9b      	subs	r3, r3, r2
 800c0c4:	42ab      	cmp	r3, r5
 800c0c6:	dc26      	bgt.n	800c116 <_printf_common+0x96>
 800c0c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c0cc:	1e13      	subs	r3, r2, #0
 800c0ce:	6822      	ldr	r2, [r4, #0]
 800c0d0:	bf18      	it	ne
 800c0d2:	2301      	movne	r3, #1
 800c0d4:	0692      	lsls	r2, r2, #26
 800c0d6:	d42b      	bmi.n	800c130 <_printf_common+0xb0>
 800c0d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c0dc:	4649      	mov	r1, r9
 800c0de:	4638      	mov	r0, r7
 800c0e0:	47c0      	blx	r8
 800c0e2:	3001      	adds	r0, #1
 800c0e4:	d01e      	beq.n	800c124 <_printf_common+0xa4>
 800c0e6:	6823      	ldr	r3, [r4, #0]
 800c0e8:	68e5      	ldr	r5, [r4, #12]
 800c0ea:	6832      	ldr	r2, [r6, #0]
 800c0ec:	f003 0306 	and.w	r3, r3, #6
 800c0f0:	2b04      	cmp	r3, #4
 800c0f2:	bf08      	it	eq
 800c0f4:	1aad      	subeq	r5, r5, r2
 800c0f6:	68a3      	ldr	r3, [r4, #8]
 800c0f8:	6922      	ldr	r2, [r4, #16]
 800c0fa:	bf0c      	ite	eq
 800c0fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c100:	2500      	movne	r5, #0
 800c102:	4293      	cmp	r3, r2
 800c104:	bfc4      	itt	gt
 800c106:	1a9b      	subgt	r3, r3, r2
 800c108:	18ed      	addgt	r5, r5, r3
 800c10a:	2600      	movs	r6, #0
 800c10c:	341a      	adds	r4, #26
 800c10e:	42b5      	cmp	r5, r6
 800c110:	d11a      	bne.n	800c148 <_printf_common+0xc8>
 800c112:	2000      	movs	r0, #0
 800c114:	e008      	b.n	800c128 <_printf_common+0xa8>
 800c116:	2301      	movs	r3, #1
 800c118:	4652      	mov	r2, sl
 800c11a:	4649      	mov	r1, r9
 800c11c:	4638      	mov	r0, r7
 800c11e:	47c0      	blx	r8
 800c120:	3001      	adds	r0, #1
 800c122:	d103      	bne.n	800c12c <_printf_common+0xac>
 800c124:	f04f 30ff 	mov.w	r0, #4294967295
 800c128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c12c:	3501      	adds	r5, #1
 800c12e:	e7c6      	b.n	800c0be <_printf_common+0x3e>
 800c130:	18e1      	adds	r1, r4, r3
 800c132:	1c5a      	adds	r2, r3, #1
 800c134:	2030      	movs	r0, #48	; 0x30
 800c136:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c13a:	4422      	add	r2, r4
 800c13c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c140:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c144:	3302      	adds	r3, #2
 800c146:	e7c7      	b.n	800c0d8 <_printf_common+0x58>
 800c148:	2301      	movs	r3, #1
 800c14a:	4622      	mov	r2, r4
 800c14c:	4649      	mov	r1, r9
 800c14e:	4638      	mov	r0, r7
 800c150:	47c0      	blx	r8
 800c152:	3001      	adds	r0, #1
 800c154:	d0e6      	beq.n	800c124 <_printf_common+0xa4>
 800c156:	3601      	adds	r6, #1
 800c158:	e7d9      	b.n	800c10e <_printf_common+0x8e>
	...

0800c15c <_printf_i>:
 800c15c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c160:	7e0f      	ldrb	r7, [r1, #24]
 800c162:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c164:	2f78      	cmp	r7, #120	; 0x78
 800c166:	4691      	mov	r9, r2
 800c168:	4680      	mov	r8, r0
 800c16a:	460c      	mov	r4, r1
 800c16c:	469a      	mov	sl, r3
 800c16e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c172:	d807      	bhi.n	800c184 <_printf_i+0x28>
 800c174:	2f62      	cmp	r7, #98	; 0x62
 800c176:	d80a      	bhi.n	800c18e <_printf_i+0x32>
 800c178:	2f00      	cmp	r7, #0
 800c17a:	f000 80d8 	beq.w	800c32e <_printf_i+0x1d2>
 800c17e:	2f58      	cmp	r7, #88	; 0x58
 800c180:	f000 80a3 	beq.w	800c2ca <_printf_i+0x16e>
 800c184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c188:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c18c:	e03a      	b.n	800c204 <_printf_i+0xa8>
 800c18e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c192:	2b15      	cmp	r3, #21
 800c194:	d8f6      	bhi.n	800c184 <_printf_i+0x28>
 800c196:	a101      	add	r1, pc, #4	; (adr r1, 800c19c <_printf_i+0x40>)
 800c198:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c19c:	0800c1f5 	.word	0x0800c1f5
 800c1a0:	0800c209 	.word	0x0800c209
 800c1a4:	0800c185 	.word	0x0800c185
 800c1a8:	0800c185 	.word	0x0800c185
 800c1ac:	0800c185 	.word	0x0800c185
 800c1b0:	0800c185 	.word	0x0800c185
 800c1b4:	0800c209 	.word	0x0800c209
 800c1b8:	0800c185 	.word	0x0800c185
 800c1bc:	0800c185 	.word	0x0800c185
 800c1c0:	0800c185 	.word	0x0800c185
 800c1c4:	0800c185 	.word	0x0800c185
 800c1c8:	0800c315 	.word	0x0800c315
 800c1cc:	0800c239 	.word	0x0800c239
 800c1d0:	0800c2f7 	.word	0x0800c2f7
 800c1d4:	0800c185 	.word	0x0800c185
 800c1d8:	0800c185 	.word	0x0800c185
 800c1dc:	0800c337 	.word	0x0800c337
 800c1e0:	0800c185 	.word	0x0800c185
 800c1e4:	0800c239 	.word	0x0800c239
 800c1e8:	0800c185 	.word	0x0800c185
 800c1ec:	0800c185 	.word	0x0800c185
 800c1f0:	0800c2ff 	.word	0x0800c2ff
 800c1f4:	682b      	ldr	r3, [r5, #0]
 800c1f6:	1d1a      	adds	r2, r3, #4
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	602a      	str	r2, [r5, #0]
 800c1fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c200:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c204:	2301      	movs	r3, #1
 800c206:	e0a3      	b.n	800c350 <_printf_i+0x1f4>
 800c208:	6820      	ldr	r0, [r4, #0]
 800c20a:	6829      	ldr	r1, [r5, #0]
 800c20c:	0606      	lsls	r6, r0, #24
 800c20e:	f101 0304 	add.w	r3, r1, #4
 800c212:	d50a      	bpl.n	800c22a <_printf_i+0xce>
 800c214:	680e      	ldr	r6, [r1, #0]
 800c216:	602b      	str	r3, [r5, #0]
 800c218:	2e00      	cmp	r6, #0
 800c21a:	da03      	bge.n	800c224 <_printf_i+0xc8>
 800c21c:	232d      	movs	r3, #45	; 0x2d
 800c21e:	4276      	negs	r6, r6
 800c220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c224:	485e      	ldr	r0, [pc, #376]	; (800c3a0 <_printf_i+0x244>)
 800c226:	230a      	movs	r3, #10
 800c228:	e019      	b.n	800c25e <_printf_i+0x102>
 800c22a:	680e      	ldr	r6, [r1, #0]
 800c22c:	602b      	str	r3, [r5, #0]
 800c22e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c232:	bf18      	it	ne
 800c234:	b236      	sxthne	r6, r6
 800c236:	e7ef      	b.n	800c218 <_printf_i+0xbc>
 800c238:	682b      	ldr	r3, [r5, #0]
 800c23a:	6820      	ldr	r0, [r4, #0]
 800c23c:	1d19      	adds	r1, r3, #4
 800c23e:	6029      	str	r1, [r5, #0]
 800c240:	0601      	lsls	r1, r0, #24
 800c242:	d501      	bpl.n	800c248 <_printf_i+0xec>
 800c244:	681e      	ldr	r6, [r3, #0]
 800c246:	e002      	b.n	800c24e <_printf_i+0xf2>
 800c248:	0646      	lsls	r6, r0, #25
 800c24a:	d5fb      	bpl.n	800c244 <_printf_i+0xe8>
 800c24c:	881e      	ldrh	r6, [r3, #0]
 800c24e:	4854      	ldr	r0, [pc, #336]	; (800c3a0 <_printf_i+0x244>)
 800c250:	2f6f      	cmp	r7, #111	; 0x6f
 800c252:	bf0c      	ite	eq
 800c254:	2308      	moveq	r3, #8
 800c256:	230a      	movne	r3, #10
 800c258:	2100      	movs	r1, #0
 800c25a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c25e:	6865      	ldr	r5, [r4, #4]
 800c260:	60a5      	str	r5, [r4, #8]
 800c262:	2d00      	cmp	r5, #0
 800c264:	bfa2      	ittt	ge
 800c266:	6821      	ldrge	r1, [r4, #0]
 800c268:	f021 0104 	bicge.w	r1, r1, #4
 800c26c:	6021      	strge	r1, [r4, #0]
 800c26e:	b90e      	cbnz	r6, 800c274 <_printf_i+0x118>
 800c270:	2d00      	cmp	r5, #0
 800c272:	d04d      	beq.n	800c310 <_printf_i+0x1b4>
 800c274:	4615      	mov	r5, r2
 800c276:	fbb6 f1f3 	udiv	r1, r6, r3
 800c27a:	fb03 6711 	mls	r7, r3, r1, r6
 800c27e:	5dc7      	ldrb	r7, [r0, r7]
 800c280:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c284:	4637      	mov	r7, r6
 800c286:	42bb      	cmp	r3, r7
 800c288:	460e      	mov	r6, r1
 800c28a:	d9f4      	bls.n	800c276 <_printf_i+0x11a>
 800c28c:	2b08      	cmp	r3, #8
 800c28e:	d10b      	bne.n	800c2a8 <_printf_i+0x14c>
 800c290:	6823      	ldr	r3, [r4, #0]
 800c292:	07de      	lsls	r6, r3, #31
 800c294:	d508      	bpl.n	800c2a8 <_printf_i+0x14c>
 800c296:	6923      	ldr	r3, [r4, #16]
 800c298:	6861      	ldr	r1, [r4, #4]
 800c29a:	4299      	cmp	r1, r3
 800c29c:	bfde      	ittt	le
 800c29e:	2330      	movle	r3, #48	; 0x30
 800c2a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c2a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c2a8:	1b52      	subs	r2, r2, r5
 800c2aa:	6122      	str	r2, [r4, #16]
 800c2ac:	f8cd a000 	str.w	sl, [sp]
 800c2b0:	464b      	mov	r3, r9
 800c2b2:	aa03      	add	r2, sp, #12
 800c2b4:	4621      	mov	r1, r4
 800c2b6:	4640      	mov	r0, r8
 800c2b8:	f7ff fee2 	bl	800c080 <_printf_common>
 800c2bc:	3001      	adds	r0, #1
 800c2be:	d14c      	bne.n	800c35a <_printf_i+0x1fe>
 800c2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c4:	b004      	add	sp, #16
 800c2c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2ca:	4835      	ldr	r0, [pc, #212]	; (800c3a0 <_printf_i+0x244>)
 800c2cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c2d0:	6829      	ldr	r1, [r5, #0]
 800c2d2:	6823      	ldr	r3, [r4, #0]
 800c2d4:	f851 6b04 	ldr.w	r6, [r1], #4
 800c2d8:	6029      	str	r1, [r5, #0]
 800c2da:	061d      	lsls	r5, r3, #24
 800c2dc:	d514      	bpl.n	800c308 <_printf_i+0x1ac>
 800c2de:	07df      	lsls	r7, r3, #31
 800c2e0:	bf44      	itt	mi
 800c2e2:	f043 0320 	orrmi.w	r3, r3, #32
 800c2e6:	6023      	strmi	r3, [r4, #0]
 800c2e8:	b91e      	cbnz	r6, 800c2f2 <_printf_i+0x196>
 800c2ea:	6823      	ldr	r3, [r4, #0]
 800c2ec:	f023 0320 	bic.w	r3, r3, #32
 800c2f0:	6023      	str	r3, [r4, #0]
 800c2f2:	2310      	movs	r3, #16
 800c2f4:	e7b0      	b.n	800c258 <_printf_i+0xfc>
 800c2f6:	6823      	ldr	r3, [r4, #0]
 800c2f8:	f043 0320 	orr.w	r3, r3, #32
 800c2fc:	6023      	str	r3, [r4, #0]
 800c2fe:	2378      	movs	r3, #120	; 0x78
 800c300:	4828      	ldr	r0, [pc, #160]	; (800c3a4 <_printf_i+0x248>)
 800c302:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c306:	e7e3      	b.n	800c2d0 <_printf_i+0x174>
 800c308:	0659      	lsls	r1, r3, #25
 800c30a:	bf48      	it	mi
 800c30c:	b2b6      	uxthmi	r6, r6
 800c30e:	e7e6      	b.n	800c2de <_printf_i+0x182>
 800c310:	4615      	mov	r5, r2
 800c312:	e7bb      	b.n	800c28c <_printf_i+0x130>
 800c314:	682b      	ldr	r3, [r5, #0]
 800c316:	6826      	ldr	r6, [r4, #0]
 800c318:	6961      	ldr	r1, [r4, #20]
 800c31a:	1d18      	adds	r0, r3, #4
 800c31c:	6028      	str	r0, [r5, #0]
 800c31e:	0635      	lsls	r5, r6, #24
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	d501      	bpl.n	800c328 <_printf_i+0x1cc>
 800c324:	6019      	str	r1, [r3, #0]
 800c326:	e002      	b.n	800c32e <_printf_i+0x1d2>
 800c328:	0670      	lsls	r0, r6, #25
 800c32a:	d5fb      	bpl.n	800c324 <_printf_i+0x1c8>
 800c32c:	8019      	strh	r1, [r3, #0]
 800c32e:	2300      	movs	r3, #0
 800c330:	6123      	str	r3, [r4, #16]
 800c332:	4615      	mov	r5, r2
 800c334:	e7ba      	b.n	800c2ac <_printf_i+0x150>
 800c336:	682b      	ldr	r3, [r5, #0]
 800c338:	1d1a      	adds	r2, r3, #4
 800c33a:	602a      	str	r2, [r5, #0]
 800c33c:	681d      	ldr	r5, [r3, #0]
 800c33e:	6862      	ldr	r2, [r4, #4]
 800c340:	2100      	movs	r1, #0
 800c342:	4628      	mov	r0, r5
 800c344:	f7f3 ff54 	bl	80001f0 <memchr>
 800c348:	b108      	cbz	r0, 800c34e <_printf_i+0x1f2>
 800c34a:	1b40      	subs	r0, r0, r5
 800c34c:	6060      	str	r0, [r4, #4]
 800c34e:	6863      	ldr	r3, [r4, #4]
 800c350:	6123      	str	r3, [r4, #16]
 800c352:	2300      	movs	r3, #0
 800c354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c358:	e7a8      	b.n	800c2ac <_printf_i+0x150>
 800c35a:	6923      	ldr	r3, [r4, #16]
 800c35c:	462a      	mov	r2, r5
 800c35e:	4649      	mov	r1, r9
 800c360:	4640      	mov	r0, r8
 800c362:	47d0      	blx	sl
 800c364:	3001      	adds	r0, #1
 800c366:	d0ab      	beq.n	800c2c0 <_printf_i+0x164>
 800c368:	6823      	ldr	r3, [r4, #0]
 800c36a:	079b      	lsls	r3, r3, #30
 800c36c:	d413      	bmi.n	800c396 <_printf_i+0x23a>
 800c36e:	68e0      	ldr	r0, [r4, #12]
 800c370:	9b03      	ldr	r3, [sp, #12]
 800c372:	4298      	cmp	r0, r3
 800c374:	bfb8      	it	lt
 800c376:	4618      	movlt	r0, r3
 800c378:	e7a4      	b.n	800c2c4 <_printf_i+0x168>
 800c37a:	2301      	movs	r3, #1
 800c37c:	4632      	mov	r2, r6
 800c37e:	4649      	mov	r1, r9
 800c380:	4640      	mov	r0, r8
 800c382:	47d0      	blx	sl
 800c384:	3001      	adds	r0, #1
 800c386:	d09b      	beq.n	800c2c0 <_printf_i+0x164>
 800c388:	3501      	adds	r5, #1
 800c38a:	68e3      	ldr	r3, [r4, #12]
 800c38c:	9903      	ldr	r1, [sp, #12]
 800c38e:	1a5b      	subs	r3, r3, r1
 800c390:	42ab      	cmp	r3, r5
 800c392:	dcf2      	bgt.n	800c37a <_printf_i+0x21e>
 800c394:	e7eb      	b.n	800c36e <_printf_i+0x212>
 800c396:	2500      	movs	r5, #0
 800c398:	f104 0619 	add.w	r6, r4, #25
 800c39c:	e7f5      	b.n	800c38a <_printf_i+0x22e>
 800c39e:	bf00      	nop
 800c3a0:	0800ed1a 	.word	0x0800ed1a
 800c3a4:	0800ed2b 	.word	0x0800ed2b

0800c3a8 <siprintf>:
 800c3a8:	b40e      	push	{r1, r2, r3}
 800c3aa:	b500      	push	{lr}
 800c3ac:	b09c      	sub	sp, #112	; 0x70
 800c3ae:	ab1d      	add	r3, sp, #116	; 0x74
 800c3b0:	9002      	str	r0, [sp, #8]
 800c3b2:	9006      	str	r0, [sp, #24]
 800c3b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c3b8:	4809      	ldr	r0, [pc, #36]	; (800c3e0 <siprintf+0x38>)
 800c3ba:	9107      	str	r1, [sp, #28]
 800c3bc:	9104      	str	r1, [sp, #16]
 800c3be:	4909      	ldr	r1, [pc, #36]	; (800c3e4 <siprintf+0x3c>)
 800c3c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3c4:	9105      	str	r1, [sp, #20]
 800c3c6:	6800      	ldr	r0, [r0, #0]
 800c3c8:	9301      	str	r3, [sp, #4]
 800c3ca:	a902      	add	r1, sp, #8
 800c3cc:	f001 fb76 	bl	800dabc <_svfiprintf_r>
 800c3d0:	9b02      	ldr	r3, [sp, #8]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	701a      	strb	r2, [r3, #0]
 800c3d6:	b01c      	add	sp, #112	; 0x70
 800c3d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3dc:	b003      	add	sp, #12
 800c3de:	4770      	bx	lr
 800c3e0:	20000110 	.word	0x20000110
 800c3e4:	ffff0208 	.word	0xffff0208

0800c3e8 <quorem>:
 800c3e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ec:	6903      	ldr	r3, [r0, #16]
 800c3ee:	690c      	ldr	r4, [r1, #16]
 800c3f0:	42a3      	cmp	r3, r4
 800c3f2:	4607      	mov	r7, r0
 800c3f4:	f2c0 8081 	blt.w	800c4fa <quorem+0x112>
 800c3f8:	3c01      	subs	r4, #1
 800c3fa:	f101 0814 	add.w	r8, r1, #20
 800c3fe:	f100 0514 	add.w	r5, r0, #20
 800c402:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c406:	9301      	str	r3, [sp, #4]
 800c408:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c40c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c410:	3301      	adds	r3, #1
 800c412:	429a      	cmp	r2, r3
 800c414:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c418:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c41c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c420:	d331      	bcc.n	800c486 <quorem+0x9e>
 800c422:	f04f 0e00 	mov.w	lr, #0
 800c426:	4640      	mov	r0, r8
 800c428:	46ac      	mov	ip, r5
 800c42a:	46f2      	mov	sl, lr
 800c42c:	f850 2b04 	ldr.w	r2, [r0], #4
 800c430:	b293      	uxth	r3, r2
 800c432:	fb06 e303 	mla	r3, r6, r3, lr
 800c436:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	ebaa 0303 	sub.w	r3, sl, r3
 800c440:	f8dc a000 	ldr.w	sl, [ip]
 800c444:	0c12      	lsrs	r2, r2, #16
 800c446:	fa13 f38a 	uxtah	r3, r3, sl
 800c44a:	fb06 e202 	mla	r2, r6, r2, lr
 800c44e:	9300      	str	r3, [sp, #0]
 800c450:	9b00      	ldr	r3, [sp, #0]
 800c452:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c456:	b292      	uxth	r2, r2
 800c458:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c45c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c460:	f8bd 3000 	ldrh.w	r3, [sp]
 800c464:	4581      	cmp	r9, r0
 800c466:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c46a:	f84c 3b04 	str.w	r3, [ip], #4
 800c46e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c472:	d2db      	bcs.n	800c42c <quorem+0x44>
 800c474:	f855 300b 	ldr.w	r3, [r5, fp]
 800c478:	b92b      	cbnz	r3, 800c486 <quorem+0x9e>
 800c47a:	9b01      	ldr	r3, [sp, #4]
 800c47c:	3b04      	subs	r3, #4
 800c47e:	429d      	cmp	r5, r3
 800c480:	461a      	mov	r2, r3
 800c482:	d32e      	bcc.n	800c4e2 <quorem+0xfa>
 800c484:	613c      	str	r4, [r7, #16]
 800c486:	4638      	mov	r0, r7
 800c488:	f001 f8c4 	bl	800d614 <__mcmp>
 800c48c:	2800      	cmp	r0, #0
 800c48e:	db24      	blt.n	800c4da <quorem+0xf2>
 800c490:	3601      	adds	r6, #1
 800c492:	4628      	mov	r0, r5
 800c494:	f04f 0c00 	mov.w	ip, #0
 800c498:	f858 2b04 	ldr.w	r2, [r8], #4
 800c49c:	f8d0 e000 	ldr.w	lr, [r0]
 800c4a0:	b293      	uxth	r3, r2
 800c4a2:	ebac 0303 	sub.w	r3, ip, r3
 800c4a6:	0c12      	lsrs	r2, r2, #16
 800c4a8:	fa13 f38e 	uxtah	r3, r3, lr
 800c4ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c4b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c4b4:	b29b      	uxth	r3, r3
 800c4b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c4ba:	45c1      	cmp	r9, r8
 800c4bc:	f840 3b04 	str.w	r3, [r0], #4
 800c4c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c4c4:	d2e8      	bcs.n	800c498 <quorem+0xb0>
 800c4c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c4ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c4ce:	b922      	cbnz	r2, 800c4da <quorem+0xf2>
 800c4d0:	3b04      	subs	r3, #4
 800c4d2:	429d      	cmp	r5, r3
 800c4d4:	461a      	mov	r2, r3
 800c4d6:	d30a      	bcc.n	800c4ee <quorem+0x106>
 800c4d8:	613c      	str	r4, [r7, #16]
 800c4da:	4630      	mov	r0, r6
 800c4dc:	b003      	add	sp, #12
 800c4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4e2:	6812      	ldr	r2, [r2, #0]
 800c4e4:	3b04      	subs	r3, #4
 800c4e6:	2a00      	cmp	r2, #0
 800c4e8:	d1cc      	bne.n	800c484 <quorem+0x9c>
 800c4ea:	3c01      	subs	r4, #1
 800c4ec:	e7c7      	b.n	800c47e <quorem+0x96>
 800c4ee:	6812      	ldr	r2, [r2, #0]
 800c4f0:	3b04      	subs	r3, #4
 800c4f2:	2a00      	cmp	r2, #0
 800c4f4:	d1f0      	bne.n	800c4d8 <quorem+0xf0>
 800c4f6:	3c01      	subs	r4, #1
 800c4f8:	e7eb      	b.n	800c4d2 <quorem+0xea>
 800c4fa:	2000      	movs	r0, #0
 800c4fc:	e7ee      	b.n	800c4dc <quorem+0xf4>
	...

0800c500 <_dtoa_r>:
 800c500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c504:	ed2d 8b04 	vpush	{d8-d9}
 800c508:	ec57 6b10 	vmov	r6, r7, d0
 800c50c:	b093      	sub	sp, #76	; 0x4c
 800c50e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c510:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c514:	9106      	str	r1, [sp, #24]
 800c516:	ee10 aa10 	vmov	sl, s0
 800c51a:	4604      	mov	r4, r0
 800c51c:	9209      	str	r2, [sp, #36]	; 0x24
 800c51e:	930c      	str	r3, [sp, #48]	; 0x30
 800c520:	46bb      	mov	fp, r7
 800c522:	b975      	cbnz	r5, 800c542 <_dtoa_r+0x42>
 800c524:	2010      	movs	r0, #16
 800c526:	f000 fddd 	bl	800d0e4 <malloc>
 800c52a:	4602      	mov	r2, r0
 800c52c:	6260      	str	r0, [r4, #36]	; 0x24
 800c52e:	b920      	cbnz	r0, 800c53a <_dtoa_r+0x3a>
 800c530:	4ba7      	ldr	r3, [pc, #668]	; (800c7d0 <_dtoa_r+0x2d0>)
 800c532:	21ea      	movs	r1, #234	; 0xea
 800c534:	48a7      	ldr	r0, [pc, #668]	; (800c7d4 <_dtoa_r+0x2d4>)
 800c536:	f001 fbd1 	bl	800dcdc <__assert_func>
 800c53a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c53e:	6005      	str	r5, [r0, #0]
 800c540:	60c5      	str	r5, [r0, #12]
 800c542:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c544:	6819      	ldr	r1, [r3, #0]
 800c546:	b151      	cbz	r1, 800c55e <_dtoa_r+0x5e>
 800c548:	685a      	ldr	r2, [r3, #4]
 800c54a:	604a      	str	r2, [r1, #4]
 800c54c:	2301      	movs	r3, #1
 800c54e:	4093      	lsls	r3, r2
 800c550:	608b      	str	r3, [r1, #8]
 800c552:	4620      	mov	r0, r4
 800c554:	f000 fe1c 	bl	800d190 <_Bfree>
 800c558:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c55a:	2200      	movs	r2, #0
 800c55c:	601a      	str	r2, [r3, #0]
 800c55e:	1e3b      	subs	r3, r7, #0
 800c560:	bfaa      	itet	ge
 800c562:	2300      	movge	r3, #0
 800c564:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c568:	f8c8 3000 	strge.w	r3, [r8]
 800c56c:	4b9a      	ldr	r3, [pc, #616]	; (800c7d8 <_dtoa_r+0x2d8>)
 800c56e:	bfbc      	itt	lt
 800c570:	2201      	movlt	r2, #1
 800c572:	f8c8 2000 	strlt.w	r2, [r8]
 800c576:	ea33 030b 	bics.w	r3, r3, fp
 800c57a:	d11b      	bne.n	800c5b4 <_dtoa_r+0xb4>
 800c57c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c57e:	f242 730f 	movw	r3, #9999	; 0x270f
 800c582:	6013      	str	r3, [r2, #0]
 800c584:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c588:	4333      	orrs	r3, r6
 800c58a:	f000 8592 	beq.w	800d0b2 <_dtoa_r+0xbb2>
 800c58e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c590:	b963      	cbnz	r3, 800c5ac <_dtoa_r+0xac>
 800c592:	4b92      	ldr	r3, [pc, #584]	; (800c7dc <_dtoa_r+0x2dc>)
 800c594:	e022      	b.n	800c5dc <_dtoa_r+0xdc>
 800c596:	4b92      	ldr	r3, [pc, #584]	; (800c7e0 <_dtoa_r+0x2e0>)
 800c598:	9301      	str	r3, [sp, #4]
 800c59a:	3308      	adds	r3, #8
 800c59c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c59e:	6013      	str	r3, [r2, #0]
 800c5a0:	9801      	ldr	r0, [sp, #4]
 800c5a2:	b013      	add	sp, #76	; 0x4c
 800c5a4:	ecbd 8b04 	vpop	{d8-d9}
 800c5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5ac:	4b8b      	ldr	r3, [pc, #556]	; (800c7dc <_dtoa_r+0x2dc>)
 800c5ae:	9301      	str	r3, [sp, #4]
 800c5b0:	3303      	adds	r3, #3
 800c5b2:	e7f3      	b.n	800c59c <_dtoa_r+0x9c>
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	4650      	mov	r0, sl
 800c5ba:	4659      	mov	r1, fp
 800c5bc:	f7f4 fa8c 	bl	8000ad8 <__aeabi_dcmpeq>
 800c5c0:	ec4b ab19 	vmov	d9, sl, fp
 800c5c4:	4680      	mov	r8, r0
 800c5c6:	b158      	cbz	r0, 800c5e0 <_dtoa_r+0xe0>
 800c5c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	6013      	str	r3, [r2, #0]
 800c5ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	f000 856b 	beq.w	800d0ac <_dtoa_r+0xbac>
 800c5d6:	4883      	ldr	r0, [pc, #524]	; (800c7e4 <_dtoa_r+0x2e4>)
 800c5d8:	6018      	str	r0, [r3, #0]
 800c5da:	1e43      	subs	r3, r0, #1
 800c5dc:	9301      	str	r3, [sp, #4]
 800c5de:	e7df      	b.n	800c5a0 <_dtoa_r+0xa0>
 800c5e0:	ec4b ab10 	vmov	d0, sl, fp
 800c5e4:	aa10      	add	r2, sp, #64	; 0x40
 800c5e6:	a911      	add	r1, sp, #68	; 0x44
 800c5e8:	4620      	mov	r0, r4
 800c5ea:	f001 f8b9 	bl	800d760 <__d2b>
 800c5ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c5f2:	ee08 0a10 	vmov	s16, r0
 800c5f6:	2d00      	cmp	r5, #0
 800c5f8:	f000 8084 	beq.w	800c704 <_dtoa_r+0x204>
 800c5fc:	ee19 3a90 	vmov	r3, s19
 800c600:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c604:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c608:	4656      	mov	r6, sl
 800c60a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c60e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c612:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c616:	4b74      	ldr	r3, [pc, #464]	; (800c7e8 <_dtoa_r+0x2e8>)
 800c618:	2200      	movs	r2, #0
 800c61a:	4630      	mov	r0, r6
 800c61c:	4639      	mov	r1, r7
 800c61e:	f7f3 fe3b 	bl	8000298 <__aeabi_dsub>
 800c622:	a365      	add	r3, pc, #404	; (adr r3, 800c7b8 <_dtoa_r+0x2b8>)
 800c624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c628:	f7f3 ffee 	bl	8000608 <__aeabi_dmul>
 800c62c:	a364      	add	r3, pc, #400	; (adr r3, 800c7c0 <_dtoa_r+0x2c0>)
 800c62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c632:	f7f3 fe33 	bl	800029c <__adddf3>
 800c636:	4606      	mov	r6, r0
 800c638:	4628      	mov	r0, r5
 800c63a:	460f      	mov	r7, r1
 800c63c:	f7f3 ff7a 	bl	8000534 <__aeabi_i2d>
 800c640:	a361      	add	r3, pc, #388	; (adr r3, 800c7c8 <_dtoa_r+0x2c8>)
 800c642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c646:	f7f3 ffdf 	bl	8000608 <__aeabi_dmul>
 800c64a:	4602      	mov	r2, r0
 800c64c:	460b      	mov	r3, r1
 800c64e:	4630      	mov	r0, r6
 800c650:	4639      	mov	r1, r7
 800c652:	f7f3 fe23 	bl	800029c <__adddf3>
 800c656:	4606      	mov	r6, r0
 800c658:	460f      	mov	r7, r1
 800c65a:	f7f4 fa85 	bl	8000b68 <__aeabi_d2iz>
 800c65e:	2200      	movs	r2, #0
 800c660:	9000      	str	r0, [sp, #0]
 800c662:	2300      	movs	r3, #0
 800c664:	4630      	mov	r0, r6
 800c666:	4639      	mov	r1, r7
 800c668:	f7f4 fa40 	bl	8000aec <__aeabi_dcmplt>
 800c66c:	b150      	cbz	r0, 800c684 <_dtoa_r+0x184>
 800c66e:	9800      	ldr	r0, [sp, #0]
 800c670:	f7f3 ff60 	bl	8000534 <__aeabi_i2d>
 800c674:	4632      	mov	r2, r6
 800c676:	463b      	mov	r3, r7
 800c678:	f7f4 fa2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800c67c:	b910      	cbnz	r0, 800c684 <_dtoa_r+0x184>
 800c67e:	9b00      	ldr	r3, [sp, #0]
 800c680:	3b01      	subs	r3, #1
 800c682:	9300      	str	r3, [sp, #0]
 800c684:	9b00      	ldr	r3, [sp, #0]
 800c686:	2b16      	cmp	r3, #22
 800c688:	d85a      	bhi.n	800c740 <_dtoa_r+0x240>
 800c68a:	9a00      	ldr	r2, [sp, #0]
 800c68c:	4b57      	ldr	r3, [pc, #348]	; (800c7ec <_dtoa_r+0x2ec>)
 800c68e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c696:	ec51 0b19 	vmov	r0, r1, d9
 800c69a:	f7f4 fa27 	bl	8000aec <__aeabi_dcmplt>
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	d050      	beq.n	800c744 <_dtoa_r+0x244>
 800c6a2:	9b00      	ldr	r3, [sp, #0]
 800c6a4:	3b01      	subs	r3, #1
 800c6a6:	9300      	str	r3, [sp, #0]
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800c6ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c6ae:	1b5d      	subs	r5, r3, r5
 800c6b0:	1e6b      	subs	r3, r5, #1
 800c6b2:	9305      	str	r3, [sp, #20]
 800c6b4:	bf45      	ittet	mi
 800c6b6:	f1c5 0301 	rsbmi	r3, r5, #1
 800c6ba:	9304      	strmi	r3, [sp, #16]
 800c6bc:	2300      	movpl	r3, #0
 800c6be:	2300      	movmi	r3, #0
 800c6c0:	bf4c      	ite	mi
 800c6c2:	9305      	strmi	r3, [sp, #20]
 800c6c4:	9304      	strpl	r3, [sp, #16]
 800c6c6:	9b00      	ldr	r3, [sp, #0]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	db3d      	blt.n	800c748 <_dtoa_r+0x248>
 800c6cc:	9b05      	ldr	r3, [sp, #20]
 800c6ce:	9a00      	ldr	r2, [sp, #0]
 800c6d0:	920a      	str	r2, [sp, #40]	; 0x28
 800c6d2:	4413      	add	r3, r2
 800c6d4:	9305      	str	r3, [sp, #20]
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	9307      	str	r3, [sp, #28]
 800c6da:	9b06      	ldr	r3, [sp, #24]
 800c6dc:	2b09      	cmp	r3, #9
 800c6de:	f200 8089 	bhi.w	800c7f4 <_dtoa_r+0x2f4>
 800c6e2:	2b05      	cmp	r3, #5
 800c6e4:	bfc4      	itt	gt
 800c6e6:	3b04      	subgt	r3, #4
 800c6e8:	9306      	strgt	r3, [sp, #24]
 800c6ea:	9b06      	ldr	r3, [sp, #24]
 800c6ec:	f1a3 0302 	sub.w	r3, r3, #2
 800c6f0:	bfcc      	ite	gt
 800c6f2:	2500      	movgt	r5, #0
 800c6f4:	2501      	movle	r5, #1
 800c6f6:	2b03      	cmp	r3, #3
 800c6f8:	f200 8087 	bhi.w	800c80a <_dtoa_r+0x30a>
 800c6fc:	e8df f003 	tbb	[pc, r3]
 800c700:	59383a2d 	.word	0x59383a2d
 800c704:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c708:	441d      	add	r5, r3
 800c70a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c70e:	2b20      	cmp	r3, #32
 800c710:	bfc1      	itttt	gt
 800c712:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c716:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c71a:	fa0b f303 	lslgt.w	r3, fp, r3
 800c71e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c722:	bfda      	itte	le
 800c724:	f1c3 0320 	rsble	r3, r3, #32
 800c728:	fa06 f003 	lslle.w	r0, r6, r3
 800c72c:	4318      	orrgt	r0, r3
 800c72e:	f7f3 fef1 	bl	8000514 <__aeabi_ui2d>
 800c732:	2301      	movs	r3, #1
 800c734:	4606      	mov	r6, r0
 800c736:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c73a:	3d01      	subs	r5, #1
 800c73c:	930e      	str	r3, [sp, #56]	; 0x38
 800c73e:	e76a      	b.n	800c616 <_dtoa_r+0x116>
 800c740:	2301      	movs	r3, #1
 800c742:	e7b2      	b.n	800c6aa <_dtoa_r+0x1aa>
 800c744:	900b      	str	r0, [sp, #44]	; 0x2c
 800c746:	e7b1      	b.n	800c6ac <_dtoa_r+0x1ac>
 800c748:	9b04      	ldr	r3, [sp, #16]
 800c74a:	9a00      	ldr	r2, [sp, #0]
 800c74c:	1a9b      	subs	r3, r3, r2
 800c74e:	9304      	str	r3, [sp, #16]
 800c750:	4253      	negs	r3, r2
 800c752:	9307      	str	r3, [sp, #28]
 800c754:	2300      	movs	r3, #0
 800c756:	930a      	str	r3, [sp, #40]	; 0x28
 800c758:	e7bf      	b.n	800c6da <_dtoa_r+0x1da>
 800c75a:	2300      	movs	r3, #0
 800c75c:	9308      	str	r3, [sp, #32]
 800c75e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c760:	2b00      	cmp	r3, #0
 800c762:	dc55      	bgt.n	800c810 <_dtoa_r+0x310>
 800c764:	2301      	movs	r3, #1
 800c766:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c76a:	461a      	mov	r2, r3
 800c76c:	9209      	str	r2, [sp, #36]	; 0x24
 800c76e:	e00c      	b.n	800c78a <_dtoa_r+0x28a>
 800c770:	2301      	movs	r3, #1
 800c772:	e7f3      	b.n	800c75c <_dtoa_r+0x25c>
 800c774:	2300      	movs	r3, #0
 800c776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c778:	9308      	str	r3, [sp, #32]
 800c77a:	9b00      	ldr	r3, [sp, #0]
 800c77c:	4413      	add	r3, r2
 800c77e:	9302      	str	r3, [sp, #8]
 800c780:	3301      	adds	r3, #1
 800c782:	2b01      	cmp	r3, #1
 800c784:	9303      	str	r3, [sp, #12]
 800c786:	bfb8      	it	lt
 800c788:	2301      	movlt	r3, #1
 800c78a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c78c:	2200      	movs	r2, #0
 800c78e:	6042      	str	r2, [r0, #4]
 800c790:	2204      	movs	r2, #4
 800c792:	f102 0614 	add.w	r6, r2, #20
 800c796:	429e      	cmp	r6, r3
 800c798:	6841      	ldr	r1, [r0, #4]
 800c79a:	d93d      	bls.n	800c818 <_dtoa_r+0x318>
 800c79c:	4620      	mov	r0, r4
 800c79e:	f000 fcb7 	bl	800d110 <_Balloc>
 800c7a2:	9001      	str	r0, [sp, #4]
 800c7a4:	2800      	cmp	r0, #0
 800c7a6:	d13b      	bne.n	800c820 <_dtoa_r+0x320>
 800c7a8:	4b11      	ldr	r3, [pc, #68]	; (800c7f0 <_dtoa_r+0x2f0>)
 800c7aa:	4602      	mov	r2, r0
 800c7ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c7b0:	e6c0      	b.n	800c534 <_dtoa_r+0x34>
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	e7df      	b.n	800c776 <_dtoa_r+0x276>
 800c7b6:	bf00      	nop
 800c7b8:	636f4361 	.word	0x636f4361
 800c7bc:	3fd287a7 	.word	0x3fd287a7
 800c7c0:	8b60c8b3 	.word	0x8b60c8b3
 800c7c4:	3fc68a28 	.word	0x3fc68a28
 800c7c8:	509f79fb 	.word	0x509f79fb
 800c7cc:	3fd34413 	.word	0x3fd34413
 800c7d0:	0800ed49 	.word	0x0800ed49
 800c7d4:	0800ed60 	.word	0x0800ed60
 800c7d8:	7ff00000 	.word	0x7ff00000
 800c7dc:	0800ed45 	.word	0x0800ed45
 800c7e0:	0800ed3c 	.word	0x0800ed3c
 800c7e4:	0800ed19 	.word	0x0800ed19
 800c7e8:	3ff80000 	.word	0x3ff80000
 800c7ec:	0800ee50 	.word	0x0800ee50
 800c7f0:	0800edbb 	.word	0x0800edbb
 800c7f4:	2501      	movs	r5, #1
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	9306      	str	r3, [sp, #24]
 800c7fa:	9508      	str	r5, [sp, #32]
 800c7fc:	f04f 33ff 	mov.w	r3, #4294967295
 800c800:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c804:	2200      	movs	r2, #0
 800c806:	2312      	movs	r3, #18
 800c808:	e7b0      	b.n	800c76c <_dtoa_r+0x26c>
 800c80a:	2301      	movs	r3, #1
 800c80c:	9308      	str	r3, [sp, #32]
 800c80e:	e7f5      	b.n	800c7fc <_dtoa_r+0x2fc>
 800c810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c812:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c816:	e7b8      	b.n	800c78a <_dtoa_r+0x28a>
 800c818:	3101      	adds	r1, #1
 800c81a:	6041      	str	r1, [r0, #4]
 800c81c:	0052      	lsls	r2, r2, #1
 800c81e:	e7b8      	b.n	800c792 <_dtoa_r+0x292>
 800c820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c822:	9a01      	ldr	r2, [sp, #4]
 800c824:	601a      	str	r2, [r3, #0]
 800c826:	9b03      	ldr	r3, [sp, #12]
 800c828:	2b0e      	cmp	r3, #14
 800c82a:	f200 809d 	bhi.w	800c968 <_dtoa_r+0x468>
 800c82e:	2d00      	cmp	r5, #0
 800c830:	f000 809a 	beq.w	800c968 <_dtoa_r+0x468>
 800c834:	9b00      	ldr	r3, [sp, #0]
 800c836:	2b00      	cmp	r3, #0
 800c838:	dd32      	ble.n	800c8a0 <_dtoa_r+0x3a0>
 800c83a:	4ab7      	ldr	r2, [pc, #732]	; (800cb18 <_dtoa_r+0x618>)
 800c83c:	f003 030f 	and.w	r3, r3, #15
 800c840:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c844:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c848:	9b00      	ldr	r3, [sp, #0]
 800c84a:	05d8      	lsls	r0, r3, #23
 800c84c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c850:	d516      	bpl.n	800c880 <_dtoa_r+0x380>
 800c852:	4bb2      	ldr	r3, [pc, #712]	; (800cb1c <_dtoa_r+0x61c>)
 800c854:	ec51 0b19 	vmov	r0, r1, d9
 800c858:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c85c:	f7f3 fffe 	bl	800085c <__aeabi_ddiv>
 800c860:	f007 070f 	and.w	r7, r7, #15
 800c864:	4682      	mov	sl, r0
 800c866:	468b      	mov	fp, r1
 800c868:	2503      	movs	r5, #3
 800c86a:	4eac      	ldr	r6, [pc, #688]	; (800cb1c <_dtoa_r+0x61c>)
 800c86c:	b957      	cbnz	r7, 800c884 <_dtoa_r+0x384>
 800c86e:	4642      	mov	r2, r8
 800c870:	464b      	mov	r3, r9
 800c872:	4650      	mov	r0, sl
 800c874:	4659      	mov	r1, fp
 800c876:	f7f3 fff1 	bl	800085c <__aeabi_ddiv>
 800c87a:	4682      	mov	sl, r0
 800c87c:	468b      	mov	fp, r1
 800c87e:	e028      	b.n	800c8d2 <_dtoa_r+0x3d2>
 800c880:	2502      	movs	r5, #2
 800c882:	e7f2      	b.n	800c86a <_dtoa_r+0x36a>
 800c884:	07f9      	lsls	r1, r7, #31
 800c886:	d508      	bpl.n	800c89a <_dtoa_r+0x39a>
 800c888:	4640      	mov	r0, r8
 800c88a:	4649      	mov	r1, r9
 800c88c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c890:	f7f3 feba 	bl	8000608 <__aeabi_dmul>
 800c894:	3501      	adds	r5, #1
 800c896:	4680      	mov	r8, r0
 800c898:	4689      	mov	r9, r1
 800c89a:	107f      	asrs	r7, r7, #1
 800c89c:	3608      	adds	r6, #8
 800c89e:	e7e5      	b.n	800c86c <_dtoa_r+0x36c>
 800c8a0:	f000 809b 	beq.w	800c9da <_dtoa_r+0x4da>
 800c8a4:	9b00      	ldr	r3, [sp, #0]
 800c8a6:	4f9d      	ldr	r7, [pc, #628]	; (800cb1c <_dtoa_r+0x61c>)
 800c8a8:	425e      	negs	r6, r3
 800c8aa:	4b9b      	ldr	r3, [pc, #620]	; (800cb18 <_dtoa_r+0x618>)
 800c8ac:	f006 020f 	and.w	r2, r6, #15
 800c8b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b8:	ec51 0b19 	vmov	r0, r1, d9
 800c8bc:	f7f3 fea4 	bl	8000608 <__aeabi_dmul>
 800c8c0:	1136      	asrs	r6, r6, #4
 800c8c2:	4682      	mov	sl, r0
 800c8c4:	468b      	mov	fp, r1
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	2502      	movs	r5, #2
 800c8ca:	2e00      	cmp	r6, #0
 800c8cc:	d17a      	bne.n	800c9c4 <_dtoa_r+0x4c4>
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d1d3      	bne.n	800c87a <_dtoa_r+0x37a>
 800c8d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	f000 8082 	beq.w	800c9de <_dtoa_r+0x4de>
 800c8da:	4b91      	ldr	r3, [pc, #580]	; (800cb20 <_dtoa_r+0x620>)
 800c8dc:	2200      	movs	r2, #0
 800c8de:	4650      	mov	r0, sl
 800c8e0:	4659      	mov	r1, fp
 800c8e2:	f7f4 f903 	bl	8000aec <__aeabi_dcmplt>
 800c8e6:	2800      	cmp	r0, #0
 800c8e8:	d079      	beq.n	800c9de <_dtoa_r+0x4de>
 800c8ea:	9b03      	ldr	r3, [sp, #12]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d076      	beq.n	800c9de <_dtoa_r+0x4de>
 800c8f0:	9b02      	ldr	r3, [sp, #8]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	dd36      	ble.n	800c964 <_dtoa_r+0x464>
 800c8f6:	9b00      	ldr	r3, [sp, #0]
 800c8f8:	4650      	mov	r0, sl
 800c8fa:	4659      	mov	r1, fp
 800c8fc:	1e5f      	subs	r7, r3, #1
 800c8fe:	2200      	movs	r2, #0
 800c900:	4b88      	ldr	r3, [pc, #544]	; (800cb24 <_dtoa_r+0x624>)
 800c902:	f7f3 fe81 	bl	8000608 <__aeabi_dmul>
 800c906:	9e02      	ldr	r6, [sp, #8]
 800c908:	4682      	mov	sl, r0
 800c90a:	468b      	mov	fp, r1
 800c90c:	3501      	adds	r5, #1
 800c90e:	4628      	mov	r0, r5
 800c910:	f7f3 fe10 	bl	8000534 <__aeabi_i2d>
 800c914:	4652      	mov	r2, sl
 800c916:	465b      	mov	r3, fp
 800c918:	f7f3 fe76 	bl	8000608 <__aeabi_dmul>
 800c91c:	4b82      	ldr	r3, [pc, #520]	; (800cb28 <_dtoa_r+0x628>)
 800c91e:	2200      	movs	r2, #0
 800c920:	f7f3 fcbc 	bl	800029c <__adddf3>
 800c924:	46d0      	mov	r8, sl
 800c926:	46d9      	mov	r9, fp
 800c928:	4682      	mov	sl, r0
 800c92a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c92e:	2e00      	cmp	r6, #0
 800c930:	d158      	bne.n	800c9e4 <_dtoa_r+0x4e4>
 800c932:	4b7e      	ldr	r3, [pc, #504]	; (800cb2c <_dtoa_r+0x62c>)
 800c934:	2200      	movs	r2, #0
 800c936:	4640      	mov	r0, r8
 800c938:	4649      	mov	r1, r9
 800c93a:	f7f3 fcad 	bl	8000298 <__aeabi_dsub>
 800c93e:	4652      	mov	r2, sl
 800c940:	465b      	mov	r3, fp
 800c942:	4680      	mov	r8, r0
 800c944:	4689      	mov	r9, r1
 800c946:	f7f4 f8ef 	bl	8000b28 <__aeabi_dcmpgt>
 800c94a:	2800      	cmp	r0, #0
 800c94c:	f040 8295 	bne.w	800ce7a <_dtoa_r+0x97a>
 800c950:	4652      	mov	r2, sl
 800c952:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c956:	4640      	mov	r0, r8
 800c958:	4649      	mov	r1, r9
 800c95a:	f7f4 f8c7 	bl	8000aec <__aeabi_dcmplt>
 800c95e:	2800      	cmp	r0, #0
 800c960:	f040 8289 	bne.w	800ce76 <_dtoa_r+0x976>
 800c964:	ec5b ab19 	vmov	sl, fp, d9
 800c968:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	f2c0 8148 	blt.w	800cc00 <_dtoa_r+0x700>
 800c970:	9a00      	ldr	r2, [sp, #0]
 800c972:	2a0e      	cmp	r2, #14
 800c974:	f300 8144 	bgt.w	800cc00 <_dtoa_r+0x700>
 800c978:	4b67      	ldr	r3, [pc, #412]	; (800cb18 <_dtoa_r+0x618>)
 800c97a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c97e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c984:	2b00      	cmp	r3, #0
 800c986:	f280 80d5 	bge.w	800cb34 <_dtoa_r+0x634>
 800c98a:	9b03      	ldr	r3, [sp, #12]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	f300 80d1 	bgt.w	800cb34 <_dtoa_r+0x634>
 800c992:	f040 826f 	bne.w	800ce74 <_dtoa_r+0x974>
 800c996:	4b65      	ldr	r3, [pc, #404]	; (800cb2c <_dtoa_r+0x62c>)
 800c998:	2200      	movs	r2, #0
 800c99a:	4640      	mov	r0, r8
 800c99c:	4649      	mov	r1, r9
 800c99e:	f7f3 fe33 	bl	8000608 <__aeabi_dmul>
 800c9a2:	4652      	mov	r2, sl
 800c9a4:	465b      	mov	r3, fp
 800c9a6:	f7f4 f8b5 	bl	8000b14 <__aeabi_dcmpge>
 800c9aa:	9e03      	ldr	r6, [sp, #12]
 800c9ac:	4637      	mov	r7, r6
 800c9ae:	2800      	cmp	r0, #0
 800c9b0:	f040 8245 	bne.w	800ce3e <_dtoa_r+0x93e>
 800c9b4:	9d01      	ldr	r5, [sp, #4]
 800c9b6:	2331      	movs	r3, #49	; 0x31
 800c9b8:	f805 3b01 	strb.w	r3, [r5], #1
 800c9bc:	9b00      	ldr	r3, [sp, #0]
 800c9be:	3301      	adds	r3, #1
 800c9c0:	9300      	str	r3, [sp, #0]
 800c9c2:	e240      	b.n	800ce46 <_dtoa_r+0x946>
 800c9c4:	07f2      	lsls	r2, r6, #31
 800c9c6:	d505      	bpl.n	800c9d4 <_dtoa_r+0x4d4>
 800c9c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9cc:	f7f3 fe1c 	bl	8000608 <__aeabi_dmul>
 800c9d0:	3501      	adds	r5, #1
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	1076      	asrs	r6, r6, #1
 800c9d6:	3708      	adds	r7, #8
 800c9d8:	e777      	b.n	800c8ca <_dtoa_r+0x3ca>
 800c9da:	2502      	movs	r5, #2
 800c9dc:	e779      	b.n	800c8d2 <_dtoa_r+0x3d2>
 800c9de:	9f00      	ldr	r7, [sp, #0]
 800c9e0:	9e03      	ldr	r6, [sp, #12]
 800c9e2:	e794      	b.n	800c90e <_dtoa_r+0x40e>
 800c9e4:	9901      	ldr	r1, [sp, #4]
 800c9e6:	4b4c      	ldr	r3, [pc, #304]	; (800cb18 <_dtoa_r+0x618>)
 800c9e8:	4431      	add	r1, r6
 800c9ea:	910d      	str	r1, [sp, #52]	; 0x34
 800c9ec:	9908      	ldr	r1, [sp, #32]
 800c9ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c9f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c9f6:	2900      	cmp	r1, #0
 800c9f8:	d043      	beq.n	800ca82 <_dtoa_r+0x582>
 800c9fa:	494d      	ldr	r1, [pc, #308]	; (800cb30 <_dtoa_r+0x630>)
 800c9fc:	2000      	movs	r0, #0
 800c9fe:	f7f3 ff2d 	bl	800085c <__aeabi_ddiv>
 800ca02:	4652      	mov	r2, sl
 800ca04:	465b      	mov	r3, fp
 800ca06:	f7f3 fc47 	bl	8000298 <__aeabi_dsub>
 800ca0a:	9d01      	ldr	r5, [sp, #4]
 800ca0c:	4682      	mov	sl, r0
 800ca0e:	468b      	mov	fp, r1
 800ca10:	4649      	mov	r1, r9
 800ca12:	4640      	mov	r0, r8
 800ca14:	f7f4 f8a8 	bl	8000b68 <__aeabi_d2iz>
 800ca18:	4606      	mov	r6, r0
 800ca1a:	f7f3 fd8b 	bl	8000534 <__aeabi_i2d>
 800ca1e:	4602      	mov	r2, r0
 800ca20:	460b      	mov	r3, r1
 800ca22:	4640      	mov	r0, r8
 800ca24:	4649      	mov	r1, r9
 800ca26:	f7f3 fc37 	bl	8000298 <__aeabi_dsub>
 800ca2a:	3630      	adds	r6, #48	; 0x30
 800ca2c:	f805 6b01 	strb.w	r6, [r5], #1
 800ca30:	4652      	mov	r2, sl
 800ca32:	465b      	mov	r3, fp
 800ca34:	4680      	mov	r8, r0
 800ca36:	4689      	mov	r9, r1
 800ca38:	f7f4 f858 	bl	8000aec <__aeabi_dcmplt>
 800ca3c:	2800      	cmp	r0, #0
 800ca3e:	d163      	bne.n	800cb08 <_dtoa_r+0x608>
 800ca40:	4642      	mov	r2, r8
 800ca42:	464b      	mov	r3, r9
 800ca44:	4936      	ldr	r1, [pc, #216]	; (800cb20 <_dtoa_r+0x620>)
 800ca46:	2000      	movs	r0, #0
 800ca48:	f7f3 fc26 	bl	8000298 <__aeabi_dsub>
 800ca4c:	4652      	mov	r2, sl
 800ca4e:	465b      	mov	r3, fp
 800ca50:	f7f4 f84c 	bl	8000aec <__aeabi_dcmplt>
 800ca54:	2800      	cmp	r0, #0
 800ca56:	f040 80b5 	bne.w	800cbc4 <_dtoa_r+0x6c4>
 800ca5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca5c:	429d      	cmp	r5, r3
 800ca5e:	d081      	beq.n	800c964 <_dtoa_r+0x464>
 800ca60:	4b30      	ldr	r3, [pc, #192]	; (800cb24 <_dtoa_r+0x624>)
 800ca62:	2200      	movs	r2, #0
 800ca64:	4650      	mov	r0, sl
 800ca66:	4659      	mov	r1, fp
 800ca68:	f7f3 fdce 	bl	8000608 <__aeabi_dmul>
 800ca6c:	4b2d      	ldr	r3, [pc, #180]	; (800cb24 <_dtoa_r+0x624>)
 800ca6e:	4682      	mov	sl, r0
 800ca70:	468b      	mov	fp, r1
 800ca72:	4640      	mov	r0, r8
 800ca74:	4649      	mov	r1, r9
 800ca76:	2200      	movs	r2, #0
 800ca78:	f7f3 fdc6 	bl	8000608 <__aeabi_dmul>
 800ca7c:	4680      	mov	r8, r0
 800ca7e:	4689      	mov	r9, r1
 800ca80:	e7c6      	b.n	800ca10 <_dtoa_r+0x510>
 800ca82:	4650      	mov	r0, sl
 800ca84:	4659      	mov	r1, fp
 800ca86:	f7f3 fdbf 	bl	8000608 <__aeabi_dmul>
 800ca8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca8c:	9d01      	ldr	r5, [sp, #4]
 800ca8e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca90:	4682      	mov	sl, r0
 800ca92:	468b      	mov	fp, r1
 800ca94:	4649      	mov	r1, r9
 800ca96:	4640      	mov	r0, r8
 800ca98:	f7f4 f866 	bl	8000b68 <__aeabi_d2iz>
 800ca9c:	4606      	mov	r6, r0
 800ca9e:	f7f3 fd49 	bl	8000534 <__aeabi_i2d>
 800caa2:	3630      	adds	r6, #48	; 0x30
 800caa4:	4602      	mov	r2, r0
 800caa6:	460b      	mov	r3, r1
 800caa8:	4640      	mov	r0, r8
 800caaa:	4649      	mov	r1, r9
 800caac:	f7f3 fbf4 	bl	8000298 <__aeabi_dsub>
 800cab0:	f805 6b01 	strb.w	r6, [r5], #1
 800cab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cab6:	429d      	cmp	r5, r3
 800cab8:	4680      	mov	r8, r0
 800caba:	4689      	mov	r9, r1
 800cabc:	f04f 0200 	mov.w	r2, #0
 800cac0:	d124      	bne.n	800cb0c <_dtoa_r+0x60c>
 800cac2:	4b1b      	ldr	r3, [pc, #108]	; (800cb30 <_dtoa_r+0x630>)
 800cac4:	4650      	mov	r0, sl
 800cac6:	4659      	mov	r1, fp
 800cac8:	f7f3 fbe8 	bl	800029c <__adddf3>
 800cacc:	4602      	mov	r2, r0
 800cace:	460b      	mov	r3, r1
 800cad0:	4640      	mov	r0, r8
 800cad2:	4649      	mov	r1, r9
 800cad4:	f7f4 f828 	bl	8000b28 <__aeabi_dcmpgt>
 800cad8:	2800      	cmp	r0, #0
 800cada:	d173      	bne.n	800cbc4 <_dtoa_r+0x6c4>
 800cadc:	4652      	mov	r2, sl
 800cade:	465b      	mov	r3, fp
 800cae0:	4913      	ldr	r1, [pc, #76]	; (800cb30 <_dtoa_r+0x630>)
 800cae2:	2000      	movs	r0, #0
 800cae4:	f7f3 fbd8 	bl	8000298 <__aeabi_dsub>
 800cae8:	4602      	mov	r2, r0
 800caea:	460b      	mov	r3, r1
 800caec:	4640      	mov	r0, r8
 800caee:	4649      	mov	r1, r9
 800caf0:	f7f3 fffc 	bl	8000aec <__aeabi_dcmplt>
 800caf4:	2800      	cmp	r0, #0
 800caf6:	f43f af35 	beq.w	800c964 <_dtoa_r+0x464>
 800cafa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cafc:	1e6b      	subs	r3, r5, #1
 800cafe:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cb04:	2b30      	cmp	r3, #48	; 0x30
 800cb06:	d0f8      	beq.n	800cafa <_dtoa_r+0x5fa>
 800cb08:	9700      	str	r7, [sp, #0]
 800cb0a:	e049      	b.n	800cba0 <_dtoa_r+0x6a0>
 800cb0c:	4b05      	ldr	r3, [pc, #20]	; (800cb24 <_dtoa_r+0x624>)
 800cb0e:	f7f3 fd7b 	bl	8000608 <__aeabi_dmul>
 800cb12:	4680      	mov	r8, r0
 800cb14:	4689      	mov	r9, r1
 800cb16:	e7bd      	b.n	800ca94 <_dtoa_r+0x594>
 800cb18:	0800ee50 	.word	0x0800ee50
 800cb1c:	0800ee28 	.word	0x0800ee28
 800cb20:	3ff00000 	.word	0x3ff00000
 800cb24:	40240000 	.word	0x40240000
 800cb28:	401c0000 	.word	0x401c0000
 800cb2c:	40140000 	.word	0x40140000
 800cb30:	3fe00000 	.word	0x3fe00000
 800cb34:	9d01      	ldr	r5, [sp, #4]
 800cb36:	4656      	mov	r6, sl
 800cb38:	465f      	mov	r7, fp
 800cb3a:	4642      	mov	r2, r8
 800cb3c:	464b      	mov	r3, r9
 800cb3e:	4630      	mov	r0, r6
 800cb40:	4639      	mov	r1, r7
 800cb42:	f7f3 fe8b 	bl	800085c <__aeabi_ddiv>
 800cb46:	f7f4 f80f 	bl	8000b68 <__aeabi_d2iz>
 800cb4a:	4682      	mov	sl, r0
 800cb4c:	f7f3 fcf2 	bl	8000534 <__aeabi_i2d>
 800cb50:	4642      	mov	r2, r8
 800cb52:	464b      	mov	r3, r9
 800cb54:	f7f3 fd58 	bl	8000608 <__aeabi_dmul>
 800cb58:	4602      	mov	r2, r0
 800cb5a:	460b      	mov	r3, r1
 800cb5c:	4630      	mov	r0, r6
 800cb5e:	4639      	mov	r1, r7
 800cb60:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cb64:	f7f3 fb98 	bl	8000298 <__aeabi_dsub>
 800cb68:	f805 6b01 	strb.w	r6, [r5], #1
 800cb6c:	9e01      	ldr	r6, [sp, #4]
 800cb6e:	9f03      	ldr	r7, [sp, #12]
 800cb70:	1bae      	subs	r6, r5, r6
 800cb72:	42b7      	cmp	r7, r6
 800cb74:	4602      	mov	r2, r0
 800cb76:	460b      	mov	r3, r1
 800cb78:	d135      	bne.n	800cbe6 <_dtoa_r+0x6e6>
 800cb7a:	f7f3 fb8f 	bl	800029c <__adddf3>
 800cb7e:	4642      	mov	r2, r8
 800cb80:	464b      	mov	r3, r9
 800cb82:	4606      	mov	r6, r0
 800cb84:	460f      	mov	r7, r1
 800cb86:	f7f3 ffcf 	bl	8000b28 <__aeabi_dcmpgt>
 800cb8a:	b9d0      	cbnz	r0, 800cbc2 <_dtoa_r+0x6c2>
 800cb8c:	4642      	mov	r2, r8
 800cb8e:	464b      	mov	r3, r9
 800cb90:	4630      	mov	r0, r6
 800cb92:	4639      	mov	r1, r7
 800cb94:	f7f3 ffa0 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb98:	b110      	cbz	r0, 800cba0 <_dtoa_r+0x6a0>
 800cb9a:	f01a 0f01 	tst.w	sl, #1
 800cb9e:	d110      	bne.n	800cbc2 <_dtoa_r+0x6c2>
 800cba0:	4620      	mov	r0, r4
 800cba2:	ee18 1a10 	vmov	r1, s16
 800cba6:	f000 faf3 	bl	800d190 <_Bfree>
 800cbaa:	2300      	movs	r3, #0
 800cbac:	9800      	ldr	r0, [sp, #0]
 800cbae:	702b      	strb	r3, [r5, #0]
 800cbb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cbb2:	3001      	adds	r0, #1
 800cbb4:	6018      	str	r0, [r3, #0]
 800cbb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	f43f acf1 	beq.w	800c5a0 <_dtoa_r+0xa0>
 800cbbe:	601d      	str	r5, [r3, #0]
 800cbc0:	e4ee      	b.n	800c5a0 <_dtoa_r+0xa0>
 800cbc2:	9f00      	ldr	r7, [sp, #0]
 800cbc4:	462b      	mov	r3, r5
 800cbc6:	461d      	mov	r5, r3
 800cbc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cbcc:	2a39      	cmp	r2, #57	; 0x39
 800cbce:	d106      	bne.n	800cbde <_dtoa_r+0x6de>
 800cbd0:	9a01      	ldr	r2, [sp, #4]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d1f7      	bne.n	800cbc6 <_dtoa_r+0x6c6>
 800cbd6:	9901      	ldr	r1, [sp, #4]
 800cbd8:	2230      	movs	r2, #48	; 0x30
 800cbda:	3701      	adds	r7, #1
 800cbdc:	700a      	strb	r2, [r1, #0]
 800cbde:	781a      	ldrb	r2, [r3, #0]
 800cbe0:	3201      	adds	r2, #1
 800cbe2:	701a      	strb	r2, [r3, #0]
 800cbe4:	e790      	b.n	800cb08 <_dtoa_r+0x608>
 800cbe6:	4ba6      	ldr	r3, [pc, #664]	; (800ce80 <_dtoa_r+0x980>)
 800cbe8:	2200      	movs	r2, #0
 800cbea:	f7f3 fd0d 	bl	8000608 <__aeabi_dmul>
 800cbee:	2200      	movs	r2, #0
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	4606      	mov	r6, r0
 800cbf4:	460f      	mov	r7, r1
 800cbf6:	f7f3 ff6f 	bl	8000ad8 <__aeabi_dcmpeq>
 800cbfa:	2800      	cmp	r0, #0
 800cbfc:	d09d      	beq.n	800cb3a <_dtoa_r+0x63a>
 800cbfe:	e7cf      	b.n	800cba0 <_dtoa_r+0x6a0>
 800cc00:	9a08      	ldr	r2, [sp, #32]
 800cc02:	2a00      	cmp	r2, #0
 800cc04:	f000 80d7 	beq.w	800cdb6 <_dtoa_r+0x8b6>
 800cc08:	9a06      	ldr	r2, [sp, #24]
 800cc0a:	2a01      	cmp	r2, #1
 800cc0c:	f300 80ba 	bgt.w	800cd84 <_dtoa_r+0x884>
 800cc10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc12:	2a00      	cmp	r2, #0
 800cc14:	f000 80b2 	beq.w	800cd7c <_dtoa_r+0x87c>
 800cc18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cc1c:	9e07      	ldr	r6, [sp, #28]
 800cc1e:	9d04      	ldr	r5, [sp, #16]
 800cc20:	9a04      	ldr	r2, [sp, #16]
 800cc22:	441a      	add	r2, r3
 800cc24:	9204      	str	r2, [sp, #16]
 800cc26:	9a05      	ldr	r2, [sp, #20]
 800cc28:	2101      	movs	r1, #1
 800cc2a:	441a      	add	r2, r3
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	9205      	str	r2, [sp, #20]
 800cc30:	f000 fb66 	bl	800d300 <__i2b>
 800cc34:	4607      	mov	r7, r0
 800cc36:	2d00      	cmp	r5, #0
 800cc38:	dd0c      	ble.n	800cc54 <_dtoa_r+0x754>
 800cc3a:	9b05      	ldr	r3, [sp, #20]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	dd09      	ble.n	800cc54 <_dtoa_r+0x754>
 800cc40:	42ab      	cmp	r3, r5
 800cc42:	9a04      	ldr	r2, [sp, #16]
 800cc44:	bfa8      	it	ge
 800cc46:	462b      	movge	r3, r5
 800cc48:	1ad2      	subs	r2, r2, r3
 800cc4a:	9204      	str	r2, [sp, #16]
 800cc4c:	9a05      	ldr	r2, [sp, #20]
 800cc4e:	1aed      	subs	r5, r5, r3
 800cc50:	1ad3      	subs	r3, r2, r3
 800cc52:	9305      	str	r3, [sp, #20]
 800cc54:	9b07      	ldr	r3, [sp, #28]
 800cc56:	b31b      	cbz	r3, 800cca0 <_dtoa_r+0x7a0>
 800cc58:	9b08      	ldr	r3, [sp, #32]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	f000 80af 	beq.w	800cdbe <_dtoa_r+0x8be>
 800cc60:	2e00      	cmp	r6, #0
 800cc62:	dd13      	ble.n	800cc8c <_dtoa_r+0x78c>
 800cc64:	4639      	mov	r1, r7
 800cc66:	4632      	mov	r2, r6
 800cc68:	4620      	mov	r0, r4
 800cc6a:	f000 fc09 	bl	800d480 <__pow5mult>
 800cc6e:	ee18 2a10 	vmov	r2, s16
 800cc72:	4601      	mov	r1, r0
 800cc74:	4607      	mov	r7, r0
 800cc76:	4620      	mov	r0, r4
 800cc78:	f000 fb58 	bl	800d32c <__multiply>
 800cc7c:	ee18 1a10 	vmov	r1, s16
 800cc80:	4680      	mov	r8, r0
 800cc82:	4620      	mov	r0, r4
 800cc84:	f000 fa84 	bl	800d190 <_Bfree>
 800cc88:	ee08 8a10 	vmov	s16, r8
 800cc8c:	9b07      	ldr	r3, [sp, #28]
 800cc8e:	1b9a      	subs	r2, r3, r6
 800cc90:	d006      	beq.n	800cca0 <_dtoa_r+0x7a0>
 800cc92:	ee18 1a10 	vmov	r1, s16
 800cc96:	4620      	mov	r0, r4
 800cc98:	f000 fbf2 	bl	800d480 <__pow5mult>
 800cc9c:	ee08 0a10 	vmov	s16, r0
 800cca0:	2101      	movs	r1, #1
 800cca2:	4620      	mov	r0, r4
 800cca4:	f000 fb2c 	bl	800d300 <__i2b>
 800cca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	4606      	mov	r6, r0
 800ccae:	f340 8088 	ble.w	800cdc2 <_dtoa_r+0x8c2>
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	4601      	mov	r1, r0
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	f000 fbe2 	bl	800d480 <__pow5mult>
 800ccbc:	9b06      	ldr	r3, [sp, #24]
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	4606      	mov	r6, r0
 800ccc2:	f340 8081 	ble.w	800cdc8 <_dtoa_r+0x8c8>
 800ccc6:	f04f 0800 	mov.w	r8, #0
 800ccca:	6933      	ldr	r3, [r6, #16]
 800cccc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ccd0:	6918      	ldr	r0, [r3, #16]
 800ccd2:	f000 fac5 	bl	800d260 <__hi0bits>
 800ccd6:	f1c0 0020 	rsb	r0, r0, #32
 800ccda:	9b05      	ldr	r3, [sp, #20]
 800ccdc:	4418      	add	r0, r3
 800ccde:	f010 001f 	ands.w	r0, r0, #31
 800cce2:	f000 8092 	beq.w	800ce0a <_dtoa_r+0x90a>
 800cce6:	f1c0 0320 	rsb	r3, r0, #32
 800ccea:	2b04      	cmp	r3, #4
 800ccec:	f340 808a 	ble.w	800ce04 <_dtoa_r+0x904>
 800ccf0:	f1c0 001c 	rsb	r0, r0, #28
 800ccf4:	9b04      	ldr	r3, [sp, #16]
 800ccf6:	4403      	add	r3, r0
 800ccf8:	9304      	str	r3, [sp, #16]
 800ccfa:	9b05      	ldr	r3, [sp, #20]
 800ccfc:	4403      	add	r3, r0
 800ccfe:	4405      	add	r5, r0
 800cd00:	9305      	str	r3, [sp, #20]
 800cd02:	9b04      	ldr	r3, [sp, #16]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	dd07      	ble.n	800cd18 <_dtoa_r+0x818>
 800cd08:	ee18 1a10 	vmov	r1, s16
 800cd0c:	461a      	mov	r2, r3
 800cd0e:	4620      	mov	r0, r4
 800cd10:	f000 fc10 	bl	800d534 <__lshift>
 800cd14:	ee08 0a10 	vmov	s16, r0
 800cd18:	9b05      	ldr	r3, [sp, #20]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	dd05      	ble.n	800cd2a <_dtoa_r+0x82a>
 800cd1e:	4631      	mov	r1, r6
 800cd20:	461a      	mov	r2, r3
 800cd22:	4620      	mov	r0, r4
 800cd24:	f000 fc06 	bl	800d534 <__lshift>
 800cd28:	4606      	mov	r6, r0
 800cd2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d06e      	beq.n	800ce0e <_dtoa_r+0x90e>
 800cd30:	ee18 0a10 	vmov	r0, s16
 800cd34:	4631      	mov	r1, r6
 800cd36:	f000 fc6d 	bl	800d614 <__mcmp>
 800cd3a:	2800      	cmp	r0, #0
 800cd3c:	da67      	bge.n	800ce0e <_dtoa_r+0x90e>
 800cd3e:	9b00      	ldr	r3, [sp, #0]
 800cd40:	3b01      	subs	r3, #1
 800cd42:	ee18 1a10 	vmov	r1, s16
 800cd46:	9300      	str	r3, [sp, #0]
 800cd48:	220a      	movs	r2, #10
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	4620      	mov	r0, r4
 800cd4e:	f000 fa41 	bl	800d1d4 <__multadd>
 800cd52:	9b08      	ldr	r3, [sp, #32]
 800cd54:	ee08 0a10 	vmov	s16, r0
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	f000 81b1 	beq.w	800d0c0 <_dtoa_r+0xbc0>
 800cd5e:	2300      	movs	r3, #0
 800cd60:	4639      	mov	r1, r7
 800cd62:	220a      	movs	r2, #10
 800cd64:	4620      	mov	r0, r4
 800cd66:	f000 fa35 	bl	800d1d4 <__multadd>
 800cd6a:	9b02      	ldr	r3, [sp, #8]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	4607      	mov	r7, r0
 800cd70:	f300 808e 	bgt.w	800ce90 <_dtoa_r+0x990>
 800cd74:	9b06      	ldr	r3, [sp, #24]
 800cd76:	2b02      	cmp	r3, #2
 800cd78:	dc51      	bgt.n	800ce1e <_dtoa_r+0x91e>
 800cd7a:	e089      	b.n	800ce90 <_dtoa_r+0x990>
 800cd7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cd7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cd82:	e74b      	b.n	800cc1c <_dtoa_r+0x71c>
 800cd84:	9b03      	ldr	r3, [sp, #12]
 800cd86:	1e5e      	subs	r6, r3, #1
 800cd88:	9b07      	ldr	r3, [sp, #28]
 800cd8a:	42b3      	cmp	r3, r6
 800cd8c:	bfbf      	itttt	lt
 800cd8e:	9b07      	ldrlt	r3, [sp, #28]
 800cd90:	9607      	strlt	r6, [sp, #28]
 800cd92:	1af2      	sublt	r2, r6, r3
 800cd94:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cd96:	bfb6      	itet	lt
 800cd98:	189b      	addlt	r3, r3, r2
 800cd9a:	1b9e      	subge	r6, r3, r6
 800cd9c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cd9e:	9b03      	ldr	r3, [sp, #12]
 800cda0:	bfb8      	it	lt
 800cda2:	2600      	movlt	r6, #0
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	bfb7      	itett	lt
 800cda8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cdac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cdb0:	1a9d      	sublt	r5, r3, r2
 800cdb2:	2300      	movlt	r3, #0
 800cdb4:	e734      	b.n	800cc20 <_dtoa_r+0x720>
 800cdb6:	9e07      	ldr	r6, [sp, #28]
 800cdb8:	9d04      	ldr	r5, [sp, #16]
 800cdba:	9f08      	ldr	r7, [sp, #32]
 800cdbc:	e73b      	b.n	800cc36 <_dtoa_r+0x736>
 800cdbe:	9a07      	ldr	r2, [sp, #28]
 800cdc0:	e767      	b.n	800cc92 <_dtoa_r+0x792>
 800cdc2:	9b06      	ldr	r3, [sp, #24]
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	dc18      	bgt.n	800cdfa <_dtoa_r+0x8fa>
 800cdc8:	f1ba 0f00 	cmp.w	sl, #0
 800cdcc:	d115      	bne.n	800cdfa <_dtoa_r+0x8fa>
 800cdce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cdd2:	b993      	cbnz	r3, 800cdfa <_dtoa_r+0x8fa>
 800cdd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cdd8:	0d1b      	lsrs	r3, r3, #20
 800cdda:	051b      	lsls	r3, r3, #20
 800cddc:	b183      	cbz	r3, 800ce00 <_dtoa_r+0x900>
 800cdde:	9b04      	ldr	r3, [sp, #16]
 800cde0:	3301      	adds	r3, #1
 800cde2:	9304      	str	r3, [sp, #16]
 800cde4:	9b05      	ldr	r3, [sp, #20]
 800cde6:	3301      	adds	r3, #1
 800cde8:	9305      	str	r3, [sp, #20]
 800cdea:	f04f 0801 	mov.w	r8, #1
 800cdee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	f47f af6a 	bne.w	800ccca <_dtoa_r+0x7ca>
 800cdf6:	2001      	movs	r0, #1
 800cdf8:	e76f      	b.n	800ccda <_dtoa_r+0x7da>
 800cdfa:	f04f 0800 	mov.w	r8, #0
 800cdfe:	e7f6      	b.n	800cdee <_dtoa_r+0x8ee>
 800ce00:	4698      	mov	r8, r3
 800ce02:	e7f4      	b.n	800cdee <_dtoa_r+0x8ee>
 800ce04:	f43f af7d 	beq.w	800cd02 <_dtoa_r+0x802>
 800ce08:	4618      	mov	r0, r3
 800ce0a:	301c      	adds	r0, #28
 800ce0c:	e772      	b.n	800ccf4 <_dtoa_r+0x7f4>
 800ce0e:	9b03      	ldr	r3, [sp, #12]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	dc37      	bgt.n	800ce84 <_dtoa_r+0x984>
 800ce14:	9b06      	ldr	r3, [sp, #24]
 800ce16:	2b02      	cmp	r3, #2
 800ce18:	dd34      	ble.n	800ce84 <_dtoa_r+0x984>
 800ce1a:	9b03      	ldr	r3, [sp, #12]
 800ce1c:	9302      	str	r3, [sp, #8]
 800ce1e:	9b02      	ldr	r3, [sp, #8]
 800ce20:	b96b      	cbnz	r3, 800ce3e <_dtoa_r+0x93e>
 800ce22:	4631      	mov	r1, r6
 800ce24:	2205      	movs	r2, #5
 800ce26:	4620      	mov	r0, r4
 800ce28:	f000 f9d4 	bl	800d1d4 <__multadd>
 800ce2c:	4601      	mov	r1, r0
 800ce2e:	4606      	mov	r6, r0
 800ce30:	ee18 0a10 	vmov	r0, s16
 800ce34:	f000 fbee 	bl	800d614 <__mcmp>
 800ce38:	2800      	cmp	r0, #0
 800ce3a:	f73f adbb 	bgt.w	800c9b4 <_dtoa_r+0x4b4>
 800ce3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce40:	9d01      	ldr	r5, [sp, #4]
 800ce42:	43db      	mvns	r3, r3
 800ce44:	9300      	str	r3, [sp, #0]
 800ce46:	f04f 0800 	mov.w	r8, #0
 800ce4a:	4631      	mov	r1, r6
 800ce4c:	4620      	mov	r0, r4
 800ce4e:	f000 f99f 	bl	800d190 <_Bfree>
 800ce52:	2f00      	cmp	r7, #0
 800ce54:	f43f aea4 	beq.w	800cba0 <_dtoa_r+0x6a0>
 800ce58:	f1b8 0f00 	cmp.w	r8, #0
 800ce5c:	d005      	beq.n	800ce6a <_dtoa_r+0x96a>
 800ce5e:	45b8      	cmp	r8, r7
 800ce60:	d003      	beq.n	800ce6a <_dtoa_r+0x96a>
 800ce62:	4641      	mov	r1, r8
 800ce64:	4620      	mov	r0, r4
 800ce66:	f000 f993 	bl	800d190 <_Bfree>
 800ce6a:	4639      	mov	r1, r7
 800ce6c:	4620      	mov	r0, r4
 800ce6e:	f000 f98f 	bl	800d190 <_Bfree>
 800ce72:	e695      	b.n	800cba0 <_dtoa_r+0x6a0>
 800ce74:	2600      	movs	r6, #0
 800ce76:	4637      	mov	r7, r6
 800ce78:	e7e1      	b.n	800ce3e <_dtoa_r+0x93e>
 800ce7a:	9700      	str	r7, [sp, #0]
 800ce7c:	4637      	mov	r7, r6
 800ce7e:	e599      	b.n	800c9b4 <_dtoa_r+0x4b4>
 800ce80:	40240000 	.word	0x40240000
 800ce84:	9b08      	ldr	r3, [sp, #32]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	f000 80ca 	beq.w	800d020 <_dtoa_r+0xb20>
 800ce8c:	9b03      	ldr	r3, [sp, #12]
 800ce8e:	9302      	str	r3, [sp, #8]
 800ce90:	2d00      	cmp	r5, #0
 800ce92:	dd05      	ble.n	800cea0 <_dtoa_r+0x9a0>
 800ce94:	4639      	mov	r1, r7
 800ce96:	462a      	mov	r2, r5
 800ce98:	4620      	mov	r0, r4
 800ce9a:	f000 fb4b 	bl	800d534 <__lshift>
 800ce9e:	4607      	mov	r7, r0
 800cea0:	f1b8 0f00 	cmp.w	r8, #0
 800cea4:	d05b      	beq.n	800cf5e <_dtoa_r+0xa5e>
 800cea6:	6879      	ldr	r1, [r7, #4]
 800cea8:	4620      	mov	r0, r4
 800ceaa:	f000 f931 	bl	800d110 <_Balloc>
 800ceae:	4605      	mov	r5, r0
 800ceb0:	b928      	cbnz	r0, 800cebe <_dtoa_r+0x9be>
 800ceb2:	4b87      	ldr	r3, [pc, #540]	; (800d0d0 <_dtoa_r+0xbd0>)
 800ceb4:	4602      	mov	r2, r0
 800ceb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ceba:	f7ff bb3b 	b.w	800c534 <_dtoa_r+0x34>
 800cebe:	693a      	ldr	r2, [r7, #16]
 800cec0:	3202      	adds	r2, #2
 800cec2:	0092      	lsls	r2, r2, #2
 800cec4:	f107 010c 	add.w	r1, r7, #12
 800cec8:	300c      	adds	r0, #12
 800ceca:	f000 f913 	bl	800d0f4 <memcpy>
 800cece:	2201      	movs	r2, #1
 800ced0:	4629      	mov	r1, r5
 800ced2:	4620      	mov	r0, r4
 800ced4:	f000 fb2e 	bl	800d534 <__lshift>
 800ced8:	9b01      	ldr	r3, [sp, #4]
 800ceda:	f103 0901 	add.w	r9, r3, #1
 800cede:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cee2:	4413      	add	r3, r2
 800cee4:	9305      	str	r3, [sp, #20]
 800cee6:	f00a 0301 	and.w	r3, sl, #1
 800ceea:	46b8      	mov	r8, r7
 800ceec:	9304      	str	r3, [sp, #16]
 800ceee:	4607      	mov	r7, r0
 800cef0:	4631      	mov	r1, r6
 800cef2:	ee18 0a10 	vmov	r0, s16
 800cef6:	f7ff fa77 	bl	800c3e8 <quorem>
 800cefa:	4641      	mov	r1, r8
 800cefc:	9002      	str	r0, [sp, #8]
 800cefe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cf02:	ee18 0a10 	vmov	r0, s16
 800cf06:	f000 fb85 	bl	800d614 <__mcmp>
 800cf0a:	463a      	mov	r2, r7
 800cf0c:	9003      	str	r0, [sp, #12]
 800cf0e:	4631      	mov	r1, r6
 800cf10:	4620      	mov	r0, r4
 800cf12:	f000 fb9b 	bl	800d64c <__mdiff>
 800cf16:	68c2      	ldr	r2, [r0, #12]
 800cf18:	f109 3bff 	add.w	fp, r9, #4294967295
 800cf1c:	4605      	mov	r5, r0
 800cf1e:	bb02      	cbnz	r2, 800cf62 <_dtoa_r+0xa62>
 800cf20:	4601      	mov	r1, r0
 800cf22:	ee18 0a10 	vmov	r0, s16
 800cf26:	f000 fb75 	bl	800d614 <__mcmp>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	4629      	mov	r1, r5
 800cf2e:	4620      	mov	r0, r4
 800cf30:	9207      	str	r2, [sp, #28]
 800cf32:	f000 f92d 	bl	800d190 <_Bfree>
 800cf36:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800cf3a:	ea43 0102 	orr.w	r1, r3, r2
 800cf3e:	9b04      	ldr	r3, [sp, #16]
 800cf40:	430b      	orrs	r3, r1
 800cf42:	464d      	mov	r5, r9
 800cf44:	d10f      	bne.n	800cf66 <_dtoa_r+0xa66>
 800cf46:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cf4a:	d02a      	beq.n	800cfa2 <_dtoa_r+0xaa2>
 800cf4c:	9b03      	ldr	r3, [sp, #12]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	dd02      	ble.n	800cf58 <_dtoa_r+0xa58>
 800cf52:	9b02      	ldr	r3, [sp, #8]
 800cf54:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cf58:	f88b a000 	strb.w	sl, [fp]
 800cf5c:	e775      	b.n	800ce4a <_dtoa_r+0x94a>
 800cf5e:	4638      	mov	r0, r7
 800cf60:	e7ba      	b.n	800ced8 <_dtoa_r+0x9d8>
 800cf62:	2201      	movs	r2, #1
 800cf64:	e7e2      	b.n	800cf2c <_dtoa_r+0xa2c>
 800cf66:	9b03      	ldr	r3, [sp, #12]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	db04      	blt.n	800cf76 <_dtoa_r+0xa76>
 800cf6c:	9906      	ldr	r1, [sp, #24]
 800cf6e:	430b      	orrs	r3, r1
 800cf70:	9904      	ldr	r1, [sp, #16]
 800cf72:	430b      	orrs	r3, r1
 800cf74:	d122      	bne.n	800cfbc <_dtoa_r+0xabc>
 800cf76:	2a00      	cmp	r2, #0
 800cf78:	ddee      	ble.n	800cf58 <_dtoa_r+0xa58>
 800cf7a:	ee18 1a10 	vmov	r1, s16
 800cf7e:	2201      	movs	r2, #1
 800cf80:	4620      	mov	r0, r4
 800cf82:	f000 fad7 	bl	800d534 <__lshift>
 800cf86:	4631      	mov	r1, r6
 800cf88:	ee08 0a10 	vmov	s16, r0
 800cf8c:	f000 fb42 	bl	800d614 <__mcmp>
 800cf90:	2800      	cmp	r0, #0
 800cf92:	dc03      	bgt.n	800cf9c <_dtoa_r+0xa9c>
 800cf94:	d1e0      	bne.n	800cf58 <_dtoa_r+0xa58>
 800cf96:	f01a 0f01 	tst.w	sl, #1
 800cf9a:	d0dd      	beq.n	800cf58 <_dtoa_r+0xa58>
 800cf9c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cfa0:	d1d7      	bne.n	800cf52 <_dtoa_r+0xa52>
 800cfa2:	2339      	movs	r3, #57	; 0x39
 800cfa4:	f88b 3000 	strb.w	r3, [fp]
 800cfa8:	462b      	mov	r3, r5
 800cfaa:	461d      	mov	r5, r3
 800cfac:	3b01      	subs	r3, #1
 800cfae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cfb2:	2a39      	cmp	r2, #57	; 0x39
 800cfb4:	d071      	beq.n	800d09a <_dtoa_r+0xb9a>
 800cfb6:	3201      	adds	r2, #1
 800cfb8:	701a      	strb	r2, [r3, #0]
 800cfba:	e746      	b.n	800ce4a <_dtoa_r+0x94a>
 800cfbc:	2a00      	cmp	r2, #0
 800cfbe:	dd07      	ble.n	800cfd0 <_dtoa_r+0xad0>
 800cfc0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cfc4:	d0ed      	beq.n	800cfa2 <_dtoa_r+0xaa2>
 800cfc6:	f10a 0301 	add.w	r3, sl, #1
 800cfca:	f88b 3000 	strb.w	r3, [fp]
 800cfce:	e73c      	b.n	800ce4a <_dtoa_r+0x94a>
 800cfd0:	9b05      	ldr	r3, [sp, #20]
 800cfd2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800cfd6:	4599      	cmp	r9, r3
 800cfd8:	d047      	beq.n	800d06a <_dtoa_r+0xb6a>
 800cfda:	ee18 1a10 	vmov	r1, s16
 800cfde:	2300      	movs	r3, #0
 800cfe0:	220a      	movs	r2, #10
 800cfe2:	4620      	mov	r0, r4
 800cfe4:	f000 f8f6 	bl	800d1d4 <__multadd>
 800cfe8:	45b8      	cmp	r8, r7
 800cfea:	ee08 0a10 	vmov	s16, r0
 800cfee:	f04f 0300 	mov.w	r3, #0
 800cff2:	f04f 020a 	mov.w	r2, #10
 800cff6:	4641      	mov	r1, r8
 800cff8:	4620      	mov	r0, r4
 800cffa:	d106      	bne.n	800d00a <_dtoa_r+0xb0a>
 800cffc:	f000 f8ea 	bl	800d1d4 <__multadd>
 800d000:	4680      	mov	r8, r0
 800d002:	4607      	mov	r7, r0
 800d004:	f109 0901 	add.w	r9, r9, #1
 800d008:	e772      	b.n	800cef0 <_dtoa_r+0x9f0>
 800d00a:	f000 f8e3 	bl	800d1d4 <__multadd>
 800d00e:	4639      	mov	r1, r7
 800d010:	4680      	mov	r8, r0
 800d012:	2300      	movs	r3, #0
 800d014:	220a      	movs	r2, #10
 800d016:	4620      	mov	r0, r4
 800d018:	f000 f8dc 	bl	800d1d4 <__multadd>
 800d01c:	4607      	mov	r7, r0
 800d01e:	e7f1      	b.n	800d004 <_dtoa_r+0xb04>
 800d020:	9b03      	ldr	r3, [sp, #12]
 800d022:	9302      	str	r3, [sp, #8]
 800d024:	9d01      	ldr	r5, [sp, #4]
 800d026:	ee18 0a10 	vmov	r0, s16
 800d02a:	4631      	mov	r1, r6
 800d02c:	f7ff f9dc 	bl	800c3e8 <quorem>
 800d030:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d034:	9b01      	ldr	r3, [sp, #4]
 800d036:	f805 ab01 	strb.w	sl, [r5], #1
 800d03a:	1aea      	subs	r2, r5, r3
 800d03c:	9b02      	ldr	r3, [sp, #8]
 800d03e:	4293      	cmp	r3, r2
 800d040:	dd09      	ble.n	800d056 <_dtoa_r+0xb56>
 800d042:	ee18 1a10 	vmov	r1, s16
 800d046:	2300      	movs	r3, #0
 800d048:	220a      	movs	r2, #10
 800d04a:	4620      	mov	r0, r4
 800d04c:	f000 f8c2 	bl	800d1d4 <__multadd>
 800d050:	ee08 0a10 	vmov	s16, r0
 800d054:	e7e7      	b.n	800d026 <_dtoa_r+0xb26>
 800d056:	9b02      	ldr	r3, [sp, #8]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	bfc8      	it	gt
 800d05c:	461d      	movgt	r5, r3
 800d05e:	9b01      	ldr	r3, [sp, #4]
 800d060:	bfd8      	it	le
 800d062:	2501      	movle	r5, #1
 800d064:	441d      	add	r5, r3
 800d066:	f04f 0800 	mov.w	r8, #0
 800d06a:	ee18 1a10 	vmov	r1, s16
 800d06e:	2201      	movs	r2, #1
 800d070:	4620      	mov	r0, r4
 800d072:	f000 fa5f 	bl	800d534 <__lshift>
 800d076:	4631      	mov	r1, r6
 800d078:	ee08 0a10 	vmov	s16, r0
 800d07c:	f000 faca 	bl	800d614 <__mcmp>
 800d080:	2800      	cmp	r0, #0
 800d082:	dc91      	bgt.n	800cfa8 <_dtoa_r+0xaa8>
 800d084:	d102      	bne.n	800d08c <_dtoa_r+0xb8c>
 800d086:	f01a 0f01 	tst.w	sl, #1
 800d08a:	d18d      	bne.n	800cfa8 <_dtoa_r+0xaa8>
 800d08c:	462b      	mov	r3, r5
 800d08e:	461d      	mov	r5, r3
 800d090:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d094:	2a30      	cmp	r2, #48	; 0x30
 800d096:	d0fa      	beq.n	800d08e <_dtoa_r+0xb8e>
 800d098:	e6d7      	b.n	800ce4a <_dtoa_r+0x94a>
 800d09a:	9a01      	ldr	r2, [sp, #4]
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d184      	bne.n	800cfaa <_dtoa_r+0xaaa>
 800d0a0:	9b00      	ldr	r3, [sp, #0]
 800d0a2:	3301      	adds	r3, #1
 800d0a4:	9300      	str	r3, [sp, #0]
 800d0a6:	2331      	movs	r3, #49	; 0x31
 800d0a8:	7013      	strb	r3, [r2, #0]
 800d0aa:	e6ce      	b.n	800ce4a <_dtoa_r+0x94a>
 800d0ac:	4b09      	ldr	r3, [pc, #36]	; (800d0d4 <_dtoa_r+0xbd4>)
 800d0ae:	f7ff ba95 	b.w	800c5dc <_dtoa_r+0xdc>
 800d0b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	f47f aa6e 	bne.w	800c596 <_dtoa_r+0x96>
 800d0ba:	4b07      	ldr	r3, [pc, #28]	; (800d0d8 <_dtoa_r+0xbd8>)
 800d0bc:	f7ff ba8e 	b.w	800c5dc <_dtoa_r+0xdc>
 800d0c0:	9b02      	ldr	r3, [sp, #8]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	dcae      	bgt.n	800d024 <_dtoa_r+0xb24>
 800d0c6:	9b06      	ldr	r3, [sp, #24]
 800d0c8:	2b02      	cmp	r3, #2
 800d0ca:	f73f aea8 	bgt.w	800ce1e <_dtoa_r+0x91e>
 800d0ce:	e7a9      	b.n	800d024 <_dtoa_r+0xb24>
 800d0d0:	0800edbb 	.word	0x0800edbb
 800d0d4:	0800ed18 	.word	0x0800ed18
 800d0d8:	0800ed3c 	.word	0x0800ed3c

0800d0dc <_localeconv_r>:
 800d0dc:	4800      	ldr	r0, [pc, #0]	; (800d0e0 <_localeconv_r+0x4>)
 800d0de:	4770      	bx	lr
 800d0e0:	20000264 	.word	0x20000264

0800d0e4 <malloc>:
 800d0e4:	4b02      	ldr	r3, [pc, #8]	; (800d0f0 <malloc+0xc>)
 800d0e6:	4601      	mov	r1, r0
 800d0e8:	6818      	ldr	r0, [r3, #0]
 800d0ea:	f000 bc17 	b.w	800d91c <_malloc_r>
 800d0ee:	bf00      	nop
 800d0f0:	20000110 	.word	0x20000110

0800d0f4 <memcpy>:
 800d0f4:	440a      	add	r2, r1
 800d0f6:	4291      	cmp	r1, r2
 800d0f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d0fc:	d100      	bne.n	800d100 <memcpy+0xc>
 800d0fe:	4770      	bx	lr
 800d100:	b510      	push	{r4, lr}
 800d102:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d106:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d10a:	4291      	cmp	r1, r2
 800d10c:	d1f9      	bne.n	800d102 <memcpy+0xe>
 800d10e:	bd10      	pop	{r4, pc}

0800d110 <_Balloc>:
 800d110:	b570      	push	{r4, r5, r6, lr}
 800d112:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d114:	4604      	mov	r4, r0
 800d116:	460d      	mov	r5, r1
 800d118:	b976      	cbnz	r6, 800d138 <_Balloc+0x28>
 800d11a:	2010      	movs	r0, #16
 800d11c:	f7ff ffe2 	bl	800d0e4 <malloc>
 800d120:	4602      	mov	r2, r0
 800d122:	6260      	str	r0, [r4, #36]	; 0x24
 800d124:	b920      	cbnz	r0, 800d130 <_Balloc+0x20>
 800d126:	4b18      	ldr	r3, [pc, #96]	; (800d188 <_Balloc+0x78>)
 800d128:	4818      	ldr	r0, [pc, #96]	; (800d18c <_Balloc+0x7c>)
 800d12a:	2166      	movs	r1, #102	; 0x66
 800d12c:	f000 fdd6 	bl	800dcdc <__assert_func>
 800d130:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d134:	6006      	str	r6, [r0, #0]
 800d136:	60c6      	str	r6, [r0, #12]
 800d138:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d13a:	68f3      	ldr	r3, [r6, #12]
 800d13c:	b183      	cbz	r3, 800d160 <_Balloc+0x50>
 800d13e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d140:	68db      	ldr	r3, [r3, #12]
 800d142:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d146:	b9b8      	cbnz	r0, 800d178 <_Balloc+0x68>
 800d148:	2101      	movs	r1, #1
 800d14a:	fa01 f605 	lsl.w	r6, r1, r5
 800d14e:	1d72      	adds	r2, r6, #5
 800d150:	0092      	lsls	r2, r2, #2
 800d152:	4620      	mov	r0, r4
 800d154:	f000 fb60 	bl	800d818 <_calloc_r>
 800d158:	b160      	cbz	r0, 800d174 <_Balloc+0x64>
 800d15a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d15e:	e00e      	b.n	800d17e <_Balloc+0x6e>
 800d160:	2221      	movs	r2, #33	; 0x21
 800d162:	2104      	movs	r1, #4
 800d164:	4620      	mov	r0, r4
 800d166:	f000 fb57 	bl	800d818 <_calloc_r>
 800d16a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d16c:	60f0      	str	r0, [r6, #12]
 800d16e:	68db      	ldr	r3, [r3, #12]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d1e4      	bne.n	800d13e <_Balloc+0x2e>
 800d174:	2000      	movs	r0, #0
 800d176:	bd70      	pop	{r4, r5, r6, pc}
 800d178:	6802      	ldr	r2, [r0, #0]
 800d17a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d17e:	2300      	movs	r3, #0
 800d180:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d184:	e7f7      	b.n	800d176 <_Balloc+0x66>
 800d186:	bf00      	nop
 800d188:	0800ed49 	.word	0x0800ed49
 800d18c:	0800edcc 	.word	0x0800edcc

0800d190 <_Bfree>:
 800d190:	b570      	push	{r4, r5, r6, lr}
 800d192:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d194:	4605      	mov	r5, r0
 800d196:	460c      	mov	r4, r1
 800d198:	b976      	cbnz	r6, 800d1b8 <_Bfree+0x28>
 800d19a:	2010      	movs	r0, #16
 800d19c:	f7ff ffa2 	bl	800d0e4 <malloc>
 800d1a0:	4602      	mov	r2, r0
 800d1a2:	6268      	str	r0, [r5, #36]	; 0x24
 800d1a4:	b920      	cbnz	r0, 800d1b0 <_Bfree+0x20>
 800d1a6:	4b09      	ldr	r3, [pc, #36]	; (800d1cc <_Bfree+0x3c>)
 800d1a8:	4809      	ldr	r0, [pc, #36]	; (800d1d0 <_Bfree+0x40>)
 800d1aa:	218a      	movs	r1, #138	; 0x8a
 800d1ac:	f000 fd96 	bl	800dcdc <__assert_func>
 800d1b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1b4:	6006      	str	r6, [r0, #0]
 800d1b6:	60c6      	str	r6, [r0, #12]
 800d1b8:	b13c      	cbz	r4, 800d1ca <_Bfree+0x3a>
 800d1ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d1bc:	6862      	ldr	r2, [r4, #4]
 800d1be:	68db      	ldr	r3, [r3, #12]
 800d1c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d1c4:	6021      	str	r1, [r4, #0]
 800d1c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d1ca:	bd70      	pop	{r4, r5, r6, pc}
 800d1cc:	0800ed49 	.word	0x0800ed49
 800d1d0:	0800edcc 	.word	0x0800edcc

0800d1d4 <__multadd>:
 800d1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1d8:	690d      	ldr	r5, [r1, #16]
 800d1da:	4607      	mov	r7, r0
 800d1dc:	460c      	mov	r4, r1
 800d1de:	461e      	mov	r6, r3
 800d1e0:	f101 0c14 	add.w	ip, r1, #20
 800d1e4:	2000      	movs	r0, #0
 800d1e6:	f8dc 3000 	ldr.w	r3, [ip]
 800d1ea:	b299      	uxth	r1, r3
 800d1ec:	fb02 6101 	mla	r1, r2, r1, r6
 800d1f0:	0c1e      	lsrs	r6, r3, #16
 800d1f2:	0c0b      	lsrs	r3, r1, #16
 800d1f4:	fb02 3306 	mla	r3, r2, r6, r3
 800d1f8:	b289      	uxth	r1, r1
 800d1fa:	3001      	adds	r0, #1
 800d1fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d200:	4285      	cmp	r5, r0
 800d202:	f84c 1b04 	str.w	r1, [ip], #4
 800d206:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d20a:	dcec      	bgt.n	800d1e6 <__multadd+0x12>
 800d20c:	b30e      	cbz	r6, 800d252 <__multadd+0x7e>
 800d20e:	68a3      	ldr	r3, [r4, #8]
 800d210:	42ab      	cmp	r3, r5
 800d212:	dc19      	bgt.n	800d248 <__multadd+0x74>
 800d214:	6861      	ldr	r1, [r4, #4]
 800d216:	4638      	mov	r0, r7
 800d218:	3101      	adds	r1, #1
 800d21a:	f7ff ff79 	bl	800d110 <_Balloc>
 800d21e:	4680      	mov	r8, r0
 800d220:	b928      	cbnz	r0, 800d22e <__multadd+0x5a>
 800d222:	4602      	mov	r2, r0
 800d224:	4b0c      	ldr	r3, [pc, #48]	; (800d258 <__multadd+0x84>)
 800d226:	480d      	ldr	r0, [pc, #52]	; (800d25c <__multadd+0x88>)
 800d228:	21b5      	movs	r1, #181	; 0xb5
 800d22a:	f000 fd57 	bl	800dcdc <__assert_func>
 800d22e:	6922      	ldr	r2, [r4, #16]
 800d230:	3202      	adds	r2, #2
 800d232:	f104 010c 	add.w	r1, r4, #12
 800d236:	0092      	lsls	r2, r2, #2
 800d238:	300c      	adds	r0, #12
 800d23a:	f7ff ff5b 	bl	800d0f4 <memcpy>
 800d23e:	4621      	mov	r1, r4
 800d240:	4638      	mov	r0, r7
 800d242:	f7ff ffa5 	bl	800d190 <_Bfree>
 800d246:	4644      	mov	r4, r8
 800d248:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d24c:	3501      	adds	r5, #1
 800d24e:	615e      	str	r6, [r3, #20]
 800d250:	6125      	str	r5, [r4, #16]
 800d252:	4620      	mov	r0, r4
 800d254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d258:	0800edbb 	.word	0x0800edbb
 800d25c:	0800edcc 	.word	0x0800edcc

0800d260 <__hi0bits>:
 800d260:	0c03      	lsrs	r3, r0, #16
 800d262:	041b      	lsls	r3, r3, #16
 800d264:	b9d3      	cbnz	r3, 800d29c <__hi0bits+0x3c>
 800d266:	0400      	lsls	r0, r0, #16
 800d268:	2310      	movs	r3, #16
 800d26a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d26e:	bf04      	itt	eq
 800d270:	0200      	lsleq	r0, r0, #8
 800d272:	3308      	addeq	r3, #8
 800d274:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d278:	bf04      	itt	eq
 800d27a:	0100      	lsleq	r0, r0, #4
 800d27c:	3304      	addeq	r3, #4
 800d27e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d282:	bf04      	itt	eq
 800d284:	0080      	lsleq	r0, r0, #2
 800d286:	3302      	addeq	r3, #2
 800d288:	2800      	cmp	r0, #0
 800d28a:	db05      	blt.n	800d298 <__hi0bits+0x38>
 800d28c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d290:	f103 0301 	add.w	r3, r3, #1
 800d294:	bf08      	it	eq
 800d296:	2320      	moveq	r3, #32
 800d298:	4618      	mov	r0, r3
 800d29a:	4770      	bx	lr
 800d29c:	2300      	movs	r3, #0
 800d29e:	e7e4      	b.n	800d26a <__hi0bits+0xa>

0800d2a0 <__lo0bits>:
 800d2a0:	6803      	ldr	r3, [r0, #0]
 800d2a2:	f013 0207 	ands.w	r2, r3, #7
 800d2a6:	4601      	mov	r1, r0
 800d2a8:	d00b      	beq.n	800d2c2 <__lo0bits+0x22>
 800d2aa:	07da      	lsls	r2, r3, #31
 800d2ac:	d423      	bmi.n	800d2f6 <__lo0bits+0x56>
 800d2ae:	0798      	lsls	r0, r3, #30
 800d2b0:	bf49      	itett	mi
 800d2b2:	085b      	lsrmi	r3, r3, #1
 800d2b4:	089b      	lsrpl	r3, r3, #2
 800d2b6:	2001      	movmi	r0, #1
 800d2b8:	600b      	strmi	r3, [r1, #0]
 800d2ba:	bf5c      	itt	pl
 800d2bc:	600b      	strpl	r3, [r1, #0]
 800d2be:	2002      	movpl	r0, #2
 800d2c0:	4770      	bx	lr
 800d2c2:	b298      	uxth	r0, r3
 800d2c4:	b9a8      	cbnz	r0, 800d2f2 <__lo0bits+0x52>
 800d2c6:	0c1b      	lsrs	r3, r3, #16
 800d2c8:	2010      	movs	r0, #16
 800d2ca:	b2da      	uxtb	r2, r3
 800d2cc:	b90a      	cbnz	r2, 800d2d2 <__lo0bits+0x32>
 800d2ce:	3008      	adds	r0, #8
 800d2d0:	0a1b      	lsrs	r3, r3, #8
 800d2d2:	071a      	lsls	r2, r3, #28
 800d2d4:	bf04      	itt	eq
 800d2d6:	091b      	lsreq	r3, r3, #4
 800d2d8:	3004      	addeq	r0, #4
 800d2da:	079a      	lsls	r2, r3, #30
 800d2dc:	bf04      	itt	eq
 800d2de:	089b      	lsreq	r3, r3, #2
 800d2e0:	3002      	addeq	r0, #2
 800d2e2:	07da      	lsls	r2, r3, #31
 800d2e4:	d403      	bmi.n	800d2ee <__lo0bits+0x4e>
 800d2e6:	085b      	lsrs	r3, r3, #1
 800d2e8:	f100 0001 	add.w	r0, r0, #1
 800d2ec:	d005      	beq.n	800d2fa <__lo0bits+0x5a>
 800d2ee:	600b      	str	r3, [r1, #0]
 800d2f0:	4770      	bx	lr
 800d2f2:	4610      	mov	r0, r2
 800d2f4:	e7e9      	b.n	800d2ca <__lo0bits+0x2a>
 800d2f6:	2000      	movs	r0, #0
 800d2f8:	4770      	bx	lr
 800d2fa:	2020      	movs	r0, #32
 800d2fc:	4770      	bx	lr
	...

0800d300 <__i2b>:
 800d300:	b510      	push	{r4, lr}
 800d302:	460c      	mov	r4, r1
 800d304:	2101      	movs	r1, #1
 800d306:	f7ff ff03 	bl	800d110 <_Balloc>
 800d30a:	4602      	mov	r2, r0
 800d30c:	b928      	cbnz	r0, 800d31a <__i2b+0x1a>
 800d30e:	4b05      	ldr	r3, [pc, #20]	; (800d324 <__i2b+0x24>)
 800d310:	4805      	ldr	r0, [pc, #20]	; (800d328 <__i2b+0x28>)
 800d312:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d316:	f000 fce1 	bl	800dcdc <__assert_func>
 800d31a:	2301      	movs	r3, #1
 800d31c:	6144      	str	r4, [r0, #20]
 800d31e:	6103      	str	r3, [r0, #16]
 800d320:	bd10      	pop	{r4, pc}
 800d322:	bf00      	nop
 800d324:	0800edbb 	.word	0x0800edbb
 800d328:	0800edcc 	.word	0x0800edcc

0800d32c <__multiply>:
 800d32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d330:	4691      	mov	r9, r2
 800d332:	690a      	ldr	r2, [r1, #16]
 800d334:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d338:	429a      	cmp	r2, r3
 800d33a:	bfb8      	it	lt
 800d33c:	460b      	movlt	r3, r1
 800d33e:	460c      	mov	r4, r1
 800d340:	bfbc      	itt	lt
 800d342:	464c      	movlt	r4, r9
 800d344:	4699      	movlt	r9, r3
 800d346:	6927      	ldr	r7, [r4, #16]
 800d348:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d34c:	68a3      	ldr	r3, [r4, #8]
 800d34e:	6861      	ldr	r1, [r4, #4]
 800d350:	eb07 060a 	add.w	r6, r7, sl
 800d354:	42b3      	cmp	r3, r6
 800d356:	b085      	sub	sp, #20
 800d358:	bfb8      	it	lt
 800d35a:	3101      	addlt	r1, #1
 800d35c:	f7ff fed8 	bl	800d110 <_Balloc>
 800d360:	b930      	cbnz	r0, 800d370 <__multiply+0x44>
 800d362:	4602      	mov	r2, r0
 800d364:	4b44      	ldr	r3, [pc, #272]	; (800d478 <__multiply+0x14c>)
 800d366:	4845      	ldr	r0, [pc, #276]	; (800d47c <__multiply+0x150>)
 800d368:	f240 115d 	movw	r1, #349	; 0x15d
 800d36c:	f000 fcb6 	bl	800dcdc <__assert_func>
 800d370:	f100 0514 	add.w	r5, r0, #20
 800d374:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d378:	462b      	mov	r3, r5
 800d37a:	2200      	movs	r2, #0
 800d37c:	4543      	cmp	r3, r8
 800d37e:	d321      	bcc.n	800d3c4 <__multiply+0x98>
 800d380:	f104 0314 	add.w	r3, r4, #20
 800d384:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d388:	f109 0314 	add.w	r3, r9, #20
 800d38c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d390:	9202      	str	r2, [sp, #8]
 800d392:	1b3a      	subs	r2, r7, r4
 800d394:	3a15      	subs	r2, #21
 800d396:	f022 0203 	bic.w	r2, r2, #3
 800d39a:	3204      	adds	r2, #4
 800d39c:	f104 0115 	add.w	r1, r4, #21
 800d3a0:	428f      	cmp	r7, r1
 800d3a2:	bf38      	it	cc
 800d3a4:	2204      	movcc	r2, #4
 800d3a6:	9201      	str	r2, [sp, #4]
 800d3a8:	9a02      	ldr	r2, [sp, #8]
 800d3aa:	9303      	str	r3, [sp, #12]
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d80c      	bhi.n	800d3ca <__multiply+0x9e>
 800d3b0:	2e00      	cmp	r6, #0
 800d3b2:	dd03      	ble.n	800d3bc <__multiply+0x90>
 800d3b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d05a      	beq.n	800d472 <__multiply+0x146>
 800d3bc:	6106      	str	r6, [r0, #16]
 800d3be:	b005      	add	sp, #20
 800d3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3c4:	f843 2b04 	str.w	r2, [r3], #4
 800d3c8:	e7d8      	b.n	800d37c <__multiply+0x50>
 800d3ca:	f8b3 a000 	ldrh.w	sl, [r3]
 800d3ce:	f1ba 0f00 	cmp.w	sl, #0
 800d3d2:	d024      	beq.n	800d41e <__multiply+0xf2>
 800d3d4:	f104 0e14 	add.w	lr, r4, #20
 800d3d8:	46a9      	mov	r9, r5
 800d3da:	f04f 0c00 	mov.w	ip, #0
 800d3de:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d3e2:	f8d9 1000 	ldr.w	r1, [r9]
 800d3e6:	fa1f fb82 	uxth.w	fp, r2
 800d3ea:	b289      	uxth	r1, r1
 800d3ec:	fb0a 110b 	mla	r1, sl, fp, r1
 800d3f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d3f4:	f8d9 2000 	ldr.w	r2, [r9]
 800d3f8:	4461      	add	r1, ip
 800d3fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d3fe:	fb0a c20b 	mla	r2, sl, fp, ip
 800d402:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d406:	b289      	uxth	r1, r1
 800d408:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d40c:	4577      	cmp	r7, lr
 800d40e:	f849 1b04 	str.w	r1, [r9], #4
 800d412:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d416:	d8e2      	bhi.n	800d3de <__multiply+0xb2>
 800d418:	9a01      	ldr	r2, [sp, #4]
 800d41a:	f845 c002 	str.w	ip, [r5, r2]
 800d41e:	9a03      	ldr	r2, [sp, #12]
 800d420:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d424:	3304      	adds	r3, #4
 800d426:	f1b9 0f00 	cmp.w	r9, #0
 800d42a:	d020      	beq.n	800d46e <__multiply+0x142>
 800d42c:	6829      	ldr	r1, [r5, #0]
 800d42e:	f104 0c14 	add.w	ip, r4, #20
 800d432:	46ae      	mov	lr, r5
 800d434:	f04f 0a00 	mov.w	sl, #0
 800d438:	f8bc b000 	ldrh.w	fp, [ip]
 800d43c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d440:	fb09 220b 	mla	r2, r9, fp, r2
 800d444:	4492      	add	sl, r2
 800d446:	b289      	uxth	r1, r1
 800d448:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d44c:	f84e 1b04 	str.w	r1, [lr], #4
 800d450:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d454:	f8be 1000 	ldrh.w	r1, [lr]
 800d458:	0c12      	lsrs	r2, r2, #16
 800d45a:	fb09 1102 	mla	r1, r9, r2, r1
 800d45e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d462:	4567      	cmp	r7, ip
 800d464:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d468:	d8e6      	bhi.n	800d438 <__multiply+0x10c>
 800d46a:	9a01      	ldr	r2, [sp, #4]
 800d46c:	50a9      	str	r1, [r5, r2]
 800d46e:	3504      	adds	r5, #4
 800d470:	e79a      	b.n	800d3a8 <__multiply+0x7c>
 800d472:	3e01      	subs	r6, #1
 800d474:	e79c      	b.n	800d3b0 <__multiply+0x84>
 800d476:	bf00      	nop
 800d478:	0800edbb 	.word	0x0800edbb
 800d47c:	0800edcc 	.word	0x0800edcc

0800d480 <__pow5mult>:
 800d480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d484:	4615      	mov	r5, r2
 800d486:	f012 0203 	ands.w	r2, r2, #3
 800d48a:	4606      	mov	r6, r0
 800d48c:	460f      	mov	r7, r1
 800d48e:	d007      	beq.n	800d4a0 <__pow5mult+0x20>
 800d490:	4c25      	ldr	r4, [pc, #148]	; (800d528 <__pow5mult+0xa8>)
 800d492:	3a01      	subs	r2, #1
 800d494:	2300      	movs	r3, #0
 800d496:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d49a:	f7ff fe9b 	bl	800d1d4 <__multadd>
 800d49e:	4607      	mov	r7, r0
 800d4a0:	10ad      	asrs	r5, r5, #2
 800d4a2:	d03d      	beq.n	800d520 <__pow5mult+0xa0>
 800d4a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d4a6:	b97c      	cbnz	r4, 800d4c8 <__pow5mult+0x48>
 800d4a8:	2010      	movs	r0, #16
 800d4aa:	f7ff fe1b 	bl	800d0e4 <malloc>
 800d4ae:	4602      	mov	r2, r0
 800d4b0:	6270      	str	r0, [r6, #36]	; 0x24
 800d4b2:	b928      	cbnz	r0, 800d4c0 <__pow5mult+0x40>
 800d4b4:	4b1d      	ldr	r3, [pc, #116]	; (800d52c <__pow5mult+0xac>)
 800d4b6:	481e      	ldr	r0, [pc, #120]	; (800d530 <__pow5mult+0xb0>)
 800d4b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d4bc:	f000 fc0e 	bl	800dcdc <__assert_func>
 800d4c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d4c4:	6004      	str	r4, [r0, #0]
 800d4c6:	60c4      	str	r4, [r0, #12]
 800d4c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d4cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d4d0:	b94c      	cbnz	r4, 800d4e6 <__pow5mult+0x66>
 800d4d2:	f240 2171 	movw	r1, #625	; 0x271
 800d4d6:	4630      	mov	r0, r6
 800d4d8:	f7ff ff12 	bl	800d300 <__i2b>
 800d4dc:	2300      	movs	r3, #0
 800d4de:	f8c8 0008 	str.w	r0, [r8, #8]
 800d4e2:	4604      	mov	r4, r0
 800d4e4:	6003      	str	r3, [r0, #0]
 800d4e6:	f04f 0900 	mov.w	r9, #0
 800d4ea:	07eb      	lsls	r3, r5, #31
 800d4ec:	d50a      	bpl.n	800d504 <__pow5mult+0x84>
 800d4ee:	4639      	mov	r1, r7
 800d4f0:	4622      	mov	r2, r4
 800d4f2:	4630      	mov	r0, r6
 800d4f4:	f7ff ff1a 	bl	800d32c <__multiply>
 800d4f8:	4639      	mov	r1, r7
 800d4fa:	4680      	mov	r8, r0
 800d4fc:	4630      	mov	r0, r6
 800d4fe:	f7ff fe47 	bl	800d190 <_Bfree>
 800d502:	4647      	mov	r7, r8
 800d504:	106d      	asrs	r5, r5, #1
 800d506:	d00b      	beq.n	800d520 <__pow5mult+0xa0>
 800d508:	6820      	ldr	r0, [r4, #0]
 800d50a:	b938      	cbnz	r0, 800d51c <__pow5mult+0x9c>
 800d50c:	4622      	mov	r2, r4
 800d50e:	4621      	mov	r1, r4
 800d510:	4630      	mov	r0, r6
 800d512:	f7ff ff0b 	bl	800d32c <__multiply>
 800d516:	6020      	str	r0, [r4, #0]
 800d518:	f8c0 9000 	str.w	r9, [r0]
 800d51c:	4604      	mov	r4, r0
 800d51e:	e7e4      	b.n	800d4ea <__pow5mult+0x6a>
 800d520:	4638      	mov	r0, r7
 800d522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d526:	bf00      	nop
 800d528:	0800ef18 	.word	0x0800ef18
 800d52c:	0800ed49 	.word	0x0800ed49
 800d530:	0800edcc 	.word	0x0800edcc

0800d534 <__lshift>:
 800d534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d538:	460c      	mov	r4, r1
 800d53a:	6849      	ldr	r1, [r1, #4]
 800d53c:	6923      	ldr	r3, [r4, #16]
 800d53e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d542:	68a3      	ldr	r3, [r4, #8]
 800d544:	4607      	mov	r7, r0
 800d546:	4691      	mov	r9, r2
 800d548:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d54c:	f108 0601 	add.w	r6, r8, #1
 800d550:	42b3      	cmp	r3, r6
 800d552:	db0b      	blt.n	800d56c <__lshift+0x38>
 800d554:	4638      	mov	r0, r7
 800d556:	f7ff fddb 	bl	800d110 <_Balloc>
 800d55a:	4605      	mov	r5, r0
 800d55c:	b948      	cbnz	r0, 800d572 <__lshift+0x3e>
 800d55e:	4602      	mov	r2, r0
 800d560:	4b2a      	ldr	r3, [pc, #168]	; (800d60c <__lshift+0xd8>)
 800d562:	482b      	ldr	r0, [pc, #172]	; (800d610 <__lshift+0xdc>)
 800d564:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d568:	f000 fbb8 	bl	800dcdc <__assert_func>
 800d56c:	3101      	adds	r1, #1
 800d56e:	005b      	lsls	r3, r3, #1
 800d570:	e7ee      	b.n	800d550 <__lshift+0x1c>
 800d572:	2300      	movs	r3, #0
 800d574:	f100 0114 	add.w	r1, r0, #20
 800d578:	f100 0210 	add.w	r2, r0, #16
 800d57c:	4618      	mov	r0, r3
 800d57e:	4553      	cmp	r3, sl
 800d580:	db37      	blt.n	800d5f2 <__lshift+0xbe>
 800d582:	6920      	ldr	r0, [r4, #16]
 800d584:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d588:	f104 0314 	add.w	r3, r4, #20
 800d58c:	f019 091f 	ands.w	r9, r9, #31
 800d590:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d594:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d598:	d02f      	beq.n	800d5fa <__lshift+0xc6>
 800d59a:	f1c9 0e20 	rsb	lr, r9, #32
 800d59e:	468a      	mov	sl, r1
 800d5a0:	f04f 0c00 	mov.w	ip, #0
 800d5a4:	681a      	ldr	r2, [r3, #0]
 800d5a6:	fa02 f209 	lsl.w	r2, r2, r9
 800d5aa:	ea42 020c 	orr.w	r2, r2, ip
 800d5ae:	f84a 2b04 	str.w	r2, [sl], #4
 800d5b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5b6:	4298      	cmp	r0, r3
 800d5b8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d5bc:	d8f2      	bhi.n	800d5a4 <__lshift+0x70>
 800d5be:	1b03      	subs	r3, r0, r4
 800d5c0:	3b15      	subs	r3, #21
 800d5c2:	f023 0303 	bic.w	r3, r3, #3
 800d5c6:	3304      	adds	r3, #4
 800d5c8:	f104 0215 	add.w	r2, r4, #21
 800d5cc:	4290      	cmp	r0, r2
 800d5ce:	bf38      	it	cc
 800d5d0:	2304      	movcc	r3, #4
 800d5d2:	f841 c003 	str.w	ip, [r1, r3]
 800d5d6:	f1bc 0f00 	cmp.w	ip, #0
 800d5da:	d001      	beq.n	800d5e0 <__lshift+0xac>
 800d5dc:	f108 0602 	add.w	r6, r8, #2
 800d5e0:	3e01      	subs	r6, #1
 800d5e2:	4638      	mov	r0, r7
 800d5e4:	612e      	str	r6, [r5, #16]
 800d5e6:	4621      	mov	r1, r4
 800d5e8:	f7ff fdd2 	bl	800d190 <_Bfree>
 800d5ec:	4628      	mov	r0, r5
 800d5ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d5f6:	3301      	adds	r3, #1
 800d5f8:	e7c1      	b.n	800d57e <__lshift+0x4a>
 800d5fa:	3904      	subs	r1, #4
 800d5fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d600:	f841 2f04 	str.w	r2, [r1, #4]!
 800d604:	4298      	cmp	r0, r3
 800d606:	d8f9      	bhi.n	800d5fc <__lshift+0xc8>
 800d608:	e7ea      	b.n	800d5e0 <__lshift+0xac>
 800d60a:	bf00      	nop
 800d60c:	0800edbb 	.word	0x0800edbb
 800d610:	0800edcc 	.word	0x0800edcc

0800d614 <__mcmp>:
 800d614:	b530      	push	{r4, r5, lr}
 800d616:	6902      	ldr	r2, [r0, #16]
 800d618:	690c      	ldr	r4, [r1, #16]
 800d61a:	1b12      	subs	r2, r2, r4
 800d61c:	d10e      	bne.n	800d63c <__mcmp+0x28>
 800d61e:	f100 0314 	add.w	r3, r0, #20
 800d622:	3114      	adds	r1, #20
 800d624:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d628:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d62c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d630:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d634:	42a5      	cmp	r5, r4
 800d636:	d003      	beq.n	800d640 <__mcmp+0x2c>
 800d638:	d305      	bcc.n	800d646 <__mcmp+0x32>
 800d63a:	2201      	movs	r2, #1
 800d63c:	4610      	mov	r0, r2
 800d63e:	bd30      	pop	{r4, r5, pc}
 800d640:	4283      	cmp	r3, r0
 800d642:	d3f3      	bcc.n	800d62c <__mcmp+0x18>
 800d644:	e7fa      	b.n	800d63c <__mcmp+0x28>
 800d646:	f04f 32ff 	mov.w	r2, #4294967295
 800d64a:	e7f7      	b.n	800d63c <__mcmp+0x28>

0800d64c <__mdiff>:
 800d64c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d650:	460c      	mov	r4, r1
 800d652:	4606      	mov	r6, r0
 800d654:	4611      	mov	r1, r2
 800d656:	4620      	mov	r0, r4
 800d658:	4690      	mov	r8, r2
 800d65a:	f7ff ffdb 	bl	800d614 <__mcmp>
 800d65e:	1e05      	subs	r5, r0, #0
 800d660:	d110      	bne.n	800d684 <__mdiff+0x38>
 800d662:	4629      	mov	r1, r5
 800d664:	4630      	mov	r0, r6
 800d666:	f7ff fd53 	bl	800d110 <_Balloc>
 800d66a:	b930      	cbnz	r0, 800d67a <__mdiff+0x2e>
 800d66c:	4b3a      	ldr	r3, [pc, #232]	; (800d758 <__mdiff+0x10c>)
 800d66e:	4602      	mov	r2, r0
 800d670:	f240 2132 	movw	r1, #562	; 0x232
 800d674:	4839      	ldr	r0, [pc, #228]	; (800d75c <__mdiff+0x110>)
 800d676:	f000 fb31 	bl	800dcdc <__assert_func>
 800d67a:	2301      	movs	r3, #1
 800d67c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d680:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d684:	bfa4      	itt	ge
 800d686:	4643      	movge	r3, r8
 800d688:	46a0      	movge	r8, r4
 800d68a:	4630      	mov	r0, r6
 800d68c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d690:	bfa6      	itte	ge
 800d692:	461c      	movge	r4, r3
 800d694:	2500      	movge	r5, #0
 800d696:	2501      	movlt	r5, #1
 800d698:	f7ff fd3a 	bl	800d110 <_Balloc>
 800d69c:	b920      	cbnz	r0, 800d6a8 <__mdiff+0x5c>
 800d69e:	4b2e      	ldr	r3, [pc, #184]	; (800d758 <__mdiff+0x10c>)
 800d6a0:	4602      	mov	r2, r0
 800d6a2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d6a6:	e7e5      	b.n	800d674 <__mdiff+0x28>
 800d6a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d6ac:	6926      	ldr	r6, [r4, #16]
 800d6ae:	60c5      	str	r5, [r0, #12]
 800d6b0:	f104 0914 	add.w	r9, r4, #20
 800d6b4:	f108 0514 	add.w	r5, r8, #20
 800d6b8:	f100 0e14 	add.w	lr, r0, #20
 800d6bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d6c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d6c4:	f108 0210 	add.w	r2, r8, #16
 800d6c8:	46f2      	mov	sl, lr
 800d6ca:	2100      	movs	r1, #0
 800d6cc:	f859 3b04 	ldr.w	r3, [r9], #4
 800d6d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d6d4:	fa1f f883 	uxth.w	r8, r3
 800d6d8:	fa11 f18b 	uxtah	r1, r1, fp
 800d6dc:	0c1b      	lsrs	r3, r3, #16
 800d6de:	eba1 0808 	sub.w	r8, r1, r8
 800d6e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d6e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d6ea:	fa1f f888 	uxth.w	r8, r8
 800d6ee:	1419      	asrs	r1, r3, #16
 800d6f0:	454e      	cmp	r6, r9
 800d6f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d6f6:	f84a 3b04 	str.w	r3, [sl], #4
 800d6fa:	d8e7      	bhi.n	800d6cc <__mdiff+0x80>
 800d6fc:	1b33      	subs	r3, r6, r4
 800d6fe:	3b15      	subs	r3, #21
 800d700:	f023 0303 	bic.w	r3, r3, #3
 800d704:	3304      	adds	r3, #4
 800d706:	3415      	adds	r4, #21
 800d708:	42a6      	cmp	r6, r4
 800d70a:	bf38      	it	cc
 800d70c:	2304      	movcc	r3, #4
 800d70e:	441d      	add	r5, r3
 800d710:	4473      	add	r3, lr
 800d712:	469e      	mov	lr, r3
 800d714:	462e      	mov	r6, r5
 800d716:	4566      	cmp	r6, ip
 800d718:	d30e      	bcc.n	800d738 <__mdiff+0xec>
 800d71a:	f10c 0203 	add.w	r2, ip, #3
 800d71e:	1b52      	subs	r2, r2, r5
 800d720:	f022 0203 	bic.w	r2, r2, #3
 800d724:	3d03      	subs	r5, #3
 800d726:	45ac      	cmp	ip, r5
 800d728:	bf38      	it	cc
 800d72a:	2200      	movcc	r2, #0
 800d72c:	441a      	add	r2, r3
 800d72e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d732:	b17b      	cbz	r3, 800d754 <__mdiff+0x108>
 800d734:	6107      	str	r7, [r0, #16]
 800d736:	e7a3      	b.n	800d680 <__mdiff+0x34>
 800d738:	f856 8b04 	ldr.w	r8, [r6], #4
 800d73c:	fa11 f288 	uxtah	r2, r1, r8
 800d740:	1414      	asrs	r4, r2, #16
 800d742:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d746:	b292      	uxth	r2, r2
 800d748:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d74c:	f84e 2b04 	str.w	r2, [lr], #4
 800d750:	1421      	asrs	r1, r4, #16
 800d752:	e7e0      	b.n	800d716 <__mdiff+0xca>
 800d754:	3f01      	subs	r7, #1
 800d756:	e7ea      	b.n	800d72e <__mdiff+0xe2>
 800d758:	0800edbb 	.word	0x0800edbb
 800d75c:	0800edcc 	.word	0x0800edcc

0800d760 <__d2b>:
 800d760:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d764:	4689      	mov	r9, r1
 800d766:	2101      	movs	r1, #1
 800d768:	ec57 6b10 	vmov	r6, r7, d0
 800d76c:	4690      	mov	r8, r2
 800d76e:	f7ff fccf 	bl	800d110 <_Balloc>
 800d772:	4604      	mov	r4, r0
 800d774:	b930      	cbnz	r0, 800d784 <__d2b+0x24>
 800d776:	4602      	mov	r2, r0
 800d778:	4b25      	ldr	r3, [pc, #148]	; (800d810 <__d2b+0xb0>)
 800d77a:	4826      	ldr	r0, [pc, #152]	; (800d814 <__d2b+0xb4>)
 800d77c:	f240 310a 	movw	r1, #778	; 0x30a
 800d780:	f000 faac 	bl	800dcdc <__assert_func>
 800d784:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d788:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d78c:	bb35      	cbnz	r5, 800d7dc <__d2b+0x7c>
 800d78e:	2e00      	cmp	r6, #0
 800d790:	9301      	str	r3, [sp, #4]
 800d792:	d028      	beq.n	800d7e6 <__d2b+0x86>
 800d794:	4668      	mov	r0, sp
 800d796:	9600      	str	r6, [sp, #0]
 800d798:	f7ff fd82 	bl	800d2a0 <__lo0bits>
 800d79c:	9900      	ldr	r1, [sp, #0]
 800d79e:	b300      	cbz	r0, 800d7e2 <__d2b+0x82>
 800d7a0:	9a01      	ldr	r2, [sp, #4]
 800d7a2:	f1c0 0320 	rsb	r3, r0, #32
 800d7a6:	fa02 f303 	lsl.w	r3, r2, r3
 800d7aa:	430b      	orrs	r3, r1
 800d7ac:	40c2      	lsrs	r2, r0
 800d7ae:	6163      	str	r3, [r4, #20]
 800d7b0:	9201      	str	r2, [sp, #4]
 800d7b2:	9b01      	ldr	r3, [sp, #4]
 800d7b4:	61a3      	str	r3, [r4, #24]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	bf14      	ite	ne
 800d7ba:	2202      	movne	r2, #2
 800d7bc:	2201      	moveq	r2, #1
 800d7be:	6122      	str	r2, [r4, #16]
 800d7c0:	b1d5      	cbz	r5, 800d7f8 <__d2b+0x98>
 800d7c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d7c6:	4405      	add	r5, r0
 800d7c8:	f8c9 5000 	str.w	r5, [r9]
 800d7cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d7d0:	f8c8 0000 	str.w	r0, [r8]
 800d7d4:	4620      	mov	r0, r4
 800d7d6:	b003      	add	sp, #12
 800d7d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7e0:	e7d5      	b.n	800d78e <__d2b+0x2e>
 800d7e2:	6161      	str	r1, [r4, #20]
 800d7e4:	e7e5      	b.n	800d7b2 <__d2b+0x52>
 800d7e6:	a801      	add	r0, sp, #4
 800d7e8:	f7ff fd5a 	bl	800d2a0 <__lo0bits>
 800d7ec:	9b01      	ldr	r3, [sp, #4]
 800d7ee:	6163      	str	r3, [r4, #20]
 800d7f0:	2201      	movs	r2, #1
 800d7f2:	6122      	str	r2, [r4, #16]
 800d7f4:	3020      	adds	r0, #32
 800d7f6:	e7e3      	b.n	800d7c0 <__d2b+0x60>
 800d7f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d7fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d800:	f8c9 0000 	str.w	r0, [r9]
 800d804:	6918      	ldr	r0, [r3, #16]
 800d806:	f7ff fd2b 	bl	800d260 <__hi0bits>
 800d80a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d80e:	e7df      	b.n	800d7d0 <__d2b+0x70>
 800d810:	0800edbb 	.word	0x0800edbb
 800d814:	0800edcc 	.word	0x0800edcc

0800d818 <_calloc_r>:
 800d818:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d81a:	fba1 2402 	umull	r2, r4, r1, r2
 800d81e:	b94c      	cbnz	r4, 800d834 <_calloc_r+0x1c>
 800d820:	4611      	mov	r1, r2
 800d822:	9201      	str	r2, [sp, #4]
 800d824:	f000 f87a 	bl	800d91c <_malloc_r>
 800d828:	9a01      	ldr	r2, [sp, #4]
 800d82a:	4605      	mov	r5, r0
 800d82c:	b930      	cbnz	r0, 800d83c <_calloc_r+0x24>
 800d82e:	4628      	mov	r0, r5
 800d830:	b003      	add	sp, #12
 800d832:	bd30      	pop	{r4, r5, pc}
 800d834:	220c      	movs	r2, #12
 800d836:	6002      	str	r2, [r0, #0]
 800d838:	2500      	movs	r5, #0
 800d83a:	e7f8      	b.n	800d82e <_calloc_r+0x16>
 800d83c:	4621      	mov	r1, r4
 800d83e:	f7fe f941 	bl	800bac4 <memset>
 800d842:	e7f4      	b.n	800d82e <_calloc_r+0x16>

0800d844 <_free_r>:
 800d844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d846:	2900      	cmp	r1, #0
 800d848:	d044      	beq.n	800d8d4 <_free_r+0x90>
 800d84a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d84e:	9001      	str	r0, [sp, #4]
 800d850:	2b00      	cmp	r3, #0
 800d852:	f1a1 0404 	sub.w	r4, r1, #4
 800d856:	bfb8      	it	lt
 800d858:	18e4      	addlt	r4, r4, r3
 800d85a:	f000 fa9b 	bl	800dd94 <__malloc_lock>
 800d85e:	4a1e      	ldr	r2, [pc, #120]	; (800d8d8 <_free_r+0x94>)
 800d860:	9801      	ldr	r0, [sp, #4]
 800d862:	6813      	ldr	r3, [r2, #0]
 800d864:	b933      	cbnz	r3, 800d874 <_free_r+0x30>
 800d866:	6063      	str	r3, [r4, #4]
 800d868:	6014      	str	r4, [r2, #0]
 800d86a:	b003      	add	sp, #12
 800d86c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d870:	f000 ba96 	b.w	800dda0 <__malloc_unlock>
 800d874:	42a3      	cmp	r3, r4
 800d876:	d908      	bls.n	800d88a <_free_r+0x46>
 800d878:	6825      	ldr	r5, [r4, #0]
 800d87a:	1961      	adds	r1, r4, r5
 800d87c:	428b      	cmp	r3, r1
 800d87e:	bf01      	itttt	eq
 800d880:	6819      	ldreq	r1, [r3, #0]
 800d882:	685b      	ldreq	r3, [r3, #4]
 800d884:	1949      	addeq	r1, r1, r5
 800d886:	6021      	streq	r1, [r4, #0]
 800d888:	e7ed      	b.n	800d866 <_free_r+0x22>
 800d88a:	461a      	mov	r2, r3
 800d88c:	685b      	ldr	r3, [r3, #4]
 800d88e:	b10b      	cbz	r3, 800d894 <_free_r+0x50>
 800d890:	42a3      	cmp	r3, r4
 800d892:	d9fa      	bls.n	800d88a <_free_r+0x46>
 800d894:	6811      	ldr	r1, [r2, #0]
 800d896:	1855      	adds	r5, r2, r1
 800d898:	42a5      	cmp	r5, r4
 800d89a:	d10b      	bne.n	800d8b4 <_free_r+0x70>
 800d89c:	6824      	ldr	r4, [r4, #0]
 800d89e:	4421      	add	r1, r4
 800d8a0:	1854      	adds	r4, r2, r1
 800d8a2:	42a3      	cmp	r3, r4
 800d8a4:	6011      	str	r1, [r2, #0]
 800d8a6:	d1e0      	bne.n	800d86a <_free_r+0x26>
 800d8a8:	681c      	ldr	r4, [r3, #0]
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	6053      	str	r3, [r2, #4]
 800d8ae:	4421      	add	r1, r4
 800d8b0:	6011      	str	r1, [r2, #0]
 800d8b2:	e7da      	b.n	800d86a <_free_r+0x26>
 800d8b4:	d902      	bls.n	800d8bc <_free_r+0x78>
 800d8b6:	230c      	movs	r3, #12
 800d8b8:	6003      	str	r3, [r0, #0]
 800d8ba:	e7d6      	b.n	800d86a <_free_r+0x26>
 800d8bc:	6825      	ldr	r5, [r4, #0]
 800d8be:	1961      	adds	r1, r4, r5
 800d8c0:	428b      	cmp	r3, r1
 800d8c2:	bf04      	itt	eq
 800d8c4:	6819      	ldreq	r1, [r3, #0]
 800d8c6:	685b      	ldreq	r3, [r3, #4]
 800d8c8:	6063      	str	r3, [r4, #4]
 800d8ca:	bf04      	itt	eq
 800d8cc:	1949      	addeq	r1, r1, r5
 800d8ce:	6021      	streq	r1, [r4, #0]
 800d8d0:	6054      	str	r4, [r2, #4]
 800d8d2:	e7ca      	b.n	800d86a <_free_r+0x26>
 800d8d4:	b003      	add	sp, #12
 800d8d6:	bd30      	pop	{r4, r5, pc}
 800d8d8:	20000ad0 	.word	0x20000ad0

0800d8dc <sbrk_aligned>:
 800d8dc:	b570      	push	{r4, r5, r6, lr}
 800d8de:	4e0e      	ldr	r6, [pc, #56]	; (800d918 <sbrk_aligned+0x3c>)
 800d8e0:	460c      	mov	r4, r1
 800d8e2:	6831      	ldr	r1, [r6, #0]
 800d8e4:	4605      	mov	r5, r0
 800d8e6:	b911      	cbnz	r1, 800d8ee <sbrk_aligned+0x12>
 800d8e8:	f000 f9e8 	bl	800dcbc <_sbrk_r>
 800d8ec:	6030      	str	r0, [r6, #0]
 800d8ee:	4621      	mov	r1, r4
 800d8f0:	4628      	mov	r0, r5
 800d8f2:	f000 f9e3 	bl	800dcbc <_sbrk_r>
 800d8f6:	1c43      	adds	r3, r0, #1
 800d8f8:	d00a      	beq.n	800d910 <sbrk_aligned+0x34>
 800d8fa:	1cc4      	adds	r4, r0, #3
 800d8fc:	f024 0403 	bic.w	r4, r4, #3
 800d900:	42a0      	cmp	r0, r4
 800d902:	d007      	beq.n	800d914 <sbrk_aligned+0x38>
 800d904:	1a21      	subs	r1, r4, r0
 800d906:	4628      	mov	r0, r5
 800d908:	f000 f9d8 	bl	800dcbc <_sbrk_r>
 800d90c:	3001      	adds	r0, #1
 800d90e:	d101      	bne.n	800d914 <sbrk_aligned+0x38>
 800d910:	f04f 34ff 	mov.w	r4, #4294967295
 800d914:	4620      	mov	r0, r4
 800d916:	bd70      	pop	{r4, r5, r6, pc}
 800d918:	20000ad4 	.word	0x20000ad4

0800d91c <_malloc_r>:
 800d91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d920:	1ccd      	adds	r5, r1, #3
 800d922:	f025 0503 	bic.w	r5, r5, #3
 800d926:	3508      	adds	r5, #8
 800d928:	2d0c      	cmp	r5, #12
 800d92a:	bf38      	it	cc
 800d92c:	250c      	movcc	r5, #12
 800d92e:	2d00      	cmp	r5, #0
 800d930:	4607      	mov	r7, r0
 800d932:	db01      	blt.n	800d938 <_malloc_r+0x1c>
 800d934:	42a9      	cmp	r1, r5
 800d936:	d905      	bls.n	800d944 <_malloc_r+0x28>
 800d938:	230c      	movs	r3, #12
 800d93a:	603b      	str	r3, [r7, #0]
 800d93c:	2600      	movs	r6, #0
 800d93e:	4630      	mov	r0, r6
 800d940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d944:	4e2e      	ldr	r6, [pc, #184]	; (800da00 <_malloc_r+0xe4>)
 800d946:	f000 fa25 	bl	800dd94 <__malloc_lock>
 800d94a:	6833      	ldr	r3, [r6, #0]
 800d94c:	461c      	mov	r4, r3
 800d94e:	bb34      	cbnz	r4, 800d99e <_malloc_r+0x82>
 800d950:	4629      	mov	r1, r5
 800d952:	4638      	mov	r0, r7
 800d954:	f7ff ffc2 	bl	800d8dc <sbrk_aligned>
 800d958:	1c43      	adds	r3, r0, #1
 800d95a:	4604      	mov	r4, r0
 800d95c:	d14d      	bne.n	800d9fa <_malloc_r+0xde>
 800d95e:	6834      	ldr	r4, [r6, #0]
 800d960:	4626      	mov	r6, r4
 800d962:	2e00      	cmp	r6, #0
 800d964:	d140      	bne.n	800d9e8 <_malloc_r+0xcc>
 800d966:	6823      	ldr	r3, [r4, #0]
 800d968:	4631      	mov	r1, r6
 800d96a:	4638      	mov	r0, r7
 800d96c:	eb04 0803 	add.w	r8, r4, r3
 800d970:	f000 f9a4 	bl	800dcbc <_sbrk_r>
 800d974:	4580      	cmp	r8, r0
 800d976:	d13a      	bne.n	800d9ee <_malloc_r+0xd2>
 800d978:	6821      	ldr	r1, [r4, #0]
 800d97a:	3503      	adds	r5, #3
 800d97c:	1a6d      	subs	r5, r5, r1
 800d97e:	f025 0503 	bic.w	r5, r5, #3
 800d982:	3508      	adds	r5, #8
 800d984:	2d0c      	cmp	r5, #12
 800d986:	bf38      	it	cc
 800d988:	250c      	movcc	r5, #12
 800d98a:	4629      	mov	r1, r5
 800d98c:	4638      	mov	r0, r7
 800d98e:	f7ff ffa5 	bl	800d8dc <sbrk_aligned>
 800d992:	3001      	adds	r0, #1
 800d994:	d02b      	beq.n	800d9ee <_malloc_r+0xd2>
 800d996:	6823      	ldr	r3, [r4, #0]
 800d998:	442b      	add	r3, r5
 800d99a:	6023      	str	r3, [r4, #0]
 800d99c:	e00e      	b.n	800d9bc <_malloc_r+0xa0>
 800d99e:	6822      	ldr	r2, [r4, #0]
 800d9a0:	1b52      	subs	r2, r2, r5
 800d9a2:	d41e      	bmi.n	800d9e2 <_malloc_r+0xc6>
 800d9a4:	2a0b      	cmp	r2, #11
 800d9a6:	d916      	bls.n	800d9d6 <_malloc_r+0xba>
 800d9a8:	1961      	adds	r1, r4, r5
 800d9aa:	42a3      	cmp	r3, r4
 800d9ac:	6025      	str	r5, [r4, #0]
 800d9ae:	bf18      	it	ne
 800d9b0:	6059      	strne	r1, [r3, #4]
 800d9b2:	6863      	ldr	r3, [r4, #4]
 800d9b4:	bf08      	it	eq
 800d9b6:	6031      	streq	r1, [r6, #0]
 800d9b8:	5162      	str	r2, [r4, r5]
 800d9ba:	604b      	str	r3, [r1, #4]
 800d9bc:	4638      	mov	r0, r7
 800d9be:	f104 060b 	add.w	r6, r4, #11
 800d9c2:	f000 f9ed 	bl	800dda0 <__malloc_unlock>
 800d9c6:	f026 0607 	bic.w	r6, r6, #7
 800d9ca:	1d23      	adds	r3, r4, #4
 800d9cc:	1af2      	subs	r2, r6, r3
 800d9ce:	d0b6      	beq.n	800d93e <_malloc_r+0x22>
 800d9d0:	1b9b      	subs	r3, r3, r6
 800d9d2:	50a3      	str	r3, [r4, r2]
 800d9d4:	e7b3      	b.n	800d93e <_malloc_r+0x22>
 800d9d6:	6862      	ldr	r2, [r4, #4]
 800d9d8:	42a3      	cmp	r3, r4
 800d9da:	bf0c      	ite	eq
 800d9dc:	6032      	streq	r2, [r6, #0]
 800d9de:	605a      	strne	r2, [r3, #4]
 800d9e0:	e7ec      	b.n	800d9bc <_malloc_r+0xa0>
 800d9e2:	4623      	mov	r3, r4
 800d9e4:	6864      	ldr	r4, [r4, #4]
 800d9e6:	e7b2      	b.n	800d94e <_malloc_r+0x32>
 800d9e8:	4634      	mov	r4, r6
 800d9ea:	6876      	ldr	r6, [r6, #4]
 800d9ec:	e7b9      	b.n	800d962 <_malloc_r+0x46>
 800d9ee:	230c      	movs	r3, #12
 800d9f0:	603b      	str	r3, [r7, #0]
 800d9f2:	4638      	mov	r0, r7
 800d9f4:	f000 f9d4 	bl	800dda0 <__malloc_unlock>
 800d9f8:	e7a1      	b.n	800d93e <_malloc_r+0x22>
 800d9fa:	6025      	str	r5, [r4, #0]
 800d9fc:	e7de      	b.n	800d9bc <_malloc_r+0xa0>
 800d9fe:	bf00      	nop
 800da00:	20000ad0 	.word	0x20000ad0

0800da04 <__ssputs_r>:
 800da04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da08:	688e      	ldr	r6, [r1, #8]
 800da0a:	429e      	cmp	r6, r3
 800da0c:	4682      	mov	sl, r0
 800da0e:	460c      	mov	r4, r1
 800da10:	4690      	mov	r8, r2
 800da12:	461f      	mov	r7, r3
 800da14:	d838      	bhi.n	800da88 <__ssputs_r+0x84>
 800da16:	898a      	ldrh	r2, [r1, #12]
 800da18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800da1c:	d032      	beq.n	800da84 <__ssputs_r+0x80>
 800da1e:	6825      	ldr	r5, [r4, #0]
 800da20:	6909      	ldr	r1, [r1, #16]
 800da22:	eba5 0901 	sub.w	r9, r5, r1
 800da26:	6965      	ldr	r5, [r4, #20]
 800da28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da30:	3301      	adds	r3, #1
 800da32:	444b      	add	r3, r9
 800da34:	106d      	asrs	r5, r5, #1
 800da36:	429d      	cmp	r5, r3
 800da38:	bf38      	it	cc
 800da3a:	461d      	movcc	r5, r3
 800da3c:	0553      	lsls	r3, r2, #21
 800da3e:	d531      	bpl.n	800daa4 <__ssputs_r+0xa0>
 800da40:	4629      	mov	r1, r5
 800da42:	f7ff ff6b 	bl	800d91c <_malloc_r>
 800da46:	4606      	mov	r6, r0
 800da48:	b950      	cbnz	r0, 800da60 <__ssputs_r+0x5c>
 800da4a:	230c      	movs	r3, #12
 800da4c:	f8ca 3000 	str.w	r3, [sl]
 800da50:	89a3      	ldrh	r3, [r4, #12]
 800da52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da56:	81a3      	strh	r3, [r4, #12]
 800da58:	f04f 30ff 	mov.w	r0, #4294967295
 800da5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da60:	6921      	ldr	r1, [r4, #16]
 800da62:	464a      	mov	r2, r9
 800da64:	f7ff fb46 	bl	800d0f4 <memcpy>
 800da68:	89a3      	ldrh	r3, [r4, #12]
 800da6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800da6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da72:	81a3      	strh	r3, [r4, #12]
 800da74:	6126      	str	r6, [r4, #16]
 800da76:	6165      	str	r5, [r4, #20]
 800da78:	444e      	add	r6, r9
 800da7a:	eba5 0509 	sub.w	r5, r5, r9
 800da7e:	6026      	str	r6, [r4, #0]
 800da80:	60a5      	str	r5, [r4, #8]
 800da82:	463e      	mov	r6, r7
 800da84:	42be      	cmp	r6, r7
 800da86:	d900      	bls.n	800da8a <__ssputs_r+0x86>
 800da88:	463e      	mov	r6, r7
 800da8a:	6820      	ldr	r0, [r4, #0]
 800da8c:	4632      	mov	r2, r6
 800da8e:	4641      	mov	r1, r8
 800da90:	f000 f966 	bl	800dd60 <memmove>
 800da94:	68a3      	ldr	r3, [r4, #8]
 800da96:	1b9b      	subs	r3, r3, r6
 800da98:	60a3      	str	r3, [r4, #8]
 800da9a:	6823      	ldr	r3, [r4, #0]
 800da9c:	4433      	add	r3, r6
 800da9e:	6023      	str	r3, [r4, #0]
 800daa0:	2000      	movs	r0, #0
 800daa2:	e7db      	b.n	800da5c <__ssputs_r+0x58>
 800daa4:	462a      	mov	r2, r5
 800daa6:	f000 f981 	bl	800ddac <_realloc_r>
 800daaa:	4606      	mov	r6, r0
 800daac:	2800      	cmp	r0, #0
 800daae:	d1e1      	bne.n	800da74 <__ssputs_r+0x70>
 800dab0:	6921      	ldr	r1, [r4, #16]
 800dab2:	4650      	mov	r0, sl
 800dab4:	f7ff fec6 	bl	800d844 <_free_r>
 800dab8:	e7c7      	b.n	800da4a <__ssputs_r+0x46>
	...

0800dabc <_svfiprintf_r>:
 800dabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dac0:	4698      	mov	r8, r3
 800dac2:	898b      	ldrh	r3, [r1, #12]
 800dac4:	061b      	lsls	r3, r3, #24
 800dac6:	b09d      	sub	sp, #116	; 0x74
 800dac8:	4607      	mov	r7, r0
 800daca:	460d      	mov	r5, r1
 800dacc:	4614      	mov	r4, r2
 800dace:	d50e      	bpl.n	800daee <_svfiprintf_r+0x32>
 800dad0:	690b      	ldr	r3, [r1, #16]
 800dad2:	b963      	cbnz	r3, 800daee <_svfiprintf_r+0x32>
 800dad4:	2140      	movs	r1, #64	; 0x40
 800dad6:	f7ff ff21 	bl	800d91c <_malloc_r>
 800dada:	6028      	str	r0, [r5, #0]
 800dadc:	6128      	str	r0, [r5, #16]
 800dade:	b920      	cbnz	r0, 800daea <_svfiprintf_r+0x2e>
 800dae0:	230c      	movs	r3, #12
 800dae2:	603b      	str	r3, [r7, #0]
 800dae4:	f04f 30ff 	mov.w	r0, #4294967295
 800dae8:	e0d1      	b.n	800dc8e <_svfiprintf_r+0x1d2>
 800daea:	2340      	movs	r3, #64	; 0x40
 800daec:	616b      	str	r3, [r5, #20]
 800daee:	2300      	movs	r3, #0
 800daf0:	9309      	str	r3, [sp, #36]	; 0x24
 800daf2:	2320      	movs	r3, #32
 800daf4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800daf8:	f8cd 800c 	str.w	r8, [sp, #12]
 800dafc:	2330      	movs	r3, #48	; 0x30
 800dafe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dca8 <_svfiprintf_r+0x1ec>
 800db02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db06:	f04f 0901 	mov.w	r9, #1
 800db0a:	4623      	mov	r3, r4
 800db0c:	469a      	mov	sl, r3
 800db0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db12:	b10a      	cbz	r2, 800db18 <_svfiprintf_r+0x5c>
 800db14:	2a25      	cmp	r2, #37	; 0x25
 800db16:	d1f9      	bne.n	800db0c <_svfiprintf_r+0x50>
 800db18:	ebba 0b04 	subs.w	fp, sl, r4
 800db1c:	d00b      	beq.n	800db36 <_svfiprintf_r+0x7a>
 800db1e:	465b      	mov	r3, fp
 800db20:	4622      	mov	r2, r4
 800db22:	4629      	mov	r1, r5
 800db24:	4638      	mov	r0, r7
 800db26:	f7ff ff6d 	bl	800da04 <__ssputs_r>
 800db2a:	3001      	adds	r0, #1
 800db2c:	f000 80aa 	beq.w	800dc84 <_svfiprintf_r+0x1c8>
 800db30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db32:	445a      	add	r2, fp
 800db34:	9209      	str	r2, [sp, #36]	; 0x24
 800db36:	f89a 3000 	ldrb.w	r3, [sl]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	f000 80a2 	beq.w	800dc84 <_svfiprintf_r+0x1c8>
 800db40:	2300      	movs	r3, #0
 800db42:	f04f 32ff 	mov.w	r2, #4294967295
 800db46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db4a:	f10a 0a01 	add.w	sl, sl, #1
 800db4e:	9304      	str	r3, [sp, #16]
 800db50:	9307      	str	r3, [sp, #28]
 800db52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db56:	931a      	str	r3, [sp, #104]	; 0x68
 800db58:	4654      	mov	r4, sl
 800db5a:	2205      	movs	r2, #5
 800db5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db60:	4851      	ldr	r0, [pc, #324]	; (800dca8 <_svfiprintf_r+0x1ec>)
 800db62:	f7f2 fb45 	bl	80001f0 <memchr>
 800db66:	9a04      	ldr	r2, [sp, #16]
 800db68:	b9d8      	cbnz	r0, 800dba2 <_svfiprintf_r+0xe6>
 800db6a:	06d0      	lsls	r0, r2, #27
 800db6c:	bf44      	itt	mi
 800db6e:	2320      	movmi	r3, #32
 800db70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db74:	0711      	lsls	r1, r2, #28
 800db76:	bf44      	itt	mi
 800db78:	232b      	movmi	r3, #43	; 0x2b
 800db7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db7e:	f89a 3000 	ldrb.w	r3, [sl]
 800db82:	2b2a      	cmp	r3, #42	; 0x2a
 800db84:	d015      	beq.n	800dbb2 <_svfiprintf_r+0xf6>
 800db86:	9a07      	ldr	r2, [sp, #28]
 800db88:	4654      	mov	r4, sl
 800db8a:	2000      	movs	r0, #0
 800db8c:	f04f 0c0a 	mov.w	ip, #10
 800db90:	4621      	mov	r1, r4
 800db92:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db96:	3b30      	subs	r3, #48	; 0x30
 800db98:	2b09      	cmp	r3, #9
 800db9a:	d94e      	bls.n	800dc3a <_svfiprintf_r+0x17e>
 800db9c:	b1b0      	cbz	r0, 800dbcc <_svfiprintf_r+0x110>
 800db9e:	9207      	str	r2, [sp, #28]
 800dba0:	e014      	b.n	800dbcc <_svfiprintf_r+0x110>
 800dba2:	eba0 0308 	sub.w	r3, r0, r8
 800dba6:	fa09 f303 	lsl.w	r3, r9, r3
 800dbaa:	4313      	orrs	r3, r2
 800dbac:	9304      	str	r3, [sp, #16]
 800dbae:	46a2      	mov	sl, r4
 800dbb0:	e7d2      	b.n	800db58 <_svfiprintf_r+0x9c>
 800dbb2:	9b03      	ldr	r3, [sp, #12]
 800dbb4:	1d19      	adds	r1, r3, #4
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	9103      	str	r1, [sp, #12]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	bfbb      	ittet	lt
 800dbbe:	425b      	neglt	r3, r3
 800dbc0:	f042 0202 	orrlt.w	r2, r2, #2
 800dbc4:	9307      	strge	r3, [sp, #28]
 800dbc6:	9307      	strlt	r3, [sp, #28]
 800dbc8:	bfb8      	it	lt
 800dbca:	9204      	strlt	r2, [sp, #16]
 800dbcc:	7823      	ldrb	r3, [r4, #0]
 800dbce:	2b2e      	cmp	r3, #46	; 0x2e
 800dbd0:	d10c      	bne.n	800dbec <_svfiprintf_r+0x130>
 800dbd2:	7863      	ldrb	r3, [r4, #1]
 800dbd4:	2b2a      	cmp	r3, #42	; 0x2a
 800dbd6:	d135      	bne.n	800dc44 <_svfiprintf_r+0x188>
 800dbd8:	9b03      	ldr	r3, [sp, #12]
 800dbda:	1d1a      	adds	r2, r3, #4
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	9203      	str	r2, [sp, #12]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	bfb8      	it	lt
 800dbe4:	f04f 33ff 	movlt.w	r3, #4294967295
 800dbe8:	3402      	adds	r4, #2
 800dbea:	9305      	str	r3, [sp, #20]
 800dbec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dcb8 <_svfiprintf_r+0x1fc>
 800dbf0:	7821      	ldrb	r1, [r4, #0]
 800dbf2:	2203      	movs	r2, #3
 800dbf4:	4650      	mov	r0, sl
 800dbf6:	f7f2 fafb 	bl	80001f0 <memchr>
 800dbfa:	b140      	cbz	r0, 800dc0e <_svfiprintf_r+0x152>
 800dbfc:	2340      	movs	r3, #64	; 0x40
 800dbfe:	eba0 000a 	sub.w	r0, r0, sl
 800dc02:	fa03 f000 	lsl.w	r0, r3, r0
 800dc06:	9b04      	ldr	r3, [sp, #16]
 800dc08:	4303      	orrs	r3, r0
 800dc0a:	3401      	adds	r4, #1
 800dc0c:	9304      	str	r3, [sp, #16]
 800dc0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc12:	4826      	ldr	r0, [pc, #152]	; (800dcac <_svfiprintf_r+0x1f0>)
 800dc14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc18:	2206      	movs	r2, #6
 800dc1a:	f7f2 fae9 	bl	80001f0 <memchr>
 800dc1e:	2800      	cmp	r0, #0
 800dc20:	d038      	beq.n	800dc94 <_svfiprintf_r+0x1d8>
 800dc22:	4b23      	ldr	r3, [pc, #140]	; (800dcb0 <_svfiprintf_r+0x1f4>)
 800dc24:	bb1b      	cbnz	r3, 800dc6e <_svfiprintf_r+0x1b2>
 800dc26:	9b03      	ldr	r3, [sp, #12]
 800dc28:	3307      	adds	r3, #7
 800dc2a:	f023 0307 	bic.w	r3, r3, #7
 800dc2e:	3308      	adds	r3, #8
 800dc30:	9303      	str	r3, [sp, #12]
 800dc32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc34:	4433      	add	r3, r6
 800dc36:	9309      	str	r3, [sp, #36]	; 0x24
 800dc38:	e767      	b.n	800db0a <_svfiprintf_r+0x4e>
 800dc3a:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc3e:	460c      	mov	r4, r1
 800dc40:	2001      	movs	r0, #1
 800dc42:	e7a5      	b.n	800db90 <_svfiprintf_r+0xd4>
 800dc44:	2300      	movs	r3, #0
 800dc46:	3401      	adds	r4, #1
 800dc48:	9305      	str	r3, [sp, #20]
 800dc4a:	4619      	mov	r1, r3
 800dc4c:	f04f 0c0a 	mov.w	ip, #10
 800dc50:	4620      	mov	r0, r4
 800dc52:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc56:	3a30      	subs	r2, #48	; 0x30
 800dc58:	2a09      	cmp	r2, #9
 800dc5a:	d903      	bls.n	800dc64 <_svfiprintf_r+0x1a8>
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d0c5      	beq.n	800dbec <_svfiprintf_r+0x130>
 800dc60:	9105      	str	r1, [sp, #20]
 800dc62:	e7c3      	b.n	800dbec <_svfiprintf_r+0x130>
 800dc64:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc68:	4604      	mov	r4, r0
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	e7f0      	b.n	800dc50 <_svfiprintf_r+0x194>
 800dc6e:	ab03      	add	r3, sp, #12
 800dc70:	9300      	str	r3, [sp, #0]
 800dc72:	462a      	mov	r2, r5
 800dc74:	4b0f      	ldr	r3, [pc, #60]	; (800dcb4 <_svfiprintf_r+0x1f8>)
 800dc76:	a904      	add	r1, sp, #16
 800dc78:	4638      	mov	r0, r7
 800dc7a:	f7fd ffcb 	bl	800bc14 <_printf_float>
 800dc7e:	1c42      	adds	r2, r0, #1
 800dc80:	4606      	mov	r6, r0
 800dc82:	d1d6      	bne.n	800dc32 <_svfiprintf_r+0x176>
 800dc84:	89ab      	ldrh	r3, [r5, #12]
 800dc86:	065b      	lsls	r3, r3, #25
 800dc88:	f53f af2c 	bmi.w	800dae4 <_svfiprintf_r+0x28>
 800dc8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc8e:	b01d      	add	sp, #116	; 0x74
 800dc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc94:	ab03      	add	r3, sp, #12
 800dc96:	9300      	str	r3, [sp, #0]
 800dc98:	462a      	mov	r2, r5
 800dc9a:	4b06      	ldr	r3, [pc, #24]	; (800dcb4 <_svfiprintf_r+0x1f8>)
 800dc9c:	a904      	add	r1, sp, #16
 800dc9e:	4638      	mov	r0, r7
 800dca0:	f7fe fa5c 	bl	800c15c <_printf_i>
 800dca4:	e7eb      	b.n	800dc7e <_svfiprintf_r+0x1c2>
 800dca6:	bf00      	nop
 800dca8:	0800ef24 	.word	0x0800ef24
 800dcac:	0800ef2e 	.word	0x0800ef2e
 800dcb0:	0800bc15 	.word	0x0800bc15
 800dcb4:	0800da05 	.word	0x0800da05
 800dcb8:	0800ef2a 	.word	0x0800ef2a

0800dcbc <_sbrk_r>:
 800dcbc:	b538      	push	{r3, r4, r5, lr}
 800dcbe:	4d06      	ldr	r5, [pc, #24]	; (800dcd8 <_sbrk_r+0x1c>)
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	4604      	mov	r4, r0
 800dcc4:	4608      	mov	r0, r1
 800dcc6:	602b      	str	r3, [r5, #0]
 800dcc8:	f7f5 fd16 	bl	80036f8 <_sbrk>
 800dccc:	1c43      	adds	r3, r0, #1
 800dcce:	d102      	bne.n	800dcd6 <_sbrk_r+0x1a>
 800dcd0:	682b      	ldr	r3, [r5, #0]
 800dcd2:	b103      	cbz	r3, 800dcd6 <_sbrk_r+0x1a>
 800dcd4:	6023      	str	r3, [r4, #0]
 800dcd6:	bd38      	pop	{r3, r4, r5, pc}
 800dcd8:	20000ad8 	.word	0x20000ad8

0800dcdc <__assert_func>:
 800dcdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dcde:	4614      	mov	r4, r2
 800dce0:	461a      	mov	r2, r3
 800dce2:	4b09      	ldr	r3, [pc, #36]	; (800dd08 <__assert_func+0x2c>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	4605      	mov	r5, r0
 800dce8:	68d8      	ldr	r0, [r3, #12]
 800dcea:	b14c      	cbz	r4, 800dd00 <__assert_func+0x24>
 800dcec:	4b07      	ldr	r3, [pc, #28]	; (800dd0c <__assert_func+0x30>)
 800dcee:	9100      	str	r1, [sp, #0]
 800dcf0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dcf4:	4906      	ldr	r1, [pc, #24]	; (800dd10 <__assert_func+0x34>)
 800dcf6:	462b      	mov	r3, r5
 800dcf8:	f000 f80e 	bl	800dd18 <fiprintf>
 800dcfc:	f000 faac 	bl	800e258 <abort>
 800dd00:	4b04      	ldr	r3, [pc, #16]	; (800dd14 <__assert_func+0x38>)
 800dd02:	461c      	mov	r4, r3
 800dd04:	e7f3      	b.n	800dcee <__assert_func+0x12>
 800dd06:	bf00      	nop
 800dd08:	20000110 	.word	0x20000110
 800dd0c:	0800ef35 	.word	0x0800ef35
 800dd10:	0800ef42 	.word	0x0800ef42
 800dd14:	0800ef70 	.word	0x0800ef70

0800dd18 <fiprintf>:
 800dd18:	b40e      	push	{r1, r2, r3}
 800dd1a:	b503      	push	{r0, r1, lr}
 800dd1c:	4601      	mov	r1, r0
 800dd1e:	ab03      	add	r3, sp, #12
 800dd20:	4805      	ldr	r0, [pc, #20]	; (800dd38 <fiprintf+0x20>)
 800dd22:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd26:	6800      	ldr	r0, [r0, #0]
 800dd28:	9301      	str	r3, [sp, #4]
 800dd2a:	f000 f897 	bl	800de5c <_vfiprintf_r>
 800dd2e:	b002      	add	sp, #8
 800dd30:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd34:	b003      	add	sp, #12
 800dd36:	4770      	bx	lr
 800dd38:	20000110 	.word	0x20000110

0800dd3c <__ascii_mbtowc>:
 800dd3c:	b082      	sub	sp, #8
 800dd3e:	b901      	cbnz	r1, 800dd42 <__ascii_mbtowc+0x6>
 800dd40:	a901      	add	r1, sp, #4
 800dd42:	b142      	cbz	r2, 800dd56 <__ascii_mbtowc+0x1a>
 800dd44:	b14b      	cbz	r3, 800dd5a <__ascii_mbtowc+0x1e>
 800dd46:	7813      	ldrb	r3, [r2, #0]
 800dd48:	600b      	str	r3, [r1, #0]
 800dd4a:	7812      	ldrb	r2, [r2, #0]
 800dd4c:	1e10      	subs	r0, r2, #0
 800dd4e:	bf18      	it	ne
 800dd50:	2001      	movne	r0, #1
 800dd52:	b002      	add	sp, #8
 800dd54:	4770      	bx	lr
 800dd56:	4610      	mov	r0, r2
 800dd58:	e7fb      	b.n	800dd52 <__ascii_mbtowc+0x16>
 800dd5a:	f06f 0001 	mvn.w	r0, #1
 800dd5e:	e7f8      	b.n	800dd52 <__ascii_mbtowc+0x16>

0800dd60 <memmove>:
 800dd60:	4288      	cmp	r0, r1
 800dd62:	b510      	push	{r4, lr}
 800dd64:	eb01 0402 	add.w	r4, r1, r2
 800dd68:	d902      	bls.n	800dd70 <memmove+0x10>
 800dd6a:	4284      	cmp	r4, r0
 800dd6c:	4623      	mov	r3, r4
 800dd6e:	d807      	bhi.n	800dd80 <memmove+0x20>
 800dd70:	1e43      	subs	r3, r0, #1
 800dd72:	42a1      	cmp	r1, r4
 800dd74:	d008      	beq.n	800dd88 <memmove+0x28>
 800dd76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd7e:	e7f8      	b.n	800dd72 <memmove+0x12>
 800dd80:	4402      	add	r2, r0
 800dd82:	4601      	mov	r1, r0
 800dd84:	428a      	cmp	r2, r1
 800dd86:	d100      	bne.n	800dd8a <memmove+0x2a>
 800dd88:	bd10      	pop	{r4, pc}
 800dd8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd92:	e7f7      	b.n	800dd84 <memmove+0x24>

0800dd94 <__malloc_lock>:
 800dd94:	4801      	ldr	r0, [pc, #4]	; (800dd9c <__malloc_lock+0x8>)
 800dd96:	f000 bc1f 	b.w	800e5d8 <__retarget_lock_acquire_recursive>
 800dd9a:	bf00      	nop
 800dd9c:	20000adc 	.word	0x20000adc

0800dda0 <__malloc_unlock>:
 800dda0:	4801      	ldr	r0, [pc, #4]	; (800dda8 <__malloc_unlock+0x8>)
 800dda2:	f000 bc1a 	b.w	800e5da <__retarget_lock_release_recursive>
 800dda6:	bf00      	nop
 800dda8:	20000adc 	.word	0x20000adc

0800ddac <_realloc_r>:
 800ddac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddb0:	4680      	mov	r8, r0
 800ddb2:	4614      	mov	r4, r2
 800ddb4:	460e      	mov	r6, r1
 800ddb6:	b921      	cbnz	r1, 800ddc2 <_realloc_r+0x16>
 800ddb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddbc:	4611      	mov	r1, r2
 800ddbe:	f7ff bdad 	b.w	800d91c <_malloc_r>
 800ddc2:	b92a      	cbnz	r2, 800ddd0 <_realloc_r+0x24>
 800ddc4:	f7ff fd3e 	bl	800d844 <_free_r>
 800ddc8:	4625      	mov	r5, r4
 800ddca:	4628      	mov	r0, r5
 800ddcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddd0:	f000 fc6a 	bl	800e6a8 <_malloc_usable_size_r>
 800ddd4:	4284      	cmp	r4, r0
 800ddd6:	4607      	mov	r7, r0
 800ddd8:	d802      	bhi.n	800dde0 <_realloc_r+0x34>
 800ddda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ddde:	d812      	bhi.n	800de06 <_realloc_r+0x5a>
 800dde0:	4621      	mov	r1, r4
 800dde2:	4640      	mov	r0, r8
 800dde4:	f7ff fd9a 	bl	800d91c <_malloc_r>
 800dde8:	4605      	mov	r5, r0
 800ddea:	2800      	cmp	r0, #0
 800ddec:	d0ed      	beq.n	800ddca <_realloc_r+0x1e>
 800ddee:	42bc      	cmp	r4, r7
 800ddf0:	4622      	mov	r2, r4
 800ddf2:	4631      	mov	r1, r6
 800ddf4:	bf28      	it	cs
 800ddf6:	463a      	movcs	r2, r7
 800ddf8:	f7ff f97c 	bl	800d0f4 <memcpy>
 800ddfc:	4631      	mov	r1, r6
 800ddfe:	4640      	mov	r0, r8
 800de00:	f7ff fd20 	bl	800d844 <_free_r>
 800de04:	e7e1      	b.n	800ddca <_realloc_r+0x1e>
 800de06:	4635      	mov	r5, r6
 800de08:	e7df      	b.n	800ddca <_realloc_r+0x1e>

0800de0a <__sfputc_r>:
 800de0a:	6893      	ldr	r3, [r2, #8]
 800de0c:	3b01      	subs	r3, #1
 800de0e:	2b00      	cmp	r3, #0
 800de10:	b410      	push	{r4}
 800de12:	6093      	str	r3, [r2, #8]
 800de14:	da08      	bge.n	800de28 <__sfputc_r+0x1e>
 800de16:	6994      	ldr	r4, [r2, #24]
 800de18:	42a3      	cmp	r3, r4
 800de1a:	db01      	blt.n	800de20 <__sfputc_r+0x16>
 800de1c:	290a      	cmp	r1, #10
 800de1e:	d103      	bne.n	800de28 <__sfputc_r+0x1e>
 800de20:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de24:	f000 b94a 	b.w	800e0bc <__swbuf_r>
 800de28:	6813      	ldr	r3, [r2, #0]
 800de2a:	1c58      	adds	r0, r3, #1
 800de2c:	6010      	str	r0, [r2, #0]
 800de2e:	7019      	strb	r1, [r3, #0]
 800de30:	4608      	mov	r0, r1
 800de32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de36:	4770      	bx	lr

0800de38 <__sfputs_r>:
 800de38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de3a:	4606      	mov	r6, r0
 800de3c:	460f      	mov	r7, r1
 800de3e:	4614      	mov	r4, r2
 800de40:	18d5      	adds	r5, r2, r3
 800de42:	42ac      	cmp	r4, r5
 800de44:	d101      	bne.n	800de4a <__sfputs_r+0x12>
 800de46:	2000      	movs	r0, #0
 800de48:	e007      	b.n	800de5a <__sfputs_r+0x22>
 800de4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de4e:	463a      	mov	r2, r7
 800de50:	4630      	mov	r0, r6
 800de52:	f7ff ffda 	bl	800de0a <__sfputc_r>
 800de56:	1c43      	adds	r3, r0, #1
 800de58:	d1f3      	bne.n	800de42 <__sfputs_r+0xa>
 800de5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800de5c <_vfiprintf_r>:
 800de5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de60:	460d      	mov	r5, r1
 800de62:	b09d      	sub	sp, #116	; 0x74
 800de64:	4614      	mov	r4, r2
 800de66:	4698      	mov	r8, r3
 800de68:	4606      	mov	r6, r0
 800de6a:	b118      	cbz	r0, 800de74 <_vfiprintf_r+0x18>
 800de6c:	6983      	ldr	r3, [r0, #24]
 800de6e:	b90b      	cbnz	r3, 800de74 <_vfiprintf_r+0x18>
 800de70:	f000 fb14 	bl	800e49c <__sinit>
 800de74:	4b89      	ldr	r3, [pc, #548]	; (800e09c <_vfiprintf_r+0x240>)
 800de76:	429d      	cmp	r5, r3
 800de78:	d11b      	bne.n	800deb2 <_vfiprintf_r+0x56>
 800de7a:	6875      	ldr	r5, [r6, #4]
 800de7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de7e:	07d9      	lsls	r1, r3, #31
 800de80:	d405      	bmi.n	800de8e <_vfiprintf_r+0x32>
 800de82:	89ab      	ldrh	r3, [r5, #12]
 800de84:	059a      	lsls	r2, r3, #22
 800de86:	d402      	bmi.n	800de8e <_vfiprintf_r+0x32>
 800de88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de8a:	f000 fba5 	bl	800e5d8 <__retarget_lock_acquire_recursive>
 800de8e:	89ab      	ldrh	r3, [r5, #12]
 800de90:	071b      	lsls	r3, r3, #28
 800de92:	d501      	bpl.n	800de98 <_vfiprintf_r+0x3c>
 800de94:	692b      	ldr	r3, [r5, #16]
 800de96:	b9eb      	cbnz	r3, 800ded4 <_vfiprintf_r+0x78>
 800de98:	4629      	mov	r1, r5
 800de9a:	4630      	mov	r0, r6
 800de9c:	f000 f96e 	bl	800e17c <__swsetup_r>
 800dea0:	b1c0      	cbz	r0, 800ded4 <_vfiprintf_r+0x78>
 800dea2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dea4:	07dc      	lsls	r4, r3, #31
 800dea6:	d50e      	bpl.n	800dec6 <_vfiprintf_r+0x6a>
 800dea8:	f04f 30ff 	mov.w	r0, #4294967295
 800deac:	b01d      	add	sp, #116	; 0x74
 800deae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deb2:	4b7b      	ldr	r3, [pc, #492]	; (800e0a0 <_vfiprintf_r+0x244>)
 800deb4:	429d      	cmp	r5, r3
 800deb6:	d101      	bne.n	800debc <_vfiprintf_r+0x60>
 800deb8:	68b5      	ldr	r5, [r6, #8]
 800deba:	e7df      	b.n	800de7c <_vfiprintf_r+0x20>
 800debc:	4b79      	ldr	r3, [pc, #484]	; (800e0a4 <_vfiprintf_r+0x248>)
 800debe:	429d      	cmp	r5, r3
 800dec0:	bf08      	it	eq
 800dec2:	68f5      	ldreq	r5, [r6, #12]
 800dec4:	e7da      	b.n	800de7c <_vfiprintf_r+0x20>
 800dec6:	89ab      	ldrh	r3, [r5, #12]
 800dec8:	0598      	lsls	r0, r3, #22
 800deca:	d4ed      	bmi.n	800dea8 <_vfiprintf_r+0x4c>
 800decc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dece:	f000 fb84 	bl	800e5da <__retarget_lock_release_recursive>
 800ded2:	e7e9      	b.n	800dea8 <_vfiprintf_r+0x4c>
 800ded4:	2300      	movs	r3, #0
 800ded6:	9309      	str	r3, [sp, #36]	; 0x24
 800ded8:	2320      	movs	r3, #32
 800deda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dede:	f8cd 800c 	str.w	r8, [sp, #12]
 800dee2:	2330      	movs	r3, #48	; 0x30
 800dee4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e0a8 <_vfiprintf_r+0x24c>
 800dee8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800deec:	f04f 0901 	mov.w	r9, #1
 800def0:	4623      	mov	r3, r4
 800def2:	469a      	mov	sl, r3
 800def4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800def8:	b10a      	cbz	r2, 800defe <_vfiprintf_r+0xa2>
 800defa:	2a25      	cmp	r2, #37	; 0x25
 800defc:	d1f9      	bne.n	800def2 <_vfiprintf_r+0x96>
 800defe:	ebba 0b04 	subs.w	fp, sl, r4
 800df02:	d00b      	beq.n	800df1c <_vfiprintf_r+0xc0>
 800df04:	465b      	mov	r3, fp
 800df06:	4622      	mov	r2, r4
 800df08:	4629      	mov	r1, r5
 800df0a:	4630      	mov	r0, r6
 800df0c:	f7ff ff94 	bl	800de38 <__sfputs_r>
 800df10:	3001      	adds	r0, #1
 800df12:	f000 80aa 	beq.w	800e06a <_vfiprintf_r+0x20e>
 800df16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df18:	445a      	add	r2, fp
 800df1a:	9209      	str	r2, [sp, #36]	; 0x24
 800df1c:	f89a 3000 	ldrb.w	r3, [sl]
 800df20:	2b00      	cmp	r3, #0
 800df22:	f000 80a2 	beq.w	800e06a <_vfiprintf_r+0x20e>
 800df26:	2300      	movs	r3, #0
 800df28:	f04f 32ff 	mov.w	r2, #4294967295
 800df2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df30:	f10a 0a01 	add.w	sl, sl, #1
 800df34:	9304      	str	r3, [sp, #16]
 800df36:	9307      	str	r3, [sp, #28]
 800df38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df3c:	931a      	str	r3, [sp, #104]	; 0x68
 800df3e:	4654      	mov	r4, sl
 800df40:	2205      	movs	r2, #5
 800df42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df46:	4858      	ldr	r0, [pc, #352]	; (800e0a8 <_vfiprintf_r+0x24c>)
 800df48:	f7f2 f952 	bl	80001f0 <memchr>
 800df4c:	9a04      	ldr	r2, [sp, #16]
 800df4e:	b9d8      	cbnz	r0, 800df88 <_vfiprintf_r+0x12c>
 800df50:	06d1      	lsls	r1, r2, #27
 800df52:	bf44      	itt	mi
 800df54:	2320      	movmi	r3, #32
 800df56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df5a:	0713      	lsls	r3, r2, #28
 800df5c:	bf44      	itt	mi
 800df5e:	232b      	movmi	r3, #43	; 0x2b
 800df60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df64:	f89a 3000 	ldrb.w	r3, [sl]
 800df68:	2b2a      	cmp	r3, #42	; 0x2a
 800df6a:	d015      	beq.n	800df98 <_vfiprintf_r+0x13c>
 800df6c:	9a07      	ldr	r2, [sp, #28]
 800df6e:	4654      	mov	r4, sl
 800df70:	2000      	movs	r0, #0
 800df72:	f04f 0c0a 	mov.w	ip, #10
 800df76:	4621      	mov	r1, r4
 800df78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df7c:	3b30      	subs	r3, #48	; 0x30
 800df7e:	2b09      	cmp	r3, #9
 800df80:	d94e      	bls.n	800e020 <_vfiprintf_r+0x1c4>
 800df82:	b1b0      	cbz	r0, 800dfb2 <_vfiprintf_r+0x156>
 800df84:	9207      	str	r2, [sp, #28]
 800df86:	e014      	b.n	800dfb2 <_vfiprintf_r+0x156>
 800df88:	eba0 0308 	sub.w	r3, r0, r8
 800df8c:	fa09 f303 	lsl.w	r3, r9, r3
 800df90:	4313      	orrs	r3, r2
 800df92:	9304      	str	r3, [sp, #16]
 800df94:	46a2      	mov	sl, r4
 800df96:	e7d2      	b.n	800df3e <_vfiprintf_r+0xe2>
 800df98:	9b03      	ldr	r3, [sp, #12]
 800df9a:	1d19      	adds	r1, r3, #4
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	9103      	str	r1, [sp, #12]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	bfbb      	ittet	lt
 800dfa4:	425b      	neglt	r3, r3
 800dfa6:	f042 0202 	orrlt.w	r2, r2, #2
 800dfaa:	9307      	strge	r3, [sp, #28]
 800dfac:	9307      	strlt	r3, [sp, #28]
 800dfae:	bfb8      	it	lt
 800dfb0:	9204      	strlt	r2, [sp, #16]
 800dfb2:	7823      	ldrb	r3, [r4, #0]
 800dfb4:	2b2e      	cmp	r3, #46	; 0x2e
 800dfb6:	d10c      	bne.n	800dfd2 <_vfiprintf_r+0x176>
 800dfb8:	7863      	ldrb	r3, [r4, #1]
 800dfba:	2b2a      	cmp	r3, #42	; 0x2a
 800dfbc:	d135      	bne.n	800e02a <_vfiprintf_r+0x1ce>
 800dfbe:	9b03      	ldr	r3, [sp, #12]
 800dfc0:	1d1a      	adds	r2, r3, #4
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	9203      	str	r2, [sp, #12]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	bfb8      	it	lt
 800dfca:	f04f 33ff 	movlt.w	r3, #4294967295
 800dfce:	3402      	adds	r4, #2
 800dfd0:	9305      	str	r3, [sp, #20]
 800dfd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e0b8 <_vfiprintf_r+0x25c>
 800dfd6:	7821      	ldrb	r1, [r4, #0]
 800dfd8:	2203      	movs	r2, #3
 800dfda:	4650      	mov	r0, sl
 800dfdc:	f7f2 f908 	bl	80001f0 <memchr>
 800dfe0:	b140      	cbz	r0, 800dff4 <_vfiprintf_r+0x198>
 800dfe2:	2340      	movs	r3, #64	; 0x40
 800dfe4:	eba0 000a 	sub.w	r0, r0, sl
 800dfe8:	fa03 f000 	lsl.w	r0, r3, r0
 800dfec:	9b04      	ldr	r3, [sp, #16]
 800dfee:	4303      	orrs	r3, r0
 800dff0:	3401      	adds	r4, #1
 800dff2:	9304      	str	r3, [sp, #16]
 800dff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dff8:	482c      	ldr	r0, [pc, #176]	; (800e0ac <_vfiprintf_r+0x250>)
 800dffa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dffe:	2206      	movs	r2, #6
 800e000:	f7f2 f8f6 	bl	80001f0 <memchr>
 800e004:	2800      	cmp	r0, #0
 800e006:	d03f      	beq.n	800e088 <_vfiprintf_r+0x22c>
 800e008:	4b29      	ldr	r3, [pc, #164]	; (800e0b0 <_vfiprintf_r+0x254>)
 800e00a:	bb1b      	cbnz	r3, 800e054 <_vfiprintf_r+0x1f8>
 800e00c:	9b03      	ldr	r3, [sp, #12]
 800e00e:	3307      	adds	r3, #7
 800e010:	f023 0307 	bic.w	r3, r3, #7
 800e014:	3308      	adds	r3, #8
 800e016:	9303      	str	r3, [sp, #12]
 800e018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e01a:	443b      	add	r3, r7
 800e01c:	9309      	str	r3, [sp, #36]	; 0x24
 800e01e:	e767      	b.n	800def0 <_vfiprintf_r+0x94>
 800e020:	fb0c 3202 	mla	r2, ip, r2, r3
 800e024:	460c      	mov	r4, r1
 800e026:	2001      	movs	r0, #1
 800e028:	e7a5      	b.n	800df76 <_vfiprintf_r+0x11a>
 800e02a:	2300      	movs	r3, #0
 800e02c:	3401      	adds	r4, #1
 800e02e:	9305      	str	r3, [sp, #20]
 800e030:	4619      	mov	r1, r3
 800e032:	f04f 0c0a 	mov.w	ip, #10
 800e036:	4620      	mov	r0, r4
 800e038:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e03c:	3a30      	subs	r2, #48	; 0x30
 800e03e:	2a09      	cmp	r2, #9
 800e040:	d903      	bls.n	800e04a <_vfiprintf_r+0x1ee>
 800e042:	2b00      	cmp	r3, #0
 800e044:	d0c5      	beq.n	800dfd2 <_vfiprintf_r+0x176>
 800e046:	9105      	str	r1, [sp, #20]
 800e048:	e7c3      	b.n	800dfd2 <_vfiprintf_r+0x176>
 800e04a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e04e:	4604      	mov	r4, r0
 800e050:	2301      	movs	r3, #1
 800e052:	e7f0      	b.n	800e036 <_vfiprintf_r+0x1da>
 800e054:	ab03      	add	r3, sp, #12
 800e056:	9300      	str	r3, [sp, #0]
 800e058:	462a      	mov	r2, r5
 800e05a:	4b16      	ldr	r3, [pc, #88]	; (800e0b4 <_vfiprintf_r+0x258>)
 800e05c:	a904      	add	r1, sp, #16
 800e05e:	4630      	mov	r0, r6
 800e060:	f7fd fdd8 	bl	800bc14 <_printf_float>
 800e064:	4607      	mov	r7, r0
 800e066:	1c78      	adds	r0, r7, #1
 800e068:	d1d6      	bne.n	800e018 <_vfiprintf_r+0x1bc>
 800e06a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e06c:	07d9      	lsls	r1, r3, #31
 800e06e:	d405      	bmi.n	800e07c <_vfiprintf_r+0x220>
 800e070:	89ab      	ldrh	r3, [r5, #12]
 800e072:	059a      	lsls	r2, r3, #22
 800e074:	d402      	bmi.n	800e07c <_vfiprintf_r+0x220>
 800e076:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e078:	f000 faaf 	bl	800e5da <__retarget_lock_release_recursive>
 800e07c:	89ab      	ldrh	r3, [r5, #12]
 800e07e:	065b      	lsls	r3, r3, #25
 800e080:	f53f af12 	bmi.w	800dea8 <_vfiprintf_r+0x4c>
 800e084:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e086:	e711      	b.n	800deac <_vfiprintf_r+0x50>
 800e088:	ab03      	add	r3, sp, #12
 800e08a:	9300      	str	r3, [sp, #0]
 800e08c:	462a      	mov	r2, r5
 800e08e:	4b09      	ldr	r3, [pc, #36]	; (800e0b4 <_vfiprintf_r+0x258>)
 800e090:	a904      	add	r1, sp, #16
 800e092:	4630      	mov	r0, r6
 800e094:	f7fe f862 	bl	800c15c <_printf_i>
 800e098:	e7e4      	b.n	800e064 <_vfiprintf_r+0x208>
 800e09a:	bf00      	nop
 800e09c:	0800f09c 	.word	0x0800f09c
 800e0a0:	0800f0bc 	.word	0x0800f0bc
 800e0a4:	0800f07c 	.word	0x0800f07c
 800e0a8:	0800ef24 	.word	0x0800ef24
 800e0ac:	0800ef2e 	.word	0x0800ef2e
 800e0b0:	0800bc15 	.word	0x0800bc15
 800e0b4:	0800de39 	.word	0x0800de39
 800e0b8:	0800ef2a 	.word	0x0800ef2a

0800e0bc <__swbuf_r>:
 800e0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0be:	460e      	mov	r6, r1
 800e0c0:	4614      	mov	r4, r2
 800e0c2:	4605      	mov	r5, r0
 800e0c4:	b118      	cbz	r0, 800e0ce <__swbuf_r+0x12>
 800e0c6:	6983      	ldr	r3, [r0, #24]
 800e0c8:	b90b      	cbnz	r3, 800e0ce <__swbuf_r+0x12>
 800e0ca:	f000 f9e7 	bl	800e49c <__sinit>
 800e0ce:	4b21      	ldr	r3, [pc, #132]	; (800e154 <__swbuf_r+0x98>)
 800e0d0:	429c      	cmp	r4, r3
 800e0d2:	d12b      	bne.n	800e12c <__swbuf_r+0x70>
 800e0d4:	686c      	ldr	r4, [r5, #4]
 800e0d6:	69a3      	ldr	r3, [r4, #24]
 800e0d8:	60a3      	str	r3, [r4, #8]
 800e0da:	89a3      	ldrh	r3, [r4, #12]
 800e0dc:	071a      	lsls	r2, r3, #28
 800e0de:	d52f      	bpl.n	800e140 <__swbuf_r+0x84>
 800e0e0:	6923      	ldr	r3, [r4, #16]
 800e0e2:	b36b      	cbz	r3, 800e140 <__swbuf_r+0x84>
 800e0e4:	6923      	ldr	r3, [r4, #16]
 800e0e6:	6820      	ldr	r0, [r4, #0]
 800e0e8:	1ac0      	subs	r0, r0, r3
 800e0ea:	6963      	ldr	r3, [r4, #20]
 800e0ec:	b2f6      	uxtb	r6, r6
 800e0ee:	4283      	cmp	r3, r0
 800e0f0:	4637      	mov	r7, r6
 800e0f2:	dc04      	bgt.n	800e0fe <__swbuf_r+0x42>
 800e0f4:	4621      	mov	r1, r4
 800e0f6:	4628      	mov	r0, r5
 800e0f8:	f000 f93c 	bl	800e374 <_fflush_r>
 800e0fc:	bb30      	cbnz	r0, 800e14c <__swbuf_r+0x90>
 800e0fe:	68a3      	ldr	r3, [r4, #8]
 800e100:	3b01      	subs	r3, #1
 800e102:	60a3      	str	r3, [r4, #8]
 800e104:	6823      	ldr	r3, [r4, #0]
 800e106:	1c5a      	adds	r2, r3, #1
 800e108:	6022      	str	r2, [r4, #0]
 800e10a:	701e      	strb	r6, [r3, #0]
 800e10c:	6963      	ldr	r3, [r4, #20]
 800e10e:	3001      	adds	r0, #1
 800e110:	4283      	cmp	r3, r0
 800e112:	d004      	beq.n	800e11e <__swbuf_r+0x62>
 800e114:	89a3      	ldrh	r3, [r4, #12]
 800e116:	07db      	lsls	r3, r3, #31
 800e118:	d506      	bpl.n	800e128 <__swbuf_r+0x6c>
 800e11a:	2e0a      	cmp	r6, #10
 800e11c:	d104      	bne.n	800e128 <__swbuf_r+0x6c>
 800e11e:	4621      	mov	r1, r4
 800e120:	4628      	mov	r0, r5
 800e122:	f000 f927 	bl	800e374 <_fflush_r>
 800e126:	b988      	cbnz	r0, 800e14c <__swbuf_r+0x90>
 800e128:	4638      	mov	r0, r7
 800e12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e12c:	4b0a      	ldr	r3, [pc, #40]	; (800e158 <__swbuf_r+0x9c>)
 800e12e:	429c      	cmp	r4, r3
 800e130:	d101      	bne.n	800e136 <__swbuf_r+0x7a>
 800e132:	68ac      	ldr	r4, [r5, #8]
 800e134:	e7cf      	b.n	800e0d6 <__swbuf_r+0x1a>
 800e136:	4b09      	ldr	r3, [pc, #36]	; (800e15c <__swbuf_r+0xa0>)
 800e138:	429c      	cmp	r4, r3
 800e13a:	bf08      	it	eq
 800e13c:	68ec      	ldreq	r4, [r5, #12]
 800e13e:	e7ca      	b.n	800e0d6 <__swbuf_r+0x1a>
 800e140:	4621      	mov	r1, r4
 800e142:	4628      	mov	r0, r5
 800e144:	f000 f81a 	bl	800e17c <__swsetup_r>
 800e148:	2800      	cmp	r0, #0
 800e14a:	d0cb      	beq.n	800e0e4 <__swbuf_r+0x28>
 800e14c:	f04f 37ff 	mov.w	r7, #4294967295
 800e150:	e7ea      	b.n	800e128 <__swbuf_r+0x6c>
 800e152:	bf00      	nop
 800e154:	0800f09c 	.word	0x0800f09c
 800e158:	0800f0bc 	.word	0x0800f0bc
 800e15c:	0800f07c 	.word	0x0800f07c

0800e160 <__ascii_wctomb>:
 800e160:	b149      	cbz	r1, 800e176 <__ascii_wctomb+0x16>
 800e162:	2aff      	cmp	r2, #255	; 0xff
 800e164:	bf85      	ittet	hi
 800e166:	238a      	movhi	r3, #138	; 0x8a
 800e168:	6003      	strhi	r3, [r0, #0]
 800e16a:	700a      	strbls	r2, [r1, #0]
 800e16c:	f04f 30ff 	movhi.w	r0, #4294967295
 800e170:	bf98      	it	ls
 800e172:	2001      	movls	r0, #1
 800e174:	4770      	bx	lr
 800e176:	4608      	mov	r0, r1
 800e178:	4770      	bx	lr
	...

0800e17c <__swsetup_r>:
 800e17c:	4b32      	ldr	r3, [pc, #200]	; (800e248 <__swsetup_r+0xcc>)
 800e17e:	b570      	push	{r4, r5, r6, lr}
 800e180:	681d      	ldr	r5, [r3, #0]
 800e182:	4606      	mov	r6, r0
 800e184:	460c      	mov	r4, r1
 800e186:	b125      	cbz	r5, 800e192 <__swsetup_r+0x16>
 800e188:	69ab      	ldr	r3, [r5, #24]
 800e18a:	b913      	cbnz	r3, 800e192 <__swsetup_r+0x16>
 800e18c:	4628      	mov	r0, r5
 800e18e:	f000 f985 	bl	800e49c <__sinit>
 800e192:	4b2e      	ldr	r3, [pc, #184]	; (800e24c <__swsetup_r+0xd0>)
 800e194:	429c      	cmp	r4, r3
 800e196:	d10f      	bne.n	800e1b8 <__swsetup_r+0x3c>
 800e198:	686c      	ldr	r4, [r5, #4]
 800e19a:	89a3      	ldrh	r3, [r4, #12]
 800e19c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e1a0:	0719      	lsls	r1, r3, #28
 800e1a2:	d42c      	bmi.n	800e1fe <__swsetup_r+0x82>
 800e1a4:	06dd      	lsls	r5, r3, #27
 800e1a6:	d411      	bmi.n	800e1cc <__swsetup_r+0x50>
 800e1a8:	2309      	movs	r3, #9
 800e1aa:	6033      	str	r3, [r6, #0]
 800e1ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e1b0:	81a3      	strh	r3, [r4, #12]
 800e1b2:	f04f 30ff 	mov.w	r0, #4294967295
 800e1b6:	e03e      	b.n	800e236 <__swsetup_r+0xba>
 800e1b8:	4b25      	ldr	r3, [pc, #148]	; (800e250 <__swsetup_r+0xd4>)
 800e1ba:	429c      	cmp	r4, r3
 800e1bc:	d101      	bne.n	800e1c2 <__swsetup_r+0x46>
 800e1be:	68ac      	ldr	r4, [r5, #8]
 800e1c0:	e7eb      	b.n	800e19a <__swsetup_r+0x1e>
 800e1c2:	4b24      	ldr	r3, [pc, #144]	; (800e254 <__swsetup_r+0xd8>)
 800e1c4:	429c      	cmp	r4, r3
 800e1c6:	bf08      	it	eq
 800e1c8:	68ec      	ldreq	r4, [r5, #12]
 800e1ca:	e7e6      	b.n	800e19a <__swsetup_r+0x1e>
 800e1cc:	0758      	lsls	r0, r3, #29
 800e1ce:	d512      	bpl.n	800e1f6 <__swsetup_r+0x7a>
 800e1d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e1d2:	b141      	cbz	r1, 800e1e6 <__swsetup_r+0x6a>
 800e1d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e1d8:	4299      	cmp	r1, r3
 800e1da:	d002      	beq.n	800e1e2 <__swsetup_r+0x66>
 800e1dc:	4630      	mov	r0, r6
 800e1de:	f7ff fb31 	bl	800d844 <_free_r>
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	6363      	str	r3, [r4, #52]	; 0x34
 800e1e6:	89a3      	ldrh	r3, [r4, #12]
 800e1e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e1ec:	81a3      	strh	r3, [r4, #12]
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	6063      	str	r3, [r4, #4]
 800e1f2:	6923      	ldr	r3, [r4, #16]
 800e1f4:	6023      	str	r3, [r4, #0]
 800e1f6:	89a3      	ldrh	r3, [r4, #12]
 800e1f8:	f043 0308 	orr.w	r3, r3, #8
 800e1fc:	81a3      	strh	r3, [r4, #12]
 800e1fe:	6923      	ldr	r3, [r4, #16]
 800e200:	b94b      	cbnz	r3, 800e216 <__swsetup_r+0x9a>
 800e202:	89a3      	ldrh	r3, [r4, #12]
 800e204:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e20c:	d003      	beq.n	800e216 <__swsetup_r+0x9a>
 800e20e:	4621      	mov	r1, r4
 800e210:	4630      	mov	r0, r6
 800e212:	f000 fa09 	bl	800e628 <__smakebuf_r>
 800e216:	89a0      	ldrh	r0, [r4, #12]
 800e218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e21c:	f010 0301 	ands.w	r3, r0, #1
 800e220:	d00a      	beq.n	800e238 <__swsetup_r+0xbc>
 800e222:	2300      	movs	r3, #0
 800e224:	60a3      	str	r3, [r4, #8]
 800e226:	6963      	ldr	r3, [r4, #20]
 800e228:	425b      	negs	r3, r3
 800e22a:	61a3      	str	r3, [r4, #24]
 800e22c:	6923      	ldr	r3, [r4, #16]
 800e22e:	b943      	cbnz	r3, 800e242 <__swsetup_r+0xc6>
 800e230:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e234:	d1ba      	bne.n	800e1ac <__swsetup_r+0x30>
 800e236:	bd70      	pop	{r4, r5, r6, pc}
 800e238:	0781      	lsls	r1, r0, #30
 800e23a:	bf58      	it	pl
 800e23c:	6963      	ldrpl	r3, [r4, #20]
 800e23e:	60a3      	str	r3, [r4, #8]
 800e240:	e7f4      	b.n	800e22c <__swsetup_r+0xb0>
 800e242:	2000      	movs	r0, #0
 800e244:	e7f7      	b.n	800e236 <__swsetup_r+0xba>
 800e246:	bf00      	nop
 800e248:	20000110 	.word	0x20000110
 800e24c:	0800f09c 	.word	0x0800f09c
 800e250:	0800f0bc 	.word	0x0800f0bc
 800e254:	0800f07c 	.word	0x0800f07c

0800e258 <abort>:
 800e258:	b508      	push	{r3, lr}
 800e25a:	2006      	movs	r0, #6
 800e25c:	f000 fa54 	bl	800e708 <raise>
 800e260:	2001      	movs	r0, #1
 800e262:	f7f5 f9d1 	bl	8003608 <_exit>
	...

0800e268 <__sflush_r>:
 800e268:	898a      	ldrh	r2, [r1, #12]
 800e26a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e26e:	4605      	mov	r5, r0
 800e270:	0710      	lsls	r0, r2, #28
 800e272:	460c      	mov	r4, r1
 800e274:	d458      	bmi.n	800e328 <__sflush_r+0xc0>
 800e276:	684b      	ldr	r3, [r1, #4]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	dc05      	bgt.n	800e288 <__sflush_r+0x20>
 800e27c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e27e:	2b00      	cmp	r3, #0
 800e280:	dc02      	bgt.n	800e288 <__sflush_r+0x20>
 800e282:	2000      	movs	r0, #0
 800e284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e288:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e28a:	2e00      	cmp	r6, #0
 800e28c:	d0f9      	beq.n	800e282 <__sflush_r+0x1a>
 800e28e:	2300      	movs	r3, #0
 800e290:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e294:	682f      	ldr	r7, [r5, #0]
 800e296:	602b      	str	r3, [r5, #0]
 800e298:	d032      	beq.n	800e300 <__sflush_r+0x98>
 800e29a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e29c:	89a3      	ldrh	r3, [r4, #12]
 800e29e:	075a      	lsls	r2, r3, #29
 800e2a0:	d505      	bpl.n	800e2ae <__sflush_r+0x46>
 800e2a2:	6863      	ldr	r3, [r4, #4]
 800e2a4:	1ac0      	subs	r0, r0, r3
 800e2a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e2a8:	b10b      	cbz	r3, 800e2ae <__sflush_r+0x46>
 800e2aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e2ac:	1ac0      	subs	r0, r0, r3
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	4602      	mov	r2, r0
 800e2b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e2b4:	6a21      	ldr	r1, [r4, #32]
 800e2b6:	4628      	mov	r0, r5
 800e2b8:	47b0      	blx	r6
 800e2ba:	1c43      	adds	r3, r0, #1
 800e2bc:	89a3      	ldrh	r3, [r4, #12]
 800e2be:	d106      	bne.n	800e2ce <__sflush_r+0x66>
 800e2c0:	6829      	ldr	r1, [r5, #0]
 800e2c2:	291d      	cmp	r1, #29
 800e2c4:	d82c      	bhi.n	800e320 <__sflush_r+0xb8>
 800e2c6:	4a2a      	ldr	r2, [pc, #168]	; (800e370 <__sflush_r+0x108>)
 800e2c8:	40ca      	lsrs	r2, r1
 800e2ca:	07d6      	lsls	r6, r2, #31
 800e2cc:	d528      	bpl.n	800e320 <__sflush_r+0xb8>
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	6062      	str	r2, [r4, #4]
 800e2d2:	04d9      	lsls	r1, r3, #19
 800e2d4:	6922      	ldr	r2, [r4, #16]
 800e2d6:	6022      	str	r2, [r4, #0]
 800e2d8:	d504      	bpl.n	800e2e4 <__sflush_r+0x7c>
 800e2da:	1c42      	adds	r2, r0, #1
 800e2dc:	d101      	bne.n	800e2e2 <__sflush_r+0x7a>
 800e2de:	682b      	ldr	r3, [r5, #0]
 800e2e0:	b903      	cbnz	r3, 800e2e4 <__sflush_r+0x7c>
 800e2e2:	6560      	str	r0, [r4, #84]	; 0x54
 800e2e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e2e6:	602f      	str	r7, [r5, #0]
 800e2e8:	2900      	cmp	r1, #0
 800e2ea:	d0ca      	beq.n	800e282 <__sflush_r+0x1a>
 800e2ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e2f0:	4299      	cmp	r1, r3
 800e2f2:	d002      	beq.n	800e2fa <__sflush_r+0x92>
 800e2f4:	4628      	mov	r0, r5
 800e2f6:	f7ff faa5 	bl	800d844 <_free_r>
 800e2fa:	2000      	movs	r0, #0
 800e2fc:	6360      	str	r0, [r4, #52]	; 0x34
 800e2fe:	e7c1      	b.n	800e284 <__sflush_r+0x1c>
 800e300:	6a21      	ldr	r1, [r4, #32]
 800e302:	2301      	movs	r3, #1
 800e304:	4628      	mov	r0, r5
 800e306:	47b0      	blx	r6
 800e308:	1c41      	adds	r1, r0, #1
 800e30a:	d1c7      	bne.n	800e29c <__sflush_r+0x34>
 800e30c:	682b      	ldr	r3, [r5, #0]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d0c4      	beq.n	800e29c <__sflush_r+0x34>
 800e312:	2b1d      	cmp	r3, #29
 800e314:	d001      	beq.n	800e31a <__sflush_r+0xb2>
 800e316:	2b16      	cmp	r3, #22
 800e318:	d101      	bne.n	800e31e <__sflush_r+0xb6>
 800e31a:	602f      	str	r7, [r5, #0]
 800e31c:	e7b1      	b.n	800e282 <__sflush_r+0x1a>
 800e31e:	89a3      	ldrh	r3, [r4, #12]
 800e320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e324:	81a3      	strh	r3, [r4, #12]
 800e326:	e7ad      	b.n	800e284 <__sflush_r+0x1c>
 800e328:	690f      	ldr	r7, [r1, #16]
 800e32a:	2f00      	cmp	r7, #0
 800e32c:	d0a9      	beq.n	800e282 <__sflush_r+0x1a>
 800e32e:	0793      	lsls	r3, r2, #30
 800e330:	680e      	ldr	r6, [r1, #0]
 800e332:	bf08      	it	eq
 800e334:	694b      	ldreq	r3, [r1, #20]
 800e336:	600f      	str	r7, [r1, #0]
 800e338:	bf18      	it	ne
 800e33a:	2300      	movne	r3, #0
 800e33c:	eba6 0807 	sub.w	r8, r6, r7
 800e340:	608b      	str	r3, [r1, #8]
 800e342:	f1b8 0f00 	cmp.w	r8, #0
 800e346:	dd9c      	ble.n	800e282 <__sflush_r+0x1a>
 800e348:	6a21      	ldr	r1, [r4, #32]
 800e34a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e34c:	4643      	mov	r3, r8
 800e34e:	463a      	mov	r2, r7
 800e350:	4628      	mov	r0, r5
 800e352:	47b0      	blx	r6
 800e354:	2800      	cmp	r0, #0
 800e356:	dc06      	bgt.n	800e366 <__sflush_r+0xfe>
 800e358:	89a3      	ldrh	r3, [r4, #12]
 800e35a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e35e:	81a3      	strh	r3, [r4, #12]
 800e360:	f04f 30ff 	mov.w	r0, #4294967295
 800e364:	e78e      	b.n	800e284 <__sflush_r+0x1c>
 800e366:	4407      	add	r7, r0
 800e368:	eba8 0800 	sub.w	r8, r8, r0
 800e36c:	e7e9      	b.n	800e342 <__sflush_r+0xda>
 800e36e:	bf00      	nop
 800e370:	20400001 	.word	0x20400001

0800e374 <_fflush_r>:
 800e374:	b538      	push	{r3, r4, r5, lr}
 800e376:	690b      	ldr	r3, [r1, #16]
 800e378:	4605      	mov	r5, r0
 800e37a:	460c      	mov	r4, r1
 800e37c:	b913      	cbnz	r3, 800e384 <_fflush_r+0x10>
 800e37e:	2500      	movs	r5, #0
 800e380:	4628      	mov	r0, r5
 800e382:	bd38      	pop	{r3, r4, r5, pc}
 800e384:	b118      	cbz	r0, 800e38e <_fflush_r+0x1a>
 800e386:	6983      	ldr	r3, [r0, #24]
 800e388:	b90b      	cbnz	r3, 800e38e <_fflush_r+0x1a>
 800e38a:	f000 f887 	bl	800e49c <__sinit>
 800e38e:	4b14      	ldr	r3, [pc, #80]	; (800e3e0 <_fflush_r+0x6c>)
 800e390:	429c      	cmp	r4, r3
 800e392:	d11b      	bne.n	800e3cc <_fflush_r+0x58>
 800e394:	686c      	ldr	r4, [r5, #4]
 800e396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d0ef      	beq.n	800e37e <_fflush_r+0xa>
 800e39e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e3a0:	07d0      	lsls	r0, r2, #31
 800e3a2:	d404      	bmi.n	800e3ae <_fflush_r+0x3a>
 800e3a4:	0599      	lsls	r1, r3, #22
 800e3a6:	d402      	bmi.n	800e3ae <_fflush_r+0x3a>
 800e3a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e3aa:	f000 f915 	bl	800e5d8 <__retarget_lock_acquire_recursive>
 800e3ae:	4628      	mov	r0, r5
 800e3b0:	4621      	mov	r1, r4
 800e3b2:	f7ff ff59 	bl	800e268 <__sflush_r>
 800e3b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e3b8:	07da      	lsls	r2, r3, #31
 800e3ba:	4605      	mov	r5, r0
 800e3bc:	d4e0      	bmi.n	800e380 <_fflush_r+0xc>
 800e3be:	89a3      	ldrh	r3, [r4, #12]
 800e3c0:	059b      	lsls	r3, r3, #22
 800e3c2:	d4dd      	bmi.n	800e380 <_fflush_r+0xc>
 800e3c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e3c6:	f000 f908 	bl	800e5da <__retarget_lock_release_recursive>
 800e3ca:	e7d9      	b.n	800e380 <_fflush_r+0xc>
 800e3cc:	4b05      	ldr	r3, [pc, #20]	; (800e3e4 <_fflush_r+0x70>)
 800e3ce:	429c      	cmp	r4, r3
 800e3d0:	d101      	bne.n	800e3d6 <_fflush_r+0x62>
 800e3d2:	68ac      	ldr	r4, [r5, #8]
 800e3d4:	e7df      	b.n	800e396 <_fflush_r+0x22>
 800e3d6:	4b04      	ldr	r3, [pc, #16]	; (800e3e8 <_fflush_r+0x74>)
 800e3d8:	429c      	cmp	r4, r3
 800e3da:	bf08      	it	eq
 800e3dc:	68ec      	ldreq	r4, [r5, #12]
 800e3de:	e7da      	b.n	800e396 <_fflush_r+0x22>
 800e3e0:	0800f09c 	.word	0x0800f09c
 800e3e4:	0800f0bc 	.word	0x0800f0bc
 800e3e8:	0800f07c 	.word	0x0800f07c

0800e3ec <std>:
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	b510      	push	{r4, lr}
 800e3f0:	4604      	mov	r4, r0
 800e3f2:	e9c0 3300 	strd	r3, r3, [r0]
 800e3f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e3fa:	6083      	str	r3, [r0, #8]
 800e3fc:	8181      	strh	r1, [r0, #12]
 800e3fe:	6643      	str	r3, [r0, #100]	; 0x64
 800e400:	81c2      	strh	r2, [r0, #14]
 800e402:	6183      	str	r3, [r0, #24]
 800e404:	4619      	mov	r1, r3
 800e406:	2208      	movs	r2, #8
 800e408:	305c      	adds	r0, #92	; 0x5c
 800e40a:	f7fd fb5b 	bl	800bac4 <memset>
 800e40e:	4b05      	ldr	r3, [pc, #20]	; (800e424 <std+0x38>)
 800e410:	6263      	str	r3, [r4, #36]	; 0x24
 800e412:	4b05      	ldr	r3, [pc, #20]	; (800e428 <std+0x3c>)
 800e414:	62a3      	str	r3, [r4, #40]	; 0x28
 800e416:	4b05      	ldr	r3, [pc, #20]	; (800e42c <std+0x40>)
 800e418:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e41a:	4b05      	ldr	r3, [pc, #20]	; (800e430 <std+0x44>)
 800e41c:	6224      	str	r4, [r4, #32]
 800e41e:	6323      	str	r3, [r4, #48]	; 0x30
 800e420:	bd10      	pop	{r4, pc}
 800e422:	bf00      	nop
 800e424:	0800e741 	.word	0x0800e741
 800e428:	0800e763 	.word	0x0800e763
 800e42c:	0800e79b 	.word	0x0800e79b
 800e430:	0800e7bf 	.word	0x0800e7bf

0800e434 <_cleanup_r>:
 800e434:	4901      	ldr	r1, [pc, #4]	; (800e43c <_cleanup_r+0x8>)
 800e436:	f000 b8af 	b.w	800e598 <_fwalk_reent>
 800e43a:	bf00      	nop
 800e43c:	0800e375 	.word	0x0800e375

0800e440 <__sfmoreglue>:
 800e440:	b570      	push	{r4, r5, r6, lr}
 800e442:	2268      	movs	r2, #104	; 0x68
 800e444:	1e4d      	subs	r5, r1, #1
 800e446:	4355      	muls	r5, r2
 800e448:	460e      	mov	r6, r1
 800e44a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e44e:	f7ff fa65 	bl	800d91c <_malloc_r>
 800e452:	4604      	mov	r4, r0
 800e454:	b140      	cbz	r0, 800e468 <__sfmoreglue+0x28>
 800e456:	2100      	movs	r1, #0
 800e458:	e9c0 1600 	strd	r1, r6, [r0]
 800e45c:	300c      	adds	r0, #12
 800e45e:	60a0      	str	r0, [r4, #8]
 800e460:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e464:	f7fd fb2e 	bl	800bac4 <memset>
 800e468:	4620      	mov	r0, r4
 800e46a:	bd70      	pop	{r4, r5, r6, pc}

0800e46c <__sfp_lock_acquire>:
 800e46c:	4801      	ldr	r0, [pc, #4]	; (800e474 <__sfp_lock_acquire+0x8>)
 800e46e:	f000 b8b3 	b.w	800e5d8 <__retarget_lock_acquire_recursive>
 800e472:	bf00      	nop
 800e474:	20000add 	.word	0x20000add

0800e478 <__sfp_lock_release>:
 800e478:	4801      	ldr	r0, [pc, #4]	; (800e480 <__sfp_lock_release+0x8>)
 800e47a:	f000 b8ae 	b.w	800e5da <__retarget_lock_release_recursive>
 800e47e:	bf00      	nop
 800e480:	20000add 	.word	0x20000add

0800e484 <__sinit_lock_acquire>:
 800e484:	4801      	ldr	r0, [pc, #4]	; (800e48c <__sinit_lock_acquire+0x8>)
 800e486:	f000 b8a7 	b.w	800e5d8 <__retarget_lock_acquire_recursive>
 800e48a:	bf00      	nop
 800e48c:	20000ade 	.word	0x20000ade

0800e490 <__sinit_lock_release>:
 800e490:	4801      	ldr	r0, [pc, #4]	; (800e498 <__sinit_lock_release+0x8>)
 800e492:	f000 b8a2 	b.w	800e5da <__retarget_lock_release_recursive>
 800e496:	bf00      	nop
 800e498:	20000ade 	.word	0x20000ade

0800e49c <__sinit>:
 800e49c:	b510      	push	{r4, lr}
 800e49e:	4604      	mov	r4, r0
 800e4a0:	f7ff fff0 	bl	800e484 <__sinit_lock_acquire>
 800e4a4:	69a3      	ldr	r3, [r4, #24]
 800e4a6:	b11b      	cbz	r3, 800e4b0 <__sinit+0x14>
 800e4a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4ac:	f7ff bff0 	b.w	800e490 <__sinit_lock_release>
 800e4b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e4b4:	6523      	str	r3, [r4, #80]	; 0x50
 800e4b6:	4b13      	ldr	r3, [pc, #76]	; (800e504 <__sinit+0x68>)
 800e4b8:	4a13      	ldr	r2, [pc, #76]	; (800e508 <__sinit+0x6c>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	62a2      	str	r2, [r4, #40]	; 0x28
 800e4be:	42a3      	cmp	r3, r4
 800e4c0:	bf04      	itt	eq
 800e4c2:	2301      	moveq	r3, #1
 800e4c4:	61a3      	streq	r3, [r4, #24]
 800e4c6:	4620      	mov	r0, r4
 800e4c8:	f000 f820 	bl	800e50c <__sfp>
 800e4cc:	6060      	str	r0, [r4, #4]
 800e4ce:	4620      	mov	r0, r4
 800e4d0:	f000 f81c 	bl	800e50c <__sfp>
 800e4d4:	60a0      	str	r0, [r4, #8]
 800e4d6:	4620      	mov	r0, r4
 800e4d8:	f000 f818 	bl	800e50c <__sfp>
 800e4dc:	2200      	movs	r2, #0
 800e4de:	60e0      	str	r0, [r4, #12]
 800e4e0:	2104      	movs	r1, #4
 800e4e2:	6860      	ldr	r0, [r4, #4]
 800e4e4:	f7ff ff82 	bl	800e3ec <std>
 800e4e8:	68a0      	ldr	r0, [r4, #8]
 800e4ea:	2201      	movs	r2, #1
 800e4ec:	2109      	movs	r1, #9
 800e4ee:	f7ff ff7d 	bl	800e3ec <std>
 800e4f2:	68e0      	ldr	r0, [r4, #12]
 800e4f4:	2202      	movs	r2, #2
 800e4f6:	2112      	movs	r1, #18
 800e4f8:	f7ff ff78 	bl	800e3ec <std>
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	61a3      	str	r3, [r4, #24]
 800e500:	e7d2      	b.n	800e4a8 <__sinit+0xc>
 800e502:	bf00      	nop
 800e504:	0800ed04 	.word	0x0800ed04
 800e508:	0800e435 	.word	0x0800e435

0800e50c <__sfp>:
 800e50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e50e:	4607      	mov	r7, r0
 800e510:	f7ff ffac 	bl	800e46c <__sfp_lock_acquire>
 800e514:	4b1e      	ldr	r3, [pc, #120]	; (800e590 <__sfp+0x84>)
 800e516:	681e      	ldr	r6, [r3, #0]
 800e518:	69b3      	ldr	r3, [r6, #24]
 800e51a:	b913      	cbnz	r3, 800e522 <__sfp+0x16>
 800e51c:	4630      	mov	r0, r6
 800e51e:	f7ff ffbd 	bl	800e49c <__sinit>
 800e522:	3648      	adds	r6, #72	; 0x48
 800e524:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e528:	3b01      	subs	r3, #1
 800e52a:	d503      	bpl.n	800e534 <__sfp+0x28>
 800e52c:	6833      	ldr	r3, [r6, #0]
 800e52e:	b30b      	cbz	r3, 800e574 <__sfp+0x68>
 800e530:	6836      	ldr	r6, [r6, #0]
 800e532:	e7f7      	b.n	800e524 <__sfp+0x18>
 800e534:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e538:	b9d5      	cbnz	r5, 800e570 <__sfp+0x64>
 800e53a:	4b16      	ldr	r3, [pc, #88]	; (800e594 <__sfp+0x88>)
 800e53c:	60e3      	str	r3, [r4, #12]
 800e53e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e542:	6665      	str	r5, [r4, #100]	; 0x64
 800e544:	f000 f847 	bl	800e5d6 <__retarget_lock_init_recursive>
 800e548:	f7ff ff96 	bl	800e478 <__sfp_lock_release>
 800e54c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e550:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e554:	6025      	str	r5, [r4, #0]
 800e556:	61a5      	str	r5, [r4, #24]
 800e558:	2208      	movs	r2, #8
 800e55a:	4629      	mov	r1, r5
 800e55c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e560:	f7fd fab0 	bl	800bac4 <memset>
 800e564:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e568:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e56c:	4620      	mov	r0, r4
 800e56e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e570:	3468      	adds	r4, #104	; 0x68
 800e572:	e7d9      	b.n	800e528 <__sfp+0x1c>
 800e574:	2104      	movs	r1, #4
 800e576:	4638      	mov	r0, r7
 800e578:	f7ff ff62 	bl	800e440 <__sfmoreglue>
 800e57c:	4604      	mov	r4, r0
 800e57e:	6030      	str	r0, [r6, #0]
 800e580:	2800      	cmp	r0, #0
 800e582:	d1d5      	bne.n	800e530 <__sfp+0x24>
 800e584:	f7ff ff78 	bl	800e478 <__sfp_lock_release>
 800e588:	230c      	movs	r3, #12
 800e58a:	603b      	str	r3, [r7, #0]
 800e58c:	e7ee      	b.n	800e56c <__sfp+0x60>
 800e58e:	bf00      	nop
 800e590:	0800ed04 	.word	0x0800ed04
 800e594:	ffff0001 	.word	0xffff0001

0800e598 <_fwalk_reent>:
 800e598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e59c:	4606      	mov	r6, r0
 800e59e:	4688      	mov	r8, r1
 800e5a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e5a4:	2700      	movs	r7, #0
 800e5a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e5aa:	f1b9 0901 	subs.w	r9, r9, #1
 800e5ae:	d505      	bpl.n	800e5bc <_fwalk_reent+0x24>
 800e5b0:	6824      	ldr	r4, [r4, #0]
 800e5b2:	2c00      	cmp	r4, #0
 800e5b4:	d1f7      	bne.n	800e5a6 <_fwalk_reent+0xe>
 800e5b6:	4638      	mov	r0, r7
 800e5b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5bc:	89ab      	ldrh	r3, [r5, #12]
 800e5be:	2b01      	cmp	r3, #1
 800e5c0:	d907      	bls.n	800e5d2 <_fwalk_reent+0x3a>
 800e5c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e5c6:	3301      	adds	r3, #1
 800e5c8:	d003      	beq.n	800e5d2 <_fwalk_reent+0x3a>
 800e5ca:	4629      	mov	r1, r5
 800e5cc:	4630      	mov	r0, r6
 800e5ce:	47c0      	blx	r8
 800e5d0:	4307      	orrs	r7, r0
 800e5d2:	3568      	adds	r5, #104	; 0x68
 800e5d4:	e7e9      	b.n	800e5aa <_fwalk_reent+0x12>

0800e5d6 <__retarget_lock_init_recursive>:
 800e5d6:	4770      	bx	lr

0800e5d8 <__retarget_lock_acquire_recursive>:
 800e5d8:	4770      	bx	lr

0800e5da <__retarget_lock_release_recursive>:
 800e5da:	4770      	bx	lr

0800e5dc <__swhatbuf_r>:
 800e5dc:	b570      	push	{r4, r5, r6, lr}
 800e5de:	460e      	mov	r6, r1
 800e5e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5e4:	2900      	cmp	r1, #0
 800e5e6:	b096      	sub	sp, #88	; 0x58
 800e5e8:	4614      	mov	r4, r2
 800e5ea:	461d      	mov	r5, r3
 800e5ec:	da08      	bge.n	800e600 <__swhatbuf_r+0x24>
 800e5ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	602a      	str	r2, [r5, #0]
 800e5f6:	061a      	lsls	r2, r3, #24
 800e5f8:	d410      	bmi.n	800e61c <__swhatbuf_r+0x40>
 800e5fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5fe:	e00e      	b.n	800e61e <__swhatbuf_r+0x42>
 800e600:	466a      	mov	r2, sp
 800e602:	f000 f903 	bl	800e80c <_fstat_r>
 800e606:	2800      	cmp	r0, #0
 800e608:	dbf1      	blt.n	800e5ee <__swhatbuf_r+0x12>
 800e60a:	9a01      	ldr	r2, [sp, #4]
 800e60c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e610:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e614:	425a      	negs	r2, r3
 800e616:	415a      	adcs	r2, r3
 800e618:	602a      	str	r2, [r5, #0]
 800e61a:	e7ee      	b.n	800e5fa <__swhatbuf_r+0x1e>
 800e61c:	2340      	movs	r3, #64	; 0x40
 800e61e:	2000      	movs	r0, #0
 800e620:	6023      	str	r3, [r4, #0]
 800e622:	b016      	add	sp, #88	; 0x58
 800e624:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e628 <__smakebuf_r>:
 800e628:	898b      	ldrh	r3, [r1, #12]
 800e62a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e62c:	079d      	lsls	r5, r3, #30
 800e62e:	4606      	mov	r6, r0
 800e630:	460c      	mov	r4, r1
 800e632:	d507      	bpl.n	800e644 <__smakebuf_r+0x1c>
 800e634:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e638:	6023      	str	r3, [r4, #0]
 800e63a:	6123      	str	r3, [r4, #16]
 800e63c:	2301      	movs	r3, #1
 800e63e:	6163      	str	r3, [r4, #20]
 800e640:	b002      	add	sp, #8
 800e642:	bd70      	pop	{r4, r5, r6, pc}
 800e644:	ab01      	add	r3, sp, #4
 800e646:	466a      	mov	r2, sp
 800e648:	f7ff ffc8 	bl	800e5dc <__swhatbuf_r>
 800e64c:	9900      	ldr	r1, [sp, #0]
 800e64e:	4605      	mov	r5, r0
 800e650:	4630      	mov	r0, r6
 800e652:	f7ff f963 	bl	800d91c <_malloc_r>
 800e656:	b948      	cbnz	r0, 800e66c <__smakebuf_r+0x44>
 800e658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e65c:	059a      	lsls	r2, r3, #22
 800e65e:	d4ef      	bmi.n	800e640 <__smakebuf_r+0x18>
 800e660:	f023 0303 	bic.w	r3, r3, #3
 800e664:	f043 0302 	orr.w	r3, r3, #2
 800e668:	81a3      	strh	r3, [r4, #12]
 800e66a:	e7e3      	b.n	800e634 <__smakebuf_r+0xc>
 800e66c:	4b0d      	ldr	r3, [pc, #52]	; (800e6a4 <__smakebuf_r+0x7c>)
 800e66e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e670:	89a3      	ldrh	r3, [r4, #12]
 800e672:	6020      	str	r0, [r4, #0]
 800e674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e678:	81a3      	strh	r3, [r4, #12]
 800e67a:	9b00      	ldr	r3, [sp, #0]
 800e67c:	6163      	str	r3, [r4, #20]
 800e67e:	9b01      	ldr	r3, [sp, #4]
 800e680:	6120      	str	r0, [r4, #16]
 800e682:	b15b      	cbz	r3, 800e69c <__smakebuf_r+0x74>
 800e684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e688:	4630      	mov	r0, r6
 800e68a:	f000 f8d1 	bl	800e830 <_isatty_r>
 800e68e:	b128      	cbz	r0, 800e69c <__smakebuf_r+0x74>
 800e690:	89a3      	ldrh	r3, [r4, #12]
 800e692:	f023 0303 	bic.w	r3, r3, #3
 800e696:	f043 0301 	orr.w	r3, r3, #1
 800e69a:	81a3      	strh	r3, [r4, #12]
 800e69c:	89a0      	ldrh	r0, [r4, #12]
 800e69e:	4305      	orrs	r5, r0
 800e6a0:	81a5      	strh	r5, [r4, #12]
 800e6a2:	e7cd      	b.n	800e640 <__smakebuf_r+0x18>
 800e6a4:	0800e435 	.word	0x0800e435

0800e6a8 <_malloc_usable_size_r>:
 800e6a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6ac:	1f18      	subs	r0, r3, #4
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	bfbc      	itt	lt
 800e6b2:	580b      	ldrlt	r3, [r1, r0]
 800e6b4:	18c0      	addlt	r0, r0, r3
 800e6b6:	4770      	bx	lr

0800e6b8 <_raise_r>:
 800e6b8:	291f      	cmp	r1, #31
 800e6ba:	b538      	push	{r3, r4, r5, lr}
 800e6bc:	4604      	mov	r4, r0
 800e6be:	460d      	mov	r5, r1
 800e6c0:	d904      	bls.n	800e6cc <_raise_r+0x14>
 800e6c2:	2316      	movs	r3, #22
 800e6c4:	6003      	str	r3, [r0, #0]
 800e6c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e6ca:	bd38      	pop	{r3, r4, r5, pc}
 800e6cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e6ce:	b112      	cbz	r2, 800e6d6 <_raise_r+0x1e>
 800e6d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e6d4:	b94b      	cbnz	r3, 800e6ea <_raise_r+0x32>
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	f000 f830 	bl	800e73c <_getpid_r>
 800e6dc:	462a      	mov	r2, r5
 800e6de:	4601      	mov	r1, r0
 800e6e0:	4620      	mov	r0, r4
 800e6e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6e6:	f000 b817 	b.w	800e718 <_kill_r>
 800e6ea:	2b01      	cmp	r3, #1
 800e6ec:	d00a      	beq.n	800e704 <_raise_r+0x4c>
 800e6ee:	1c59      	adds	r1, r3, #1
 800e6f0:	d103      	bne.n	800e6fa <_raise_r+0x42>
 800e6f2:	2316      	movs	r3, #22
 800e6f4:	6003      	str	r3, [r0, #0]
 800e6f6:	2001      	movs	r0, #1
 800e6f8:	e7e7      	b.n	800e6ca <_raise_r+0x12>
 800e6fa:	2400      	movs	r4, #0
 800e6fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e700:	4628      	mov	r0, r5
 800e702:	4798      	blx	r3
 800e704:	2000      	movs	r0, #0
 800e706:	e7e0      	b.n	800e6ca <_raise_r+0x12>

0800e708 <raise>:
 800e708:	4b02      	ldr	r3, [pc, #8]	; (800e714 <raise+0xc>)
 800e70a:	4601      	mov	r1, r0
 800e70c:	6818      	ldr	r0, [r3, #0]
 800e70e:	f7ff bfd3 	b.w	800e6b8 <_raise_r>
 800e712:	bf00      	nop
 800e714:	20000110 	.word	0x20000110

0800e718 <_kill_r>:
 800e718:	b538      	push	{r3, r4, r5, lr}
 800e71a:	4d07      	ldr	r5, [pc, #28]	; (800e738 <_kill_r+0x20>)
 800e71c:	2300      	movs	r3, #0
 800e71e:	4604      	mov	r4, r0
 800e720:	4608      	mov	r0, r1
 800e722:	4611      	mov	r1, r2
 800e724:	602b      	str	r3, [r5, #0]
 800e726:	f7f4 ff5f 	bl	80035e8 <_kill>
 800e72a:	1c43      	adds	r3, r0, #1
 800e72c:	d102      	bne.n	800e734 <_kill_r+0x1c>
 800e72e:	682b      	ldr	r3, [r5, #0]
 800e730:	b103      	cbz	r3, 800e734 <_kill_r+0x1c>
 800e732:	6023      	str	r3, [r4, #0]
 800e734:	bd38      	pop	{r3, r4, r5, pc}
 800e736:	bf00      	nop
 800e738:	20000ad8 	.word	0x20000ad8

0800e73c <_getpid_r>:
 800e73c:	f7f4 bf4c 	b.w	80035d8 <_getpid>

0800e740 <__sread>:
 800e740:	b510      	push	{r4, lr}
 800e742:	460c      	mov	r4, r1
 800e744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e748:	f000 f894 	bl	800e874 <_read_r>
 800e74c:	2800      	cmp	r0, #0
 800e74e:	bfab      	itete	ge
 800e750:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e752:	89a3      	ldrhlt	r3, [r4, #12]
 800e754:	181b      	addge	r3, r3, r0
 800e756:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e75a:	bfac      	ite	ge
 800e75c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e75e:	81a3      	strhlt	r3, [r4, #12]
 800e760:	bd10      	pop	{r4, pc}

0800e762 <__swrite>:
 800e762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e766:	461f      	mov	r7, r3
 800e768:	898b      	ldrh	r3, [r1, #12]
 800e76a:	05db      	lsls	r3, r3, #23
 800e76c:	4605      	mov	r5, r0
 800e76e:	460c      	mov	r4, r1
 800e770:	4616      	mov	r6, r2
 800e772:	d505      	bpl.n	800e780 <__swrite+0x1e>
 800e774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e778:	2302      	movs	r3, #2
 800e77a:	2200      	movs	r2, #0
 800e77c:	f000 f868 	bl	800e850 <_lseek_r>
 800e780:	89a3      	ldrh	r3, [r4, #12]
 800e782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e78a:	81a3      	strh	r3, [r4, #12]
 800e78c:	4632      	mov	r2, r6
 800e78e:	463b      	mov	r3, r7
 800e790:	4628      	mov	r0, r5
 800e792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e796:	f000 b817 	b.w	800e7c8 <_write_r>

0800e79a <__sseek>:
 800e79a:	b510      	push	{r4, lr}
 800e79c:	460c      	mov	r4, r1
 800e79e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7a2:	f000 f855 	bl	800e850 <_lseek_r>
 800e7a6:	1c43      	adds	r3, r0, #1
 800e7a8:	89a3      	ldrh	r3, [r4, #12]
 800e7aa:	bf15      	itete	ne
 800e7ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800e7ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e7b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e7b6:	81a3      	strheq	r3, [r4, #12]
 800e7b8:	bf18      	it	ne
 800e7ba:	81a3      	strhne	r3, [r4, #12]
 800e7bc:	bd10      	pop	{r4, pc}

0800e7be <__sclose>:
 800e7be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7c2:	f000 b813 	b.w	800e7ec <_close_r>
	...

0800e7c8 <_write_r>:
 800e7c8:	b538      	push	{r3, r4, r5, lr}
 800e7ca:	4d07      	ldr	r5, [pc, #28]	; (800e7e8 <_write_r+0x20>)
 800e7cc:	4604      	mov	r4, r0
 800e7ce:	4608      	mov	r0, r1
 800e7d0:	4611      	mov	r1, r2
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	602a      	str	r2, [r5, #0]
 800e7d6:	461a      	mov	r2, r3
 800e7d8:	f7f4 ff3d 	bl	8003656 <_write>
 800e7dc:	1c43      	adds	r3, r0, #1
 800e7de:	d102      	bne.n	800e7e6 <_write_r+0x1e>
 800e7e0:	682b      	ldr	r3, [r5, #0]
 800e7e2:	b103      	cbz	r3, 800e7e6 <_write_r+0x1e>
 800e7e4:	6023      	str	r3, [r4, #0]
 800e7e6:	bd38      	pop	{r3, r4, r5, pc}
 800e7e8:	20000ad8 	.word	0x20000ad8

0800e7ec <_close_r>:
 800e7ec:	b538      	push	{r3, r4, r5, lr}
 800e7ee:	4d06      	ldr	r5, [pc, #24]	; (800e808 <_close_r+0x1c>)
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	4604      	mov	r4, r0
 800e7f4:	4608      	mov	r0, r1
 800e7f6:	602b      	str	r3, [r5, #0]
 800e7f8:	f7f4 ff49 	bl	800368e <_close>
 800e7fc:	1c43      	adds	r3, r0, #1
 800e7fe:	d102      	bne.n	800e806 <_close_r+0x1a>
 800e800:	682b      	ldr	r3, [r5, #0]
 800e802:	b103      	cbz	r3, 800e806 <_close_r+0x1a>
 800e804:	6023      	str	r3, [r4, #0]
 800e806:	bd38      	pop	{r3, r4, r5, pc}
 800e808:	20000ad8 	.word	0x20000ad8

0800e80c <_fstat_r>:
 800e80c:	b538      	push	{r3, r4, r5, lr}
 800e80e:	4d07      	ldr	r5, [pc, #28]	; (800e82c <_fstat_r+0x20>)
 800e810:	2300      	movs	r3, #0
 800e812:	4604      	mov	r4, r0
 800e814:	4608      	mov	r0, r1
 800e816:	4611      	mov	r1, r2
 800e818:	602b      	str	r3, [r5, #0]
 800e81a:	f7f4 ff44 	bl	80036a6 <_fstat>
 800e81e:	1c43      	adds	r3, r0, #1
 800e820:	d102      	bne.n	800e828 <_fstat_r+0x1c>
 800e822:	682b      	ldr	r3, [r5, #0]
 800e824:	b103      	cbz	r3, 800e828 <_fstat_r+0x1c>
 800e826:	6023      	str	r3, [r4, #0]
 800e828:	bd38      	pop	{r3, r4, r5, pc}
 800e82a:	bf00      	nop
 800e82c:	20000ad8 	.word	0x20000ad8

0800e830 <_isatty_r>:
 800e830:	b538      	push	{r3, r4, r5, lr}
 800e832:	4d06      	ldr	r5, [pc, #24]	; (800e84c <_isatty_r+0x1c>)
 800e834:	2300      	movs	r3, #0
 800e836:	4604      	mov	r4, r0
 800e838:	4608      	mov	r0, r1
 800e83a:	602b      	str	r3, [r5, #0]
 800e83c:	f7f4 ff43 	bl	80036c6 <_isatty>
 800e840:	1c43      	adds	r3, r0, #1
 800e842:	d102      	bne.n	800e84a <_isatty_r+0x1a>
 800e844:	682b      	ldr	r3, [r5, #0]
 800e846:	b103      	cbz	r3, 800e84a <_isatty_r+0x1a>
 800e848:	6023      	str	r3, [r4, #0]
 800e84a:	bd38      	pop	{r3, r4, r5, pc}
 800e84c:	20000ad8 	.word	0x20000ad8

0800e850 <_lseek_r>:
 800e850:	b538      	push	{r3, r4, r5, lr}
 800e852:	4d07      	ldr	r5, [pc, #28]	; (800e870 <_lseek_r+0x20>)
 800e854:	4604      	mov	r4, r0
 800e856:	4608      	mov	r0, r1
 800e858:	4611      	mov	r1, r2
 800e85a:	2200      	movs	r2, #0
 800e85c:	602a      	str	r2, [r5, #0]
 800e85e:	461a      	mov	r2, r3
 800e860:	f7f4 ff3c 	bl	80036dc <_lseek>
 800e864:	1c43      	adds	r3, r0, #1
 800e866:	d102      	bne.n	800e86e <_lseek_r+0x1e>
 800e868:	682b      	ldr	r3, [r5, #0]
 800e86a:	b103      	cbz	r3, 800e86e <_lseek_r+0x1e>
 800e86c:	6023      	str	r3, [r4, #0]
 800e86e:	bd38      	pop	{r3, r4, r5, pc}
 800e870:	20000ad8 	.word	0x20000ad8

0800e874 <_read_r>:
 800e874:	b538      	push	{r3, r4, r5, lr}
 800e876:	4d07      	ldr	r5, [pc, #28]	; (800e894 <_read_r+0x20>)
 800e878:	4604      	mov	r4, r0
 800e87a:	4608      	mov	r0, r1
 800e87c:	4611      	mov	r1, r2
 800e87e:	2200      	movs	r2, #0
 800e880:	602a      	str	r2, [r5, #0]
 800e882:	461a      	mov	r2, r3
 800e884:	f7f4 feca 	bl	800361c <_read>
 800e888:	1c43      	adds	r3, r0, #1
 800e88a:	d102      	bne.n	800e892 <_read_r+0x1e>
 800e88c:	682b      	ldr	r3, [r5, #0]
 800e88e:	b103      	cbz	r3, 800e892 <_read_r+0x1e>
 800e890:	6023      	str	r3, [r4, #0]
 800e892:	bd38      	pop	{r3, r4, r5, pc}
 800e894:	20000ad8 	.word	0x20000ad8

0800e898 <roundf>:
 800e898:	ee10 0a10 	vmov	r0, s0
 800e89c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800e8a0:	3a7f      	subs	r2, #127	; 0x7f
 800e8a2:	2a16      	cmp	r2, #22
 800e8a4:	dc15      	bgt.n	800e8d2 <roundf+0x3a>
 800e8a6:	2a00      	cmp	r2, #0
 800e8a8:	da08      	bge.n	800e8bc <roundf+0x24>
 800e8aa:	3201      	adds	r2, #1
 800e8ac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800e8b0:	d101      	bne.n	800e8b6 <roundf+0x1e>
 800e8b2:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800e8b6:	ee00 3a10 	vmov	s0, r3
 800e8ba:	4770      	bx	lr
 800e8bc:	4907      	ldr	r1, [pc, #28]	; (800e8dc <roundf+0x44>)
 800e8be:	4111      	asrs	r1, r2
 800e8c0:	4208      	tst	r0, r1
 800e8c2:	d0fa      	beq.n	800e8ba <roundf+0x22>
 800e8c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e8c8:	4113      	asrs	r3, r2
 800e8ca:	4403      	add	r3, r0
 800e8cc:	ea23 0301 	bic.w	r3, r3, r1
 800e8d0:	e7f1      	b.n	800e8b6 <roundf+0x1e>
 800e8d2:	2a80      	cmp	r2, #128	; 0x80
 800e8d4:	d1f1      	bne.n	800e8ba <roundf+0x22>
 800e8d6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e8da:	4770      	bx	lr
 800e8dc:	007fffff 	.word	0x007fffff

0800e8e0 <_init>:
 800e8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8e2:	bf00      	nop
 800e8e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8e6:	bc08      	pop	{r3}
 800e8e8:	469e      	mov	lr, r3
 800e8ea:	4770      	bx	lr

0800e8ec <_fini>:
 800e8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ee:	bf00      	nop
 800e8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8f2:	bc08      	pop	{r3}
 800e8f4:	469e      	mov	lr, r3
 800e8f6:	4770      	bx	lr
